import{_ as e,c as t,o as r,ah as i}from"./chunks/framework.BurO9VyR.js";const u=JSON.parse('{"title":"css命令大全","description":null,"frontmatter":{"title":"css命令大全","comments":true,"hide":false,"abbrlink":"dbe7da63","date":"2023-03-14T09:19:50.000Z","updated":"2023-03-14T09:19:50.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/css命令大全.md","filePath":"posts/css命令大全.md"}'),l={name:"posts/css命令大全.md"};function n(o,a,s,c,h,d){return r(),t("div",null,a[0]||(a[0]=[i('<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>最近命名css简直脑壳痛，总结下css常见的命名</p><h4 id="不要长命名" tabindex="-1">不要长命名 <a class="header-anchor" href="#不要长命名" aria-label="Permalink to &quot;不要长命名&quot;">​</a></h4><p>比如能用info绝不用information desc-description intro-introduce</p><h4 id="不要单命名" tabindex="-1">不要单命名 <a class="header-anchor" href="#不要单命名" aria-label="Permalink to &quot;不要单命名&quot;">​</a></h4><p>.title .info .text .box等一定使用特定的前缀包裹起来 .head .aside .main .warning .success</p><p>如果找不到前缀，可以采用产品的前缀。前缀也不要超过4个字母</p><h4 id="html-标签中找灵感" tabindex="-1">html 标签中找灵感 <a class="header-anchor" href="#html-标签中找灵感" aria-label="Permalink to &quot;html 标签中找灵感&quot;">​</a></h4><p>a ul li header body aside main nav section content summary detail option img footer btn menu mark group tab b i</p><h4 id="html-属性中找灵感" tabindex="-1">html 属性中找灵感 <a class="header-anchor" href="#html-属性中找灵感" aria-label="Permalink to &quot;html 属性中找灵感&quot;">​</a></h4><p>radio checkbox range email number color date url time file grid cell bar item row slider list panel tree</p><h4 id="伪类和布尔属性-找灵感" tabindex="-1">伪类和布尔属性 找灵感 <a class="header-anchor" href="#伪类和布尔属性-找灵感" aria-label="Permalink to &quot;伪类和布尔属性 找灵感&quot;">​</a></h4><p>active invalid disabled selected</p><h4 id="页面结构" tabindex="-1">页面结构 <a class="header-anchor" href="#页面结构" aria-label="Permalink to &quot;页面结构&quot;">​</a></h4><p>container（多个容器的包裹） head content main footer nav sidebar column wrapper（单个容器的包裹） left right center</p><h4 id="热词" tabindex="-1">热词 <a class="header-anchor" href="#热词" aria-label="Permalink to &quot;热词&quot;">​</a></h4><p>tag tips vote title login-bar nav-bar tab-bar search list tab banner module news status guild</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>layout 和内容无关的布局，可以是全局布局，也可以是局部布局，比如常见的两列布局column-layout-2 layout-left layout-right, layout-center</li><li>container 和 wrapper， container用于包括有结构的一组元素，比如main-container 里面包含 header-container content-container footer-container。 header-container。wrapper 是单个容器的包裹，通常对某个容器进行修饰，比如某个 nav-bar 需要新增外边距等 nav-bar-wrapper</li><li>语义化的命名是优先于结构化的，结构化的命名在结构调整时，所有的都会跟着调整</li><li>item用于子项，通常和list一起搭配，常见于下拉列表中</li><li>box container总是包裹的同级的内容，有时候就是一个简单的盒子。直接命名一个box，当你没得命名时采用box总没错。</li><li>title 最容易的滥用的的，title 和 header 是两种命名风格，一个是结构化，一个语义化。如果是单纯的文本用title， 如果是复杂的结果用header</li><li>最麻烦的是一些小部件的命名，比如导航栏中有一个input输入框，点击input输入框会原地替换成一个大的Input框。如果小部件是在整个页面独一无二的，不用关注小部件被放置到哪儿，直接prefix-search-text prefix-search-bar prefix-search-input</li></ul>',19)]))}const m=e(l,[["render",n]]);export{u as __pageData,m as default};
