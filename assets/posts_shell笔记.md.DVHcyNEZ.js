import{_ as i,c as a,o as n,ah as h}from"./chunks/framework.BurO9VyR.js";const g=JSON.parse('{"title":"shell笔记","description":null,"frontmatter":{"title":"shell笔记","comments":true,"hide":false,"abbrlink":"c3711ab9","date":"2020-01-07T16:58:58.000Z","updated":"2020-01-07T16:58:58.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/shell笔记.md","filePath":"posts/shell笔记.md"}'),l={name:"posts/shell笔记.md"};function t(p,s,e,k,d,r){return n(),a("div",null,s[0]||(s[0]=[h(`<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>开发中总是遇到各种脚本，目前只能对普调的脚本进行阅读和编写，系统性的记录一篇开发中所需要的脚本技能，同时将平常遇到的脚本难点作为讲解。脚本分为shell脚本和bat脚本</p><h3 id="shell" tabindex="-1">shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;shell&quot;">​</a></h3><h4 id="脚本处理程序" tabindex="-1">脚本处理程序 <a class="header-anchor" href="#脚本处理程序" aria-label="Permalink to &quot;脚本处理程序&quot;">​</a></h4><p>如果对脚本程序需要直接执行，在脚本前面添加#!/usr/bin/env sh使用默认执行程序，/usr/bin/env 会自动查找环境的sh的程序来执行</p><p>对于需要全局使用的脚本，有两种方式，第一个是软连接或者放到/usr/local/bin/ 中，第二个是使用别名 alias some=&quot;/path/xxx&quot;</p><h4 id="输入输出" tabindex="-1">输入输出 <a class="header-anchor" href="#输入输出" aria-label="Permalink to &quot;输入输出&quot;">​</a></h4><p>read 能从当前stdin获取输入并存储到某个变量中 read -p &quot;请输入值&quot; -n 10 -s -t 20 someValue # -n 限制文本长度 -s 密码输入，不会显示， -e 启用命令补全 -t 输入时长 echo &quot;$someValue&quot;</p><p>echo &quot;&quot;转义输出echo &#39;&#39;不转义输出 echo \`\`执行转义后的结果并输出</p><p>printf 是高级的输出工具，具有序列化的功能。printf &quot;string&quot; ...args printf &quot;%s-5 %c $-4.2f&quot; 郭靖 男 66.1234</p><p>shell执行时总是默认开启了三个文件描述符为0 1 2 用于输入，输出和stderr。在shell中执行的命令默认也是使用这三个文件。通过 command &gt; file; command &gt;&gt; file 将 stdout指向另一个文件。 使用 2 &amp;&gt; 1（&amp;&gt; file） 将stderr 指向 stdout ，使用 command &lt; file 将stdin 指向file</p><h4 id="命令执行" tabindex="-1">命令执行 <a class="header-anchor" href="#命令执行" aria-label="Permalink to &quot;命令执行&quot;">​</a></h4><p>command1;command2; 命令都是按照;结尾（换行符前面的可以省），命令都是从前往后执行，即使前面的命令错误 command1 &amp;&amp; command2 || command3 如果命令command1 成功则执行command2，失败则执行command3。成功错误失败根据进程返回0 1 2来判断</p><h4 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h4><p>只有字符串，没有数字布尔等类型，变量默认只在当前shell或者脚本(新开了一个子shell来执行脚本)中有效。变量通过$name 或者 \${name}来获取</p><h5 id="截取字符串" tabindex="-1">截取字符串 <a class="header-anchor" href="#截取字符串" aria-label="Permalink to &quot;截取字符串&quot;">​</a></h5><p>\${day_id:0:7} 0 起始位置 7 截取多少个</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wo shi yi da shuai bi&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 截取</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;who are you: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # wo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;who are you: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shuai</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sha</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # wo shi yi ge da sha bi</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除留剩下的</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;who are you&quot;:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shuai</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="if控制" tabindex="-1">if控制 <a class="header-anchor" href="#if控制" aria-label="Permalink to &quot;if控制&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">elif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    command</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    command</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span></code></pre></div><p>控制语句如上，command表示退出码，除了0是成功其余都是失败，如果要测试表达式的退出码，使用[expr] 来判断</p><h4 id="case控制" tabindex="-1">case控制 <a class="header-anchor" href="#case控制" aria-label="Permalink to &quot;case控制&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">glob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;; </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">break，不在执行后面的语句</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">    command;&amp;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">  执行当前语句并在接着进入下一个语句（不匹配直接执行）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">    command;;&amp;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> 继续下一个语句的匹配</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TIP</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">你最喜欢哪个国家</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1. 中国</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2. 日本</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3. 美国</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TIP</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> choose</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $choose </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">    1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;选择了中国，真棒&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;选择了日本，给你一棒子&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">    3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;选择了美国，小垃圾&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">esac</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%s %s&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> choose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lang</span></span></code></pre></div><h4 id="while-循环" tabindex="-1">while 循环 <a class="header-anchor" href="#while-循环" aria-label="Permalink to &quot;while 循环&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commmand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1 2 3 4 5 6&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 循环带空格的字符串,根据IFS变量定义的内容来分割</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 遍历文件名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 遍历数组</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $item;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1..10}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 遍历1到10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 循环 10次</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">123</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">123&quot;</span></span></code></pre></div><h4 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h4><p>some=(v1, v2, v3)</p><h4 id="算数表达式" tabindex="-1">算数表达式 <a class="header-anchor" href="#算数表达式" aria-label="Permalink to &quot;算数表达式&quot;">​</a></h4><p>shell没有内置表达式，只有单纯的变量声明，一切基于指令，部分指令提供了简写的形式。表示式都是被指令支持的。不能直接sum=1+1 比如 let sum=1+1, 理解成let指令，传入了一个sum=1+1 参数。let指令可以简写成((sum=1+1))</p><h4 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sum=1+1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $sum </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将sum的值作为函数返回值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>shell的函数没有返回值，只是单纯的调用。函数内部有一些特殊的变量$0(脚本名)，$N(参数1~N),$#(参数个数), $@ 全部参数</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;当前参数个数: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;当前函数名称: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FUNCNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;分别是\\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><h4 id="特殊符号" tabindex="-1">特殊符号 <a class="header-anchor" href="#特殊符号" aria-label="Permalink to &quot;特殊符号&quot;">​</a></h4><ul><li>$取变量值</li><li>&quot;&quot;转义字符串</li><li>&#39;&#39;不转义</li><li>()在子shell中执行()中的代码</li><li>$() 将()中结果stdout，和反引号包裹相同，如果作为命令执行，是将结果执行，如果作为赋值，将结果赋值</li><li>{} 在当前shell自行命令</li><li>[] 变量的测试，或者用于计算表单</li><li>(())计算算数表达式, 或者在for中((i=0;i&lt;3;i+++))</li></ul><p>关于()和{}区别</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{name=test1} # </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test1</span></span></code></pre></div><h4 id="算数运算" tabindex="-1">算数运算 <a class="header-anchor" href="#算数运算" aria-label="Permalink to &quot;算数运算&quot;">​</a></h4><p>expr 指令用于算数的计算，计算符号之前需要有空格，大致逻辑是expr 通过空格来区分不同的参数。[&#39;expr&#39;, $a, &quot;+&quot;, $b]这种逻辑，expr运算后会返回结果</p><p>((expr 1 + 1)) (expr 1 + 1)</p><p>条件表达式需要放在[]中, [] 也被视为一个命令 [ ! $? -eq 0 ] &amp;&amp; xxxx 表示上一个命令的成功执行后续的，为了在兼容性推荐使用[[ ]] 语法，可以实现 [[ command1 &amp;&amp; command2 ]] 操作</p><p>还有关系运算符 ! -eq -ne -gt -lt -ge -le 都只能在[]，注意中括号内两边都有空格</p><p>提供了文件系统检查功能 [ -e file ] 文件是否存在 [ -d file ] 是否是目录</p><p>从上面可以看出[ ] 也是一个命令，返回 0 1</p><h4 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h4><p>shell中部分命令支持正则表达式，主要是grep，awk, sed和cut。shell中正则表达式分为基本正则和扩展正则，不同的命令实现不一致。</p><h5 id="基本正则表达式" tabindex="-1">基本正则表达式 <a class="header-anchor" href="#基本正则表达式" aria-label="Permalink to &quot;基本正则表达式&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>. * $ \\ ^ \\{n\\}  还有单词编辑等</span></span></code></pre></div><p>常用于grep命令中 echo &quot;1 2 33 4 aaa&quot; | grep -n &quot;.{1}3&quot;</p><h5 id="扩展正则表达式" tabindex="-1">扩展正则表达式 <a class="header-anchor" href="#扩展正则表达式" aria-label="Permalink to &quot;扩展正则表达式&quot;">​</a></h5><p>不需要讲{}转义括起来，支持+?等量词，同时支持分组和逻辑or，用于sed -r grep -E awk中</p><h4 id="ifs" tabindex="-1">IFS <a class="header-anchor" href="#ifs" aria-label="Permalink to &quot;IFS&quot;">​</a></h4><p>常见命名都通过该项进行分割，比如for in, cut, awk等命令</p><h4 id="shell三剑客之grep" tabindex="-1">shell三剑客之grep <a class="header-anchor" href="#shell三剑客之grep" aria-label="Permalink to &quot;shell三剑客之grep&quot;">​</a></h4><p>命令格式如下 grep [option] pattern [...files] 选项有如下</p><ul><li>-i 忽略大小写</li><li>-v 反向匹配</li><li>-o 只显示匹配命中的字符串（默认是显示整行，高亮命中的字符串）</li><li>-c 统计命中的行数，常用于判断是否匹配中。</li><li>-E 使用扩展正则表达式</li><li>-R 递归的匹配目录下的文件</li><li>-n 显示行号</li></ul><h4 id="shell三剑客之sed" tabindex="-1">shell三剑客之sed <a class="header-anchor" href="#shell三剑客之sed" aria-label="Permalink to &quot;shell三剑客之sed&quot;">​</a></h4><p>sed是一个流式的替换查找的命令，使用基本正则表达式格式如下 sed [options] &#39;start,end /mode/pattern/mode-args/&#39; [...file]</p><p>替换文件中的unix文本为linux。 echo &quot;this is a unix operator&quot; | sed &#39;s/unix/linux/&#39;</p><p>选项中有-i 直接在源文件上进行编辑，-n 仅显示处理后的结果（否则会展示整个文件内容） -e 设置多个处理命令</p><h5 id="行定位" tabindex="-1">行定位 <a class="header-anchor" href="#行定位" aria-label="Permalink to &quot;行定位&quot;">​</a></h5><ul><li>1,4 第一行到第四行</li><li>1,+3 第一行到+3行</li><li>4,$ 4行到尾行</li><li>/test/,/linux/，出现第一次test的行到出现/linux/的行</li><li>3,5!除了3~5行的意外匹配</li></ul><h5 id="sed查找内容-p、-和n" tabindex="-1">sed查找内容 p、=和n <a class="header-anchor" href="#sed查找内容-p、-和n" aria-label="Permalink to &quot;sed查找内容 p、=和n&quot;">​</a></h5><p>n表示跳过当前这行， ;是执行多个命令，p;n表示读入当前这行，然后立刻跳过下一行，所以是技术行执行 p表示打印输出 p会输出整行，如果只需要显示匹配的行号使用 =</p><h5 id="sed查找并替换c-和-s" tabindex="-1">sed查找并替换c 和 s <a class="header-anchor" href="#sed查找并替换c-和-s" aria-label="Permalink to &quot;sed查找并替换c 和 s&quot;">​</a></h5><p>s 替换字符串，c替换整行 sed &#39;s/linux/unix/g&#39; // 多次替换 sed &#39;s/linux/unix/&#39; // 一行只替换一次 sed &#39;s/linux/unix/2&#39; // 替换第二个匹配的的 sed &#39;s/^/#/&#39; // 行首添加# sed &#39;s/[0-9]*/1&amp;&#39; // 所有数字前面添加1</p><h5 id="sed-删除某些行" tabindex="-1">sed 删除某些行 <a class="header-anchor" href="#sed-删除某些行" aria-label="Permalink to &quot;sed 删除某些行&quot;">​</a></h5><p>sed &#39;3d&#39; 删除第三行 sed &#39;2,+1d&#39; 删除2+1行 sed &#39;$ d&#39; 删除末尾那行<br> sed &#39;/^$/ d&#39; 删除所有空行</p><h5 id="h-和-a" tabindex="-1">H 和 a <a class="header-anchor" href="#h-和-a" aria-label="Permalink to &quot;H 和 a&quot;">​</a></h5><p>H复制部分到剪贴板，a插入到某行后面 sed -i &quot;1,3H;9a/adfs/&quot; 复制1,3行到剪贴板并且在9行后面插入adfs</p><h4 id="shell三剑客之awk" tabindex="-1">shell三剑客之awk <a class="header-anchor" href="#shell三剑客之awk" aria-label="Permalink to &quot;shell三剑客之awk&quot;">​</a></h4><p>awk使用扩展正则表达式，先按照行处理，再将行进行分割。命令格式如下,务必记住是单引号</p><pre><code>awk [option] &#39;mode {action}&#39; ...files
</code></pre><ul><li>awk -F &quot;:&quot; &#39;/^root/&#39; &lt; /etc/passwd 查找root开头的行</li><li>awk -F &quot;:&quot; &#39;NF==2{print NF,$0}&#39; 打印第一行，并添加行号</li><li>awk -F &quot;&quot;</li></ul><h3 id="bat脚本" tabindex="-1">bat脚本 <a class="header-anchor" href="#bat脚本" aria-label="Permalink to &quot;bat脚本&quot;">​</a></h3><p>bat脚本是运行在dos上面的脚本, 大致也是通过一条一条的指令来实现</p><h4 id="变量-1" tabindex="-1">变量 <a class="header-anchor" href="#变量-1" aria-label="Permalink to &quot;变量&quot;">​</a></h4><p>通过set指令 set a=123 获取变量通过%a%，通过 set /p 获取用户输入， 通过 set /a 设置一个数字</p><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> var is %a%</span></span></code></pre></div><h4 id="控制语句" tabindex="-1">控制语句 <a class="header-anchor" href="#控制语句" aria-label="Permalink to &quot;控制语句&quot;">​</a></h4><pre><code>if [not] %a%==1 (command) else command
</code></pre><p>括号中的语句可以多行执行</p><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> off</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 请输入数字，如果文字大于10，显示true，反之显示false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /p input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %input% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GTR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 小于等10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 大于10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h4><p>算术运算 + - * / %%(取余)，在表达式中会开启运算(set /a，if) 逻辑运算 equ neq lss leq gtr geq 赋值运算 += -= *= /= %=</p><h4 id="函数-1" tabindex="-1">函数 <a class="header-anchor" href="#函数-1" aria-label="Permalink to &quot;函数&quot;">​</a></h4><p>通过call :functionName调用，函数末尾通过got:eof标记结束。 对比一下shell和bat脚本的函数</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sum_a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sum_b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $result </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># echo 8</span></span></code></pre></div><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> off</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">:: 不需要添加%result%。自动处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %result%</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">:: 函数需要放在最后或者单独定义一个函数区来跳过</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> func_end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func_start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">:: 通过修改传入的参数来返回函数值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /a %~3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%2 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %~3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">eof</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func_end</span></span></code></pre></div><p>bat的函数功能严格意义上应该是call的调用另一个bat脚本，在当前cmd中执行, 而且还会等到call的脚本执行完毕才会回到主进程 除了call， 还有start脚本，是另外开一个窗口执行bat脚本。</p><h4 id="输入输出-1" tabindex="-1">输入输出 <a class="header-anchor" href="#输入输出-1" aria-label="Permalink to &quot;输入输出&quot;">​</a></h4><p>输入输出和shell上一致，都有重定向输出&gt;,追加&gt;&gt;和错误输出2&gt;err.txt，同样也是 dir&gt;nul输出到垃圾箱。 2 &amp;&gt;1 2和1相同输出。</p><h4 id="多命令执行" tabindex="-1">多命令执行 <a class="header-anchor" href="#多命令执行" aria-label="Permalink to &quot;多命令执行&quot;">​</a></h4><p>bat通过一行一个指令的执行，&amp;&amp;、||相同 ，还有一个 &amp; 和 shell的;相同，同一行执行多条命令。除此之外还有()可以扩展成多行</p><h4 id="bat-技巧" tabindex="-1">bat 技巧 <a class="header-anchor" href="#bat-技巧" aria-label="Permalink to &quot;bat 技巧&quot;">​</a></h4><h5 id="扩展参数" tabindex="-1">扩展参数 <a class="header-anchor" href="#扩展参数" aria-label="Permalink to &quot;扩展参数&quot;">​</a></h5><p>将参数扩展为完整的路径，相对路径补全成绝对路径</p><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> off</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">:: 当前脚本第一个参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %~1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">:: 当前脚本第一个参数，并且补全到不带驱动器的圈路径,到目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %~p1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">:: 当前脚本第一个参数，并且补全到带驱动器的全路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %~dp1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">:: 脚本本身的补全</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %~dp0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 全路径补全，包含文件本身</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">echo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> %~f0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pause</span></span></code></pre></div>`,101)]))}const E=i(l,[["render",t]]);export{g as __pageData,E as default};
