import{_ as e,c as i,o as t,ah as s}from"./chunks/framework.BurO9VyR.js";const k=JSON.parse('{"title":"FE-advance","description":null,"frontmatter":{"title":"FE-advance","comments":true,"hide":false,"abbrlink":"fcb5ead3","date":"2023-02-15T16:45:48.000Z","updated":"2023-02-15T16:45:48.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/FE-advance.md","filePath":"posts/FE-advance.md"}'),h={name:"posts/FE-advance.md"};function r(l,a,o,n,d,c){return t(),i("div",null,a[0]||(a[0]=[s(`<h3 id="浏览器和网络" tabindex="-1">浏览器和网络 <a class="header-anchor" href="#浏览器和网络" aria-label="Permalink to &quot;浏览器和网络&quot;">​</a></h3><h4 id="浏览器的进程有哪些-分别作用" tabindex="-1">浏览器的进程有哪些，分别作用 <a class="header-anchor" href="#浏览器的进程有哪些-分别作用" aria-label="Permalink to &quot;浏览器的进程有哪些，分别作用&quot;">​</a></h4><h4 id="浏览器的线程" tabindex="-1">浏览器的线程 <a class="header-anchor" href="#浏览器的线程" aria-label="Permalink to &quot;浏览器的线程&quot;">​</a></h4><h4 id="输入一个-url-浏览器如何处理解析" tabindex="-1">输入一个 url，浏览器如何处理解析 <a class="header-anchor" href="#输入一个-url-浏览器如何处理解析" aria-label="Permalink to &quot;输入一个 url，浏览器如何处理解析&quot;">​</a></h4><h4 id="js-引擎的执行-如何和各个线程配合" tabindex="-1">js 引擎的执行，如何和各个线程配合 <a class="header-anchor" href="#js-引擎的执行-如何和各个线程配合" aria-label="Permalink to &quot;js 引擎的执行，如何和各个线程配合&quot;">​</a></h4><h4 id="什么请求会携带-cookies" tabindex="-1">什么请求会携带 cookies <a class="header-anchor" href="#什么请求会携带-cookies" aria-label="Permalink to &quot;什么请求会携带 cookies&quot;">​</a></h4><p>任何请求都会携带 cookies，最终能不能携带 cookies 还需要多步过滤。</p><h4 id="cookies-如何携带-如何设置。" tabindex="-1">cookies 如何携带，如何设置。 <a class="header-anchor" href="#cookies-如何携带-如何设置。" aria-label="Permalink to &quot;cookies 如何携带，如何设置。&quot;">​</a></h4><p>携带当前请求的父域名和父路径上的 cookies，设置域名也是只能设置到当前请求的父域名路径</p><h4 id="跨域场景的-cookies-是如何设置和携带的" tabindex="-1">跨域场景的 cookies 是如何设置和携带的 <a class="header-anchor" href="#跨域场景的-cookies-是如何设置和携带的" aria-label="Permalink to &quot;跨域场景的 cookies 是如何设置和携带的&quot;">​</a></h4><p>跨域和携带 cookies 不冲突，cookies 是只看目的不看来源，对于 xhr 和 fetch 的请求，总是需要手动的设置的是否在请求中包含 cookies。对于其他的比如标签，链接或者 link 等不考虑跨域。</p><h4 id="什么是跨站-samesite-是什么" tabindex="-1">什么是跨站，samesite 是什么 <a class="header-anchor" href="#什么是跨站-samesite-是什么" aria-label="Permalink to &quot;什么是跨站，samesite 是什么&quot;">​</a></h4><p>只有两个请求的顶级有效域名 + 1 相同，既是同站。samesite 有 lax、strict 和 none。老版本中 samesite 默认值是 none, 意味着 cookies 的携带不看来源，目前各大浏览器统一设置为 lax, 对于跨站的请求只允许 a 标签、预加载和 get 表单能携带 cookies。</p><h4 id="浏览器的缓存有些那些" tabindex="-1">浏览器的缓存有些那些 <a class="header-anchor" href="#浏览器的缓存有些那些" aria-label="Permalink to &quot;浏览器的缓存有些那些&quot;">​</a></h4><h4 id="no-store-和-no-cache" tabindex="-1">no-store 和 no-cache <a class="header-anchor" href="#no-store-和-no-cache" aria-label="Permalink to &quot;no-store 和 no-cache&quot;">​</a></h4><h4 id="webpack-中的缓存如何配置" tabindex="-1">webpack 中的缓存如何配置 <a class="header-anchor" href="#webpack-中的缓存如何配置" aria-label="Permalink to &quot;webpack 中的缓存如何配置&quot;">​</a></h4><h4 id="put、post、get-区别-浏览器常见的状态码" tabindex="-1">put、post、get 区别，浏览器常见的状态码 <a class="header-anchor" href="#put、post、get-区别-浏览器常见的状态码" aria-label="Permalink to &quot;put、post、get 区别，浏览器常见的状态码&quot;">​</a></h4><h4 id="跨域的几种方法和原理" tabindex="-1">跨域的几种方法和原理 <a class="header-anchor" href="#跨域的几种方法和原理" aria-label="Permalink to &quot;跨域的几种方法和原理&quot;">​</a></h4><h4 id="xss-和-crsf-攻击是啥-如何防范" tabindex="-1">xss 和 crsf 攻击是啥，如何防范 <a class="header-anchor" href="#xss-和-crsf-攻击是啥-如何防范" aria-label="Permalink to &quot;xss 和 crsf 攻击是啥，如何防范&quot;">​</a></h4><h4 id="postmessage-如何实现-讲述一下为什么能实现跨域。" tabindex="-1">postmessage 如何实现，讲述一下为什么能实现跨域。 <a class="header-anchor" href="#postmessage-如何实现-讲述一下为什么能实现跨域。" aria-label="Permalink to &quot;postmessage 如何实现，讲述一下为什么能实现跨域。&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建并获取其他窗口的引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iframe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;IFRAME&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertIframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iframe)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iframe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  iframe.contentWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iframe中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (message.origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.parent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;iframe message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>所有的跨域都基于信任链，子 iframe 手动添加了对父 origin 的信任，父 origin 也手动添加了对子的信任。</p><p>还有基于 window.domain 的跨域，在两个页面是同站但是跨域的场景，手动将的两个站点的 window.domain 设置为相同即可在两个页面分别直接获取 window 对象</p><h4 id="access-control-allow-流程。" tabindex="-1">access-control-allow 流程。 <a class="header-anchor" href="#access-control-allow-流程。" aria-label="Permalink to &quot;access-control-allow 流程。&quot;">​</a></h4><ol><li>判断当前请求是简单请求还是复杂请求，如果是简单请求直接请求，后端在响应中携带 access-control-allow: * 对应的域，浏览器检查响应中是否有该字段并且能和当前的域匹配，响应才会被正确的解析。如果是复杂请求，浏览器先发送一个 option 请求， 不携带请求体，询问是否同意跨域，如果同意再发送简单请求。</li></ol><h4 id="简单请求和复杂请求" tabindex="-1">简单请求和复杂请求 <a class="header-anchor" href="#简单请求和复杂请求" aria-label="Permalink to &quot;简单请求和复杂请求&quot;">​</a></h4><p>简单请求需要满足 request method: option, get, post ，request header: accept accept-language 。content-language 和 content-type 是 x-www-form-urlencode 和 mutilpart/formdata 以及 text/plain，注意不包括我们平常用的 json。 其余的都是复杂请求。</p><p>对于所有的跨域，请求中总是会携带当前域的信息通过 origin 协议 host 和端口 其中简单请求服务端响应的有: access-control-allow-origin: *（表示所有，但是不会携带 cookies，即使设置了携带） ，对于开发环境，建议是正向代理总是将 Origin，除了浏览器其他平台没有跨域问题 access-control-allow-credentials: 下次请求是否允许发送的 cookie（要携带 cookies， 两个条件缺一不可）</p><p>对于复杂请求，还会添加 max-age: 表示多少时间内不需要再次预请求。 allow-method: 允许的请求的方法 allow-headers: *(除了 authoritie 需要手动指定外，如果一定要手动指定，一定记得添加 content-type 这样就能允许所有的 content-type 类型)</p><h4 id="从浏览器上做优化有哪些-seo-多域名" tabindex="-1">从浏览器上做优化有哪些(seo，多域名，) <a class="header-anchor" href="#从浏览器上做优化有哪些-seo-多域名" aria-label="Permalink to &quot;从浏览器上做优化有哪些(seo，多域名，)&quot;">​</a></h4><h4 id="获取其他页面的-window-获取-iframe-的-window-iframe-获取上级-windows" tabindex="-1">获取其他页面的 window，获取 iframe 的 window， iframe 获取上级 windows <a class="header-anchor" href="#获取其他页面的-window-获取-iframe-的-window-iframe-获取上级-windows" aria-label="Permalink to &quot;获取其他页面的 window，获取 iframe 的 window， iframe 获取上级 windows&quot;">​</a></h4><h4 id="iframe-如何创建最优-iframe-对主页面的影响" tabindex="-1">iframe 如何创建最优，iframe 对主页面的影响 <a class="header-anchor" href="#iframe-如何创建最优-iframe-对主页面的影响" aria-label="Permalink to &quot;iframe 如何创建最优，iframe 对主页面的影响&quot;">​</a></h4><h4 id="前端需要理解的-seo" tabindex="-1">前端需要理解的 SEO <a class="header-anchor" href="#前端需要理解的-seo" aria-label="Permalink to &quot;前端需要理解的 SEO&quot;">​</a></h4><h3 id="html-相关" tabindex="-1">html 相关 <a class="header-anchor" href="#html-相关" aria-label="Permalink to &quot;html 相关&quot;">​</a></h3><h4 id="meta-中的-viewport-用法" tabindex="-1">meta 中的 viewport 用法 <a class="header-anchor" href="#meta-中的-viewport-用法" aria-label="Permalink to &quot;meta 中的 viewport 用法&quot;">​</a></h4><h4 id="input-中的-type-hidden-的意义" tabindex="-1">input 中的 type=hidden 的意义 <a class="header-anchor" href="#input-中的-type-hidden-的意义" aria-label="Permalink to &quot;input 中的 type=hidden 的意义&quot;">​</a></h4><h4 id="字体图标的原理" tabindex="-1">字体图标的原理 <a class="header-anchor" href="#字体图标的原理" aria-label="Permalink to &quot;字体图标的原理&quot;">​</a></h4><h3 id="css-相关" tabindex="-1">css 相关 <a class="header-anchor" href="#css-相关" aria-label="Permalink to &quot;css 相关&quot;">​</a></h3><h4 id="bfc-是啥-触发-bfc-的条件-5-点" tabindex="-1">BFC 是啥，触发 BFC 的条件 5 点 <a class="header-anchor" href="#bfc-是啥-触发-bfc-的条件-5-点" aria-label="Permalink to &quot;BFC 是啥，触发 BFC 的条件 5 点&quot;">​</a></h4><ol><li>BFC 外的浮动元素不会和 BFC 区域重叠</li><li><strong>BFC 高度会计算浮动元素</strong></li><li>BFC 不会和另一个 BFC 出现 margin 重叠</li><li>BFC 中的上下边距会重叠，取最大的那个</li></ol><h4 id="line-height-2-和-line-height-200-的区别" tabindex="-1">line-height: 2 和 line-height: 200%的区别 <a class="header-anchor" href="#line-height-2-和-line-height-200-的区别" aria-label="Permalink to &quot;line-height: 2 和 line-height: 200%的区别&quot;">​</a></h4><h4 id="实现文本溢出省略号" tabindex="-1">实现文本溢出省略号 <a class="header-anchor" href="#实现文本溢出省略号" aria-label="Permalink to &quot;实现文本溢出省略号&quot;">​</a></h4><h4 id="单词超出换行如何实现-white-space-word-break-overflow-wrap" tabindex="-1">单词超出换行如何实现，white-space, word-break ,overflow-wrap <a class="header-anchor" href="#单词超出换行如何实现-white-space-word-break-overflow-wrap" aria-label="Permalink to &quot;单词超出换行如何实现，white-space, word-break ,overflow-wrap&quot;">​</a></h4><p>white-space 用于控制换行符，空格和行框盒子的生成, wrap 允许行框盒子 pre 允许换行符和空格 line 不予许空格</p><p>word-break 控制单词是否要换行 normal: CJK 字体换行，非 CJK 在空格地方换行，而且如果剩余空间不能转载下，会提前换行 break-all: CJK（两个标点符号之间）换行，非 CJK 在任意地方换行，不会提前换行 keep-all: CJK 不换行，非 CJK 也不换行</p><p>overflow-wrap 控制的是一个单词在盒子转不下时是否换行。只有 normal 和 break-word 两个属性，一个是换行一个是不换行</p><h4 id="flex-各个属性-flex-实现居中-如何平分剩余空间等" tabindex="-1">flex 各个属性，flex 实现居中, 如何平分剩余空间等 <a class="header-anchor" href="#flex-各个属性-flex-实现居中-如何平分剩余空间等" aria-label="Permalink to &quot;flex 各个属性，flex 实现居中, 如何平分剩余空间等&quot;">​</a></h4><h4 id="重绘和回流是什么" tabindex="-1">重绘和回流是什么 <a class="header-anchor" href="#重绘和回流是什么" aria-label="Permalink to &quot;重绘和回流是什么&quot;">​</a></h4><h4 id="渲染层-合成层和图形层是啥" tabindex="-1">渲染层，合成层和图形层是啥 <a class="header-anchor" href="#渲染层-合成层和图形层是啥" aria-label="Permalink to &quot;渲染层，合成层和图形层是啥&quot;">​</a></h4><h4 id="animation-和-transition" tabindex="-1">animation 和 transition <a class="header-anchor" href="#animation-和-transition" aria-label="Permalink to &quot;animation 和 transition&quot;">​</a></h4><h4 id="几个像素和-viewport-的关系" tabindex="-1">几个像素和 viewport 的关系 <a class="header-anchor" href="#几个像素和-viewport-的关系" aria-label="Permalink to &quot;几个像素和 viewport 的关系&quot;">​</a></h4><p>物理像素，指的是一个设备屏幕有多少个物理点，比如 pc 是 1080 _ 1920 表示横向有 1920 个像素（系统本身不缩放的情况下）。有些设备屏幕是高清屏，用了多个物理像素来展示一个逻辑像素，称为像素比 DPR，设备的 DPR 是固定的，比如苹果某些是 2，有些设备是 3。莫、默认情况下 1 css px = 1 物理像素 _ DPR（也就是所谓的设备像素，后文中 device-width），但是又出现了缩放的场景， 这个时候 1 css px = 1 物理像素 _ DPR _ 2。</p><p>layoutview， 浏览器默认的窗口的大小，980px（css 像素），如果不手动指定视图大小，浏览器会按照这个展示 visual view 可视窗口，总是理想窗口 / 缩放 ideal view 理想窗口，总是和设备像素相同</p><p>在移动端中，大部分设备的 DPR 是固定的，设备像素也是固定的。但是在 pc 端因为 2k 和 4k 屏的出现，可以动态的调整 DPR 值，所以现在 pc 端也需要注意高清屏的问题</p><p>我们在 css 中接触的总是 css 像素。下面举一个例子子来加强理解 设置 <strong>&lt;meat name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1, minimum-scale=1&quot;&gt;</strong> 如果上面的设备的 DPR 是 2，物理像素是 750，设备像素就是 375， 这个时候 1css 像素就是 1 物理像素 _ DPR _ scale(1)就是 1 设备像素</p><p>再考虑视图的问题，上面因为同时设置了 width 和 scale，按照谁大取谁的方式，刚好 device-width 和 initial-scale 相同，所以 layoutview 是 375px，如果页面中有元素设置 500px，就会出现滚动条。可视区域的大小总是设备像素 375px;换算成 css 就是 375</p><p>将 scale = 2，这个时候因为 width 还是 375，但是 initial-scale * ideal view = 750 大于 375，所以最终的 layoutview 是 750px。可视区域也变成了 375 / 2，所以滚动条会有 1 / 4</p><h4 id="_1px-解决" tabindex="-1">1px 解决 <a class="header-anchor" href="#_1px-解决" aria-label="Permalink to &quot;1px 解决&quot;">​</a></h4><p>设计稿是 750px, 750px 中除了一个 1px 的，映射到实机就是 0.5px，css 不支持 0.5px 设置，有两种推荐的方案，第一个是通过 transform: scale()来缩放。第二个是直接不用设备独立像素，把手机的像素扩展到最大，比如 750px 的设计稿，直接将取消缩放，让界面也是 750px 宽，在这个基础上再做 rem 等比的缩放。推荐第二种。</p><h4 id="层叠上下文" tabindex="-1">层叠上下文 <a class="header-anchor" href="#层叠上下文" aria-label="Permalink to &quot;层叠上下文&quot;">​</a></h4><h4 id="媒体查询" tabindex="-1">媒体查询 <a class="header-anchor" href="#媒体查询" aria-label="Permalink to &quot;媒体查询&quot;">​</a></h4><h4 id="全屏滚动和视差滚动" tabindex="-1">全屏滚动和视差滚动 <a class="header-anchor" href="#全屏滚动和视差滚动" aria-label="Permalink to &quot;全屏滚动和视差滚动&quot;">​</a></h4><h3 id="js-基础" tabindex="-1">js 基础 <a class="header-anchor" href="#js-基础" aria-label="Permalink to &quot;js 基础&quot;">​</a></h3><h4 id="执行上下文是啥-三大上下文类型-上下文的三大要素" tabindex="-1">执行上下文是啥，三大上下文类型，上下文的三大要素 <a class="header-anchor" href="#执行上下文是啥-三大上下文类型-上下文的三大要素" aria-label="Permalink to &quot;执行上下文是啥，三大上下文类型，上下文的三大要素&quot;">​</a></h4><h4 id="词法作用域和语法作用域-为什么-js-是词法作用域" tabindex="-1">词法作用域和语法作用域，为什么 js 是词法作用域 <a class="header-anchor" href="#词法作用域和语法作用域-为什么-js-是词法作用域" aria-label="Permalink to &quot;词法作用域和语法作用域，为什么 js 是词法作用域&quot;">​</a></h4><h4 id="this-的绑定规则-bind-后还能修改-this-吗-使用-call-修改" tabindex="-1">this 的绑定规则，bind 后还能修改 this 吗（使用 call 修改） <a class="header-anchor" href="#this-的绑定规则-bind-后还能修改-this-吗-使用-call-修改" aria-label="Permalink to &quot;this 的绑定规则，bind 后还能修改 this 吗（使用 call 修改）&quot;">​</a></h4><h4 id="箭头函数中的上下文深入理解-实现一个调整箭头函数-this-绑定的函数" tabindex="-1">箭头函数中的上下文深入理解，实现一个调整箭头函数 this 绑定的函数 <a class="header-anchor" href="#箭头函数中的上下文深入理解-实现一个调整箭头函数-this-绑定的函数" aria-label="Permalink to &quot;箭头函数中的上下文深入理解，实现一个调整箭头函数 this 绑定的函数&quot;">​</a></h4><h4 id="作用域链是什么" tabindex="-1">作用域链是什么 <a class="header-anchor" href="#作用域链是什么" aria-label="Permalink to &quot;作用域链是什么&quot;">​</a></h4><h4 id="原型链是什么" tabindex="-1">原型链是什么 <a class="header-anchor" href="#原型链是什么" aria-label="Permalink to &quot;原型链是什么&quot;">​</a></h4><h4 id="如何实现继承-继承的几种方式对比" tabindex="-1">如何实现继承，继承的几种方式对比 <a class="header-anchor" href="#如何实现继承-继承的几种方式对比" aria-label="Permalink to &quot;如何实现继承，继承的几种方式对比&quot;">​</a></h4><h4 id="class-继承和原型继承的区别" tabindex="-1">class 继承和原型继承的区别 <a class="header-anchor" href="#class-继承和原型继承的区别" aria-label="Permalink to &quot;class 继承和原型继承的区别&quot;">​</a></h4><h4 id="几个原型相关的对象-api" tabindex="-1">几个原型相关的对象 API <a class="header-anchor" href="#几个原型相关的对象-api" aria-label="Permalink to &quot;几个原型相关的对象 API&quot;">​</a></h4><h4 id="原型中的属性代理如何实现的" tabindex="-1">原型中的属性代理如何实现的 <a class="header-anchor" href="#原型中的属性代理如何实现的" aria-label="Permalink to &quot;原型中的属性代理如何实现的&quot;">​</a></h4><h4 id="实现一个-instanceof-简单描述-typeof-和-object-prototype-tostring-call" tabindex="-1">实现一个 instanceof, 简单描述 typeof 和 Object.prototype.toString.call() <a class="header-anchor" href="#实现一个-instanceof-简单描述-typeof-和-object-prototype-tostring-call" aria-label="Permalink to &quot;实现一个 instanceof, 简单描述 typeof 和 Object.prototype.toString.call()&quot;">​</a></h4><h3 id="es6" tabindex="-1">es6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;es6&quot;">​</a></h3><h4 id="迭代器和可迭代对象" tabindex="-1">迭代器和可迭代对象 <a class="header-anchor" href="#迭代器和可迭代对象" aria-label="Permalink to &quot;迭代器和可迭代对象&quot;">​</a></h4><h4 id="reflect" tabindex="-1">Reflect <a class="header-anchor" href="#reflect" aria-label="Permalink to &quot;Reflect&quot;">​</a></h4><p>将原子操作函数化，比如 obj.a 改写成 Reflect.get(obj, &#39;a&#39;), delete obj.a Reflect.deleteProperty(obj, &#39;a&#39;)等</p><h4 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h4><p>代理对象</p><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h3><h4 id="几个有关原型的方法" tabindex="-1">几个有关原型的方法 <a class="header-anchor" href="#几个有关原型的方法" aria-label="Permalink to &quot;几个有关原型的方法&quot;">​</a></h4><h4 id="属性控制器" tabindex="-1">属性控制器 <a class="header-anchor" href="#属性控制器" aria-label="Permalink to &quot;属性控制器&quot;">​</a></h4><h4 id="可迭代对象的总结-如何快速转换成数组等。" tabindex="-1">可迭代对象的总结，如何快速转换成数组等。 <a class="header-anchor" href="#可迭代对象的总结-如何快速转换成数组等。" aria-label="Permalink to &quot;可迭代对象的总结，如何快速转换成数组等。&quot;">​</a></h4><h4 id="判断变量类型的的方法" tabindex="-1">判断变量类型的的方法 <a class="header-anchor" href="#判断变量类型的的方法" aria-label="Permalink to &quot;判断变量类型的的方法&quot;">​</a></h4><h3 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h3><h4 id="完整的描述一次-vue-的流程" tabindex="-1">完整的描述一次 vue 的流程 <a class="header-anchor" href="#完整的描述一次-vue-的流程" aria-label="Permalink to &quot;完整的描述一次 vue 的流程&quot;">​</a></h4><h4 id="watch、compouted-以及-watcher" tabindex="-1">watch、compouted，以及 watcher <a class="header-anchor" href="#watch、compouted-以及-watcher" aria-label="Permalink to &quot;watch、compouted，以及 watcher&quot;">​</a></h4><h4 id="响应式建立过程-两个-dep-的原理" tabindex="-1">响应式建立过程，两个 Dep 的原理 <a class="header-anchor" href="#响应式建立过程-两个-dep-的原理" aria-label="Permalink to &quot;响应式建立过程，两个 Dep 的原理&quot;">​</a></h4><h4 id="set-和-array-push-的原理" tabindex="-1">$set 和 array.push 的原理 <a class="header-anchor" href="#set-和-array-push-的原理" aria-label="Permalink to &quot;$set 和 array.push 的原理&quot;">​</a></h4><h4 id="keep-alive-原理" tabindex="-1">keep-alive 原理 <a class="header-anchor" href="#keep-alive-原理" aria-label="Permalink to &quot;keep-alive 原理&quot;">​</a></h4><h4 id="异步组件的原理" tabindex="-1">异步组件的原理 <a class="header-anchor" href="#异步组件的原理" aria-label="Permalink to &quot;异步组件的原理&quot;">​</a></h4><h4 id="手动派发更新的流程" tabindex="-1">手动派发更新的流程 <a class="header-anchor" href="#手动派发更新的流程" aria-label="Permalink to &quot;手动派发更新的流程&quot;">​</a></h4><h4 id="vue-对象如何转换成-vnode" tabindex="-1">vue 对象如何转换成 vnode <a class="header-anchor" href="#vue-对象如何转换成-vnode" aria-label="Permalink to &quot;vue 对象如何转换成 vnode&quot;">​</a></h4><h4 id="异步队列和-nexttick-原理" tabindex="-1">异步队列和 nexttick 原理 <a class="header-anchor" href="#异步队列和-nexttick-原理" aria-label="Permalink to &quot;异步队列和 nexttick 原理&quot;">​</a></h4><h4 id="数据请求在-created-和-mounted-的区别" tabindex="-1">数据请求在 created 和 mounted 的区别 <a class="header-anchor" href="#数据请求在-created-和-mounted-的区别" aria-label="Permalink to &quot;数据请求在 created 和 mounted 的区别&quot;">​</a></h4><h4 id="vue-prop-原理" tabindex="-1">vue prop 原理 <a class="header-anchor" href="#vue-prop-原理" aria-label="Permalink to &quot;vue prop 原理&quot;">​</a></h4><h4 id="vue-事件原理" tabindex="-1">vue 事件原理 <a class="header-anchor" href="#vue-事件原理" aria-label="Permalink to &quot;vue 事件原理&quot;">​</a></h4><h4 id="patch-全流程" tabindex="-1">patch 全流程 <a class="header-anchor" href="#patch-全流程" aria-label="Permalink to &quot;patch 全流程&quot;">​</a></h4><h4 id="diff" tabindex="-1">diff <a class="header-anchor" href="#diff" aria-label="Permalink to &quot;diff&quot;">​</a></h4><h3 id="typescript" tabindex="-1">typescript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;typescript&quot;">​</a></h3><h4 id="类型兼容、结构类型和层级类型" tabindex="-1">类型兼容、结构类型和层级类型 <a class="header-anchor" href="#类型兼容、结构类型和层级类型" aria-label="Permalink to &quot;类型兼容、结构类型和层级类型&quot;">​</a></h4><h4 id="ts-几个经典的体操类型" tabindex="-1">ts 几个经典的体操类型 <a class="header-anchor" href="#ts-几个经典的体操类型" aria-label="Permalink to &quot;ts 几个经典的体操类型&quot;">​</a></h4><h3 id="vue3" tabindex="-1">vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;vue3&quot;">​</a></h3><h3 id="json-schema" tabindex="-1">JSON SCHEMA <a class="header-anchor" href="#json-schema" aria-label="Permalink to &quot;JSON SCHEMA&quot;">​</a></h3><h4 id="json-schema-所有属性" tabindex="-1">json schema 所有属性 <a class="header-anchor" href="#json-schema-所有属性" aria-label="Permalink to &quot;json schema 所有属性&quot;">​</a></h4><h4 id="json-schema-解析流程" tabindex="-1">json schema 解析流程 <a class="header-anchor" href="#json-schema-解析流程" aria-label="Permalink to &quot;json schema 解析流程&quot;">​</a></h4><h4 id="组件编排设计" tabindex="-1">组件编排设计 <a class="header-anchor" href="#组件编排设计" aria-label="Permalink to &quot;组件编排设计&quot;">​</a></h4><h3 id="手写代码" tabindex="-1">手写代码 <a class="header-anchor" href="#手写代码" aria-label="Permalink to &quot;手写代码&quot;">​</a></h3><h4 id="call-apply-bind" tabindex="-1">call, apply, bind <a class="header-anchor" href="#call-apply-bind" aria-label="Permalink to &quot;call, apply, bind&quot;">​</a></h4><h4 id="实现-promise" tabindex="-1">实现 promise <a class="header-anchor" href="#实现-promise" aria-label="Permalink to &quot;实现 promise&quot;">​</a></h4><h4 id="实现-debounce-和-throlle" tabindex="-1">实现 debounce 和 throlle <a class="header-anchor" href="#实现-debounce-和-throlle" aria-label="Permalink to &quot;实现 debounce 和 throlle&quot;">​</a></h4><h4 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h4><h4 id="判断对象的类型-tostring-实现" tabindex="-1">判断对象的类型，toString 实现 <a class="header-anchor" href="#判断对象的类型-tostring-实现" aria-label="Permalink to &quot;判断对象的类型，toString 实现&quot;">​</a></h4><h4 id="快速排序和归并排序" tabindex="-1">快速排序和归并排序 <a class="header-anchor" href="#快速排序和归并排序" aria-label="Permalink to &quot;快速排序和归并排序&quot;">​</a></h4><h4 id="递归和迭代优化" tabindex="-1">递归和迭代优化 <a class="header-anchor" href="#递归和迭代优化" aria-label="Permalink to &quot;递归和迭代优化&quot;">​</a></h4><h4 id="实现一个发布订阅模式" tabindex="-1">实现一个发布订阅模式 <a class="header-anchor" href="#实现一个发布订阅模式" aria-label="Permalink to &quot;实现一个发布订阅模式&quot;">​</a></h4><h4 id="实现观察者模式" tabindex="-1">实现观察者模式 <a class="header-anchor" href="#实现观察者模式" aria-label="Permalink to &quot;实现观察者模式&quot;">​</a></h4><h4 id="实现责任链模式" tabindex="-1">实现责任链模式 <a class="header-anchor" href="#实现责任链模式" aria-label="Permalink to &quot;实现责任链模式&quot;">​</a></h4><h4 id="实现状态机模式" tabindex="-1">实现状态机模式 <a class="header-anchor" href="#实现状态机模式" aria-label="Permalink to &quot;实现状态机模式&quot;">​</a></h4><p>requestAnimationframe 的理解 css 中各种百分比 h5 中的 meta vue diff 算法口述 前端监控平台如何建设 samesite http2 webpack 执行流程 web 安全中的预警系统和拦截系统 js 沙箱如何实现，自行写一个 qiankun 原理了解 sort 函数强行记忆 二分法查找机器 new 和 bind 的实现 数组去重的方法，如何数组原地去重 移动端特有的事件 移动端三种适配方式深入了解 实现一个 px 转 rem 插件 z-index 的特性 小于 12px 的字体如何实现 js 内存回收算法 axios 封装要点</p>`,121)]))}const u=e(h,[["render",r]]);export{k as __pageData,u as default};
