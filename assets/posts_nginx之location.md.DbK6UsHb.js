import{_ as n,c as s,o as e,ah as t}from"./chunks/framework.BurO9VyR.js";const u=JSON.parse('{"title":"nginx之location","description":null,"frontmatter":{"title":"nginx之location","comments":true,"hide":false,"abbrlink":"e22c93eb","date":"2021-12-15T22:31:27.000Z","updated":"2021-12-15T22:31:27.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/nginx之location.md","filePath":"posts/nginx之location.md"}'),i={name:"posts/nginx之location.md"};function l(o,a,p,r,c,d){return e(),s("div",null,a[0]||(a[0]=[t(`<h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="windows-安装" tabindex="-1">windows 安装 <a class="header-anchor" href="#windows-安装" aria-label="Permalink to &quot;windows 安装&quot;">​</a></h3><p>windows 直接下载官方二进制包，添加到环境变量</p><h3 id="其他版本安装" tabindex="-1">其他版本安装 <a class="header-anchor" href="#其他版本安装" aria-label="Permalink to &quot;其他版本安装&quot;">​</a></h3><p>官网download下面有个平台的快捷安装方法</p><h3 id="docker-安装" tabindex="-1">docker 安装 <a class="header-anchor" href="#docker-安装" aria-label="Permalink to &quot;docker 安装&quot;">​</a></h3><p>需要注意的是配置转发的时候不是127.0.0.1（因为指向的是nginx容器本身）</p><h2 id="命令大全" tabindex="-1">命令大全 <a class="header-anchor" href="#命令大全" aria-label="Permalink to &quot;命令大全&quot;">​</a></h2><p>指定配置文件运行</p><blockquote><p>nginx -f xxx.conf</p></blockquote><p>检查配置</p><blockquote><p>nginx -t 检查配置文件<br> nginx -T 检查并输出配置文件</p></blockquote><p>重启、停止</p><blockquote><p>nginx -s restart<br> nginx -s stop</p></blockquote><p>systemctl 管理</p><blockquote><p>systemctl start nginx<br> systemctl stop nginx<br> systemctl restart nginx</p></blockquote><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h3><h4 id="server-name" tabindex="-1">server_name <a class="header-anchor" href="#server-name" aria-label="Permalink to &quot;server_name&quot;">​</a></h4><p>server_name 支持精准匹配、通配符，正则匹配（^）开头。</p><h3 id="location-语法" tabindex="-1">location 语法 <a class="header-anchor" href="#location-语法" aria-label="Permalink to &quot;location 语法&quot;">​</a></h3><p>location [= | ^~ | ~* | ~ ] xxx</p><ul><li>= 精准匹配优先级最高。</li><li>^~ 前缀匹配, 按照最长的前缀匹配，如果命中，则会阻止正则，但不会组织普通路径</li><li>~ 区分大小写的正则匹配，正则匹配只要命中就生效。</li><li>~* 不区分大小写的正则匹配</li><li>不加符号，表示前缀匹配, 采用最长匹配</li><li>/ 兜底匹配 按照 上述顺序匹配</li></ul><h3 id="案例分析" tabindex="-1">案例分析 <a class="header-anchor" href="#案例分析" aria-label="Permalink to &quot;案例分析&quot;">​</a></h3><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /test_1 {</span></span>
<span class="line"><span>    return 400;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>location ^~ /test {</span></span>
<span class="line"><span>    return 401;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如上如果path为/test_1，返回的是400，说明^~优先级并不比普通匹配高</p><p>例子2</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /test_1 {</span></span>
<span class="line"><span>    return 400;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>location ^~ /test {</span></span>
<span class="line"><span>    return 401;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>location ~ /test {</span></span>
<span class="line"><span>    return 402;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>会返回 402, 因为会先命中 400 ，然后不会阻止正则</p><h3 id="静态服务器root、alias" tabindex="-1">静态服务器root、alias <a class="header-anchor" href="#静态服务器root、alias" aria-label="Permalink to &quot;静态服务器root、alias&quot;">​</a></h3><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location /img/ {</span></span>
<span class="line"><span>    root some/path; # /img/image/1  =&gt; some/path/img/image/1 会将整个路径添加到 root 路径中</span></span>
<span class="line"><span>    index index.html index.htm;   =&gt; # /user/image/1  =&gt; some/path/user/image/1 或者1.html</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>localtion /img/ {</span></span>
<span class="line"><span>    alias some/path; # /img/image/1  =&gt; some/path/image/1 会舍弃命中部分，所以要求location 和alias上级目录一致，所以location一定是一个目录，一定需要在末尾添加 / </span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="proxy-pass-解析" tabindex="-1">proxy_pass 解析 <a class="header-anchor" href="#proxy-pass-解析" aria-label="Permalink to &quot;proxy_pass 解析&quot;">​</a></h3><p>目标地址后不带/，表示将请求的path拼接在target之后，如果带，表示将请求命中之外的拼接在target后</p>`,32)]))}const m=n(i,[["render",l]]);export{u as __pageData,m as default};
