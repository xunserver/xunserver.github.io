import{_ as i,c as s,o as l,ah as e}from"./chunks/framework.BurO9VyR.js";const c=JSON.parse('{"title":"数据库","description":null,"frontmatter":{"title":"数据库","comments":true,"hide":false,"abbrlink":"14ea6df7","date":"2023-05-29T21:07:03.000Z","updated":"2023-05-29T21:07:03.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/数据库.md","filePath":"posts/数据库.md"}'),t={name:"posts/数据库.md"};function n(p,a,h,d,r,o){return l(),s("div",null,a[0]||(a[0]=[e(`<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>入职了一家初创公司，记录一下数据库设计的思路</p><h4 id="自增主键还是-uuid" tabindex="-1">自增主键还是 uuid <a class="header-anchor" href="#自增主键还是-uuid" aria-label="Permalink to &quot;自增主键还是 uuid&quot;">​</a></h4><p>永远不用 uuid 作为主键，考虑使用自增的的 uuid</p><h4 id="主键-id-和业务-id" tabindex="-1">主键 id 和业务 ID <a class="header-anchor" href="#主键-id-和业务-id" aria-label="Permalink to &quot;主键 id 和业务 ID&quot;">​</a></h4><p>主键 id 用于表设计的 id，满足查询的性能。业务 ID 仅作为满足业务可以读， 比如用户 id 为 2123414，但是主键 id 为 1.</p><h4 id="数据库基础字段" tabindex="-1">数据库基础字段 <a class="header-anchor" href="#数据库基础字段" aria-label="Permalink to &quot;数据库基础字段&quot;">​</a></h4><p>每个数据表总是需要有如下字段</p><ol><li>id 表 id</li><li>创建时间（业务不感知，数据库自动）</li><li>更新时间（数据库自动）</li><li>创建人（路由级别注入器自动注入）</li><li>更新人（路由级别注入器自动注入）</li><li>数据状态（是否删除）</li><li>数据有效期</li></ol><div class="language-prisma vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">prisma</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">model</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="物理删除还是逻辑删除" tabindex="-1">物理删除还是逻辑删除 <a class="header-anchor" href="#物理删除还是逻辑删除" aria-label="Permalink to &quot;物理删除还是逻辑删除&quot;">​</a></h4><p>总是逻辑删除，不要担心那一点数据空间</p><h3 id="用户表" tabindex="-1">用户表 <a class="header-anchor" href="#用户表" aria-label="Permalink to &quot;用户表&quot;">​</a></h3><p>公司有很多第三方系统是接入 ldap 登录，用户表需要直接 ldap，接入 ldap 后用户密码需要和 ldap 共享。而且还有些自研的系统，有些第三方系统只支持 oauth 登录，有些系统只支持 sso 登录。需要设计一个大而全然后又简单的用户登录。又因为 ldap 的方式，设计角色时需要考虑层级的关系</p><div class="language-prisma vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">prisma</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">model</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">model</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://zq99299.github.io/mysql-tutorial/ali-new-retail/" target="_blank" rel="noreferrer">https://zq99299.github.io/mysql-tutorial/ali-new-retail/</a></p>`,16)]))}const u=i(t,[["render",n]]);export{c as __pageData,u as default};
