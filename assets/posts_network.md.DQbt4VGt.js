import{_ as s,c as i,o as e,ah as t}from"./chunks/framework.BurO9VyR.js";const c=JSON.parse('{"title":"network","description":null,"frontmatter":{"title":"network","comments":true,"hide":false,"abbrlink":"608487bc","date":"2022-01-27T05:55:20.000Z","updated":"2022-01-27T05:55:20.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/network.md","filePath":"posts/network.md"}'),h={name:"posts/network.md"};function n(l,a,r,p,o,k){return e(),i("div",null,a[0]||(a[0]=[t(`<h4 id="console-线" tabindex="-1">console 线 <a class="header-anchor" href="#console-线" aria-label="Permalink to &quot;console 线&quot;">​</a></h4><p>一头网线，一头usb线的线，通过串口控制设备 一般是9600 8 0 配置</p><h4 id="盒式设备、框式设备" tabindex="-1">盒式设备、框式设备 <a class="header-anchor" href="#盒式设备、框式设备" aria-label="Permalink to &quot;盒式设备、框式设备&quot;">​</a></h4><p>盒式设备高度按照u来分区，一般一排网口的是半U，两排是1U。框式设备是一整块机柜，包含电源主从，控制主从等。</p><h4 id="mgt端口" tabindex="-1">MGT端口 <a class="header-anchor" href="#mgt端口" aria-label="Permalink to &quot;MGT端口&quot;">​</a></h4><p>通过两头网线控制，笔记和管理端口同网段即可</p><h4 id="mini-console" tabindex="-1">mini-console <a class="header-anchor" href="#mini-console" aria-label="Permalink to &quot;mini-console&quot;">​</a></h4><p>一头usb，另一个mini-console接口，用于控制设备</p><h4 id="telnet和ssh" tabindex="-1">telnet和ssh <a class="header-anchor" href="#telnet和ssh" aria-label="Permalink to &quot;telnet和ssh&quot;">​</a></h4><p>通过应用层协议连接</p><h4 id="rs232" tabindex="-1">rs232 <a class="header-anchor" href="#rs232" aria-label="Permalink to &quot;rs232&quot;">​</a></h4><p>9针口，现在的都集成变成usb</p><h4 id="telnet、ssh-端口" tabindex="-1">telnet、ssh 端口 <a class="header-anchor" href="#telnet、ssh-端口" aria-label="Permalink to &quot;telnet、ssh 端口&quot;">​</a></h4><p>telnet 23 ssh 22</p><h4 id="iso-osi" tabindex="-1">ISO，OSI <a class="header-anchor" href="#iso-osi" aria-label="Permalink to &quot;ISO，OSI&quot;">​</a></h4><p>ISO 国际标准化组织<br> OSI 开放系统互联互通模型</p><h4 id="osi-7层模型介绍" tabindex="-1">OSI 7层模型介绍 <a class="header-anchor" href="#osi-7层模型介绍" aria-label="Permalink to &quot;OSI 7层模型介绍&quot;">​</a></h4><h5 id="物理层" tabindex="-1">物理层 <a class="header-anchor" href="#物理层" aria-label="Permalink to &quot;物理层&quot;">​</a></h5><p>物理层层面的0，1转换传输。以太帧</p><h5 id="链路层" tabindex="-1">链路层 <a class="header-anchor" href="#链路层" aria-label="Permalink to &quot;链路层&quot;">​</a></h5><p>物理上点到点的传输， Mac</p><h5 id="网络层" tabindex="-1">网络层 <a class="header-anchor" href="#网络层" aria-label="Permalink to &quot;网络层&quot;">​</a></h5><p>节点和节点的传输。IP</p><h5 id="传输层" tabindex="-1">传输层 <a class="header-anchor" href="#传输层" aria-label="Permalink to &quot;传输层&quot;">​</a></h5><p>端口到端口的传输</p><h4 id="命令行权限和用户权限" tabindex="-1">命令行权限和用户权限 <a class="header-anchor" href="#命令行权限和用户权限" aria-label="Permalink to &quot;命令行权限和用户权限&quot;">​</a></h4><p>命令权限有0-3级， 分别是观察级、监控级、配置级和管理级<br> 用户权限有0-15级 前面和命令行对应。每一级可以使用前面所有等级命令</p><h4 id="视图" tabindex="-1">视图 <a class="header-anchor" href="#视图" aria-label="Permalink to &quot;视图&quot;">​</a></h4><p>用户视图 &lt;host&gt; 默认登录上的视图</p><p>系统视图 [host] 用户视图输入system-view 后进入</p><p>命令视图 系统视图下输入命令的视图</p><h4 id="配置ip地址" tabindex="-1">配置ip地址 <a class="header-anchor" href="#配置ip地址" aria-label="Permalink to &quot;配置ip地址&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">system-view</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 系统视图</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ethernet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0/0/8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 接口视图</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> address</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.1.2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置ip</span></span></code></pre></div><h4 id="开启telnet-登录" tabindex="-1">开启telnet 登录 <a class="header-anchor" href="#开启telnet-登录" aria-label="Permalink to &quot;开启telnet 登录&quot;">​</a></h4><h5 id="_1-新建用户" tabindex="-1">1. 新建用户 <a class="header-anchor" href="#_1-新建用户" aria-label="Permalink to &quot;1. 新建用户&quot;">​</a></h5><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">system-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aaa</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 进入aa模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">local-user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cipher</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置用户名密码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">local-user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service-type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> telnet</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 指定用户登录模式</span></span></code></pre></div><h5 id="_2-分配vty" tabindex="-1">2. 分配vty <a class="header-anchor" href="#_2-分配vty" aria-label="Permalink to &quot;2. 分配vty&quot;">​</a></h5><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 需要指定用户登录的vty</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">system-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user-interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vty</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # vty配置模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> privil</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> level</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # vty 用户最大权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authentication-mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aaa</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置认证方式为aaa</span></span></code></pre></div><h5 id="网卡" tabindex="-1">网卡 <a class="header-anchor" href="#网卡" aria-label="Permalink to &quot;网卡&quot;">​</a></h5><p>CU: 控制单元<br> OB: 输出缓存<br> LC: 线路编码器<br> TX: 发射器</p><p>RX: 接收器<br> LD: 线路解码器<br> IB: 输入缓冲<br> CU从网络层获取到packet，在CU封装成frame帧，帧传递到OB，OB会按照帧的接受顺序排列成队列，依次传递到LC。LC把一个一个的帧编码成 0 1物理电平传递给TX, TX将物理的电平增加功率，发送出去双绞线。</p><p>同理，RX,LD,OB也相同。</p><p>交换机的网卡和主机网卡在CU处理方面不同，交换机接收到帧做泛洪，舍弃，点对点转发。主机网卡接收到帧后，会解开帧后转交给上层的网络层处理。</p><h5 id="mac地址" tabindex="-1">mac地址 <a class="header-anchor" href="#mac地址" aria-label="Permalink to &quot;mac地址&quot;">​</a></h5><p>MAC 地址有48位，区分为单播MAC（首字节末尾是0），组播MAC（首字节末尾是1），广播MAC（全是1，所以是一种特殊组播），网卡的MAC又称BIA地址，前24位是厂商向IEEE申请，后24位厂商自行分配。前24位是OUI地址。</p><h5 id="以太帧" tabindex="-1">以太帧 <a class="header-anchor" href="#以太帧" aria-label="Permalink to &quot;以太帧&quot;">​</a></h5><p>目前使用的以太帧有IEEE 802.3 和 Ethernet II 两种格式。Ethernet II格式简单使用广泛，IEEE 802.3用于某些特殊协议。</p><p>Ethernet II由以下组成，目的MAC，源MAC，2字节表示类型，载荷，和CRC校验和结尾。</p><h5 id="_2的次方速记" tabindex="-1">2的次方速记 <a class="header-anchor" href="#_2的次方速记" aria-label="Permalink to &quot;2的次方速记&quot;">​</a></h5><p>一个字节8位，两个16进制计数。<br> 2 ^ 8 = 65536;2 ^ 16 = 16777216</p><h5 id="帧的流转" tabindex="-1">帧的流转 <a class="header-anchor" href="#帧的流转" aria-label="Permalink to &quot;帧的流转&quot;">​</a></h5><p>帧在交换机端口中进入时，会查找MAC表中是否存在映射，不存在时执行泛洪，并保存将帧的源MAC和端口保存更新到MAC表中。MAC和端口是多对一的关系。主机MAC在接收到单播帧时，会检查BIA地址和目的MAC是否一致，如果不一致则会丢弃帧。接收到广播帧时，CU会传递到上层模块</p>`,52)]))}const u=s(h,[["render",n]]);export{c as __pageData,u as default};
