import{_ as i,c as a,o as t,ah as h}from"./chunks/framework.BurO9VyR.js";const g=JSON.parse('{"title":"面试基础篇（二）","description":null,"frontmatter":{"title":"面试基础篇（二）","comments":true,"abbrlink":"234b714a","date":"2019-10-08T11:11:46.000Z","updated":"2019-10-08T11:11:46.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/面试基础篇（二）.md","filePath":"posts/面试基础篇（二）.md"}'),l={name:"posts/面试基础篇（二）.md"};function n(e,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[h(`<h2 id="js-正在表达式高级用法记忆" tabindex="-1">js 正在表达式高级用法记忆 <a class="header-anchor" href="#js-正在表达式高级用法记忆" aria-label="Permalink to &quot;js 正在表达式高级用法记忆&quot;">​</a></h2><ol><li>非捕获 (?:x) x 参与匹配但是不参与捕获</li><li>断言 x(?=y) y 参与匹配， 但是不出现在匹配的子串中 /x(?=y)/.exec(&quot;xy&quot;)[0]=&quot;x&quot;, 和非捕获的差别是 /x(?=y)/.exec(&quot;xy&quot;)[0]=&quot;xy&quot;</li><li>x(?!y) 表示 x 后面不跟 y</li><li>(?&lt;=y)x x 前面是 y</li><li>(?&lt;!y)x x 前面是不是 y</li><li>正则默认是贪婪匹配，在数量词后? 表示非贪婪匹配</li><li>正则表达式事深度优先原则，先一路到底，再回溯。如果出现了回溯，会使性能大幅度影响，尽量少出现回溯，数量词尽量明确。大型子串匹配时很容易出现回溯。</li></ol><h2 id="正则回溯举例" tabindex="-1">正则回溯举例 <a class="header-anchor" href="#正则回溯举例" aria-label="Permalink to &quot;正则回溯举例&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{1,3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a220&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这种情况会出现一次回溯， \\d{1,3} 贪婪匹配, 220 ，然后再匹配0，不复活， 回溯成\\d{1,3} 匹配22</span></span></code></pre></div><h2 id="正则表达式-的理解" tabindex="-1">正则表达式 | 的理解 <a class="header-anchor" href="#正则表达式-的理解" aria-label="Permalink to &quot;正则表达式 | 的理解&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">99</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">55</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配的应该是 99 或者55 而不是 9(9|5)5</span></span></code></pre></div><h2 id="正则-exec-和-g-修饰符理解" tabindex="-1">正则 exec 和 g 修饰符理解 <a class="header-anchor" href="#正则-exec-和-g-修饰符理解" aria-label="Permalink to &quot;正则 exec 和 g 修饰符理解&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须是变量的方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// c</span></span></code></pre></div><h2 id="match-和-replace-中-g-修饰符" tabindex="-1">match 和 replace 中 g 修饰符 <a class="header-anchor" href="#match-和-replace-中-g-修饰符" aria-label="Permalink to &quot;match 和 replace 中 g 修饰符&quot;">​</a></h2><p>match(//g) 返回的是匹配的每个子串组成的数组，不加 g 同 exec<br> replace 同上， 但是使用字符串模式时， $\` $&#39; 需要注意</p>`,10)]))}const c=i(l,[["render",n]]);export{g as __pageData,c as default};
