import{_ as s,c as e,o as n,ah as t}from"./chunks/framework.BurO9VyR.js";const u=JSON.parse('{"title":"ngrok内网穿透","description":null,"frontmatter":{"title":"ngrok内网穿透","comments":true,"tags":["ngrok","内网穿透"],"categories":["linux"],"abbrlink":"64ba60b1","date":"2019-04-17T09:40:39.000Z","updated":"2019-04-17T09:40:39.000Z","description":null},"headers":[],"relativePath":"posts/ngrok内网穿透.md","filePath":"posts/ngrok内网穿透.md"}'),l={name:"posts/ngrok内网穿透.md"};function o(p,a,r,i,c,d){return n(),e("div",null,a[0]||(a[0]=[t(`<h2 id="下载安装" tabindex="-1">下载安装 <a class="header-anchor" href="#下载安装" aria-label="Permalink to &quot;下载安装&quot;">​</a></h2><p>github 搜索 <a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noreferrer">ngrok</a> star 最多的项目，clone 到本地，解压。</p><h2 id="证书配置" tabindex="-1">证书配置 <a class="header-anchor" href="#证书配置" aria-label="Permalink to &quot;证书配置&quot;">​</a></h2><p>证书配置，没有证书的使用自签名证书。有证书的跳过这一步</p><h3 id="自签名证书" tabindex="-1">自签名证书 <a class="header-anchor" href="#自签名证书" aria-label="Permalink to &quot;自签名证书&quot;">​</a></h3><p>使用openssl 生成证书，openssl安装 查看opnessl 学习笔记</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    // 生成自签名证书私钥 ca.key</span></span>
<span class="line"><span>    openssl genrsa -out ca.key 2048</span></span>
<span class="line"><span>    // 根据 ca.key 生成自签名的CA证书</span></span>
<span class="line"><span>    openssl req -x509 -new  -nodes -key ca.key -subj &quot;/CN=domain.name&quot; -days 5000 -out root.crt </span></span>
<span class="line"><span>    // 生成服务器私钥</span></span>
<span class="line"><span>    openssl genrsa -out server.key 2048</span></span>
<span class="line"><span>    // 生成服务器 csr</span></span>
<span class="line"><span>    openssl req -new -key server.key -subj &quot;/CN=domain.name&quot; -out server.csr</span></span>
<span class="line"><span>    // ca 颁发证书</span></span>
<span class="line"><span>    openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out  server.crt -days 5000</span></span></code></pre></div><h2 id="替换官方证书" tabindex="-1">替换官方证书 <a class="header-anchor" href="#替换官方证书" aria-label="Permalink to &quot;替换官方证书&quot;">​</a></h2><p>将官方证书替换掉, 官方的证书放在 assets/中, 具体替换下面3个</p><ul><li>替换ca ---------- assets/client/tls</li><li>替换服务器公钥 ----------- assets/server/tls</li><li>替换服务器证书 ------------ assets/server/tls</li></ul><h2 id="重新编译服务端和客户端" tabindex="-1">重新编译服务端和客户端 <a class="header-anchor" href="#重新编译服务端和客户端" aria-label="Permalink to &quot;重新编译服务端和客户端&quot;">​</a></h2><p>编译需要安装go语言环境<code>yum insatll golang</code>，<br> 设置不同系统环境变量编译</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GOOS=[windows | linux] GOARCH=[386 | amd64] make [release-server | release-client]</span></span></code></pre></div><h2 id="启动服务器端" tabindex="-1">启动服务器端 <a class="header-anchor" href="#启动服务器端" aria-label="Permalink to &quot;启动服务器端&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    /usr/local/ngrok/bin/ngrokd [-tlsKey=/usr/local/ngrok/assets/server/tls/snakeoil.key] [-tlsCrt=/usr/local/ngrok/assets/server/tls/snakeoil.crt]  -domain=xxx.xxxx.xx -httpAddr=:81 -httpsAddr=:4443 -tunnelAddr=:4445</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    // -tlsKey 和 -tlsCrt可选，表示使用自己的证书和 key，-damain 绑定的域名； http 和https 监听的端口； -tunnelAddr 客户端通信端口</span></span></code></pre></div><h2 id="启动客户端" tabindex="-1">启动客户端 <a class="header-anchor" href="#启动客户端" aria-label="Permalink to &quot;启动客户端&quot;">​</a></h2><p>根据平台下载对应的 ngrok程序 新建配置文件，添加如下内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    server_addr: &quot;xxx.xxxx.xxx:port&quot;  // port 为服务器 -tunnelAddr 端口值  </span></span>
<span class="line"><span>    trust_host_root_certs: false   // 如果是自签名证书，此项为false</span></span></code></pre></div><p>新建log文件，前期调试用 log.log<br> 启动客户端,具体配置可以通过 ngrok -h 查看</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    ngrok -config config.cfg -log log.log -subdomain subdomainname port</span></span>
<span class="line"><span>    // ngrok -config config.cfg -log log.log -subdomain ngrok 80</span></span></code></pre></div>`,20)]))}const g=s(l,[["render",o]]);export{u as __pageData,g as default};
