import{_ as e,c as t,o as n,ah as s}from"./chunks/framework.BurO9VyR.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/monorepo搭建.md","filePath":"posts/monorepo搭建.md"}'),o={name:"posts/monorepo搭建.md"};function i(l,a,r,p,h,c){return n(),t("div",null,a[0]||(a[0]=[s(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近整改公司项目，升级所有的项目依赖到最新，发现很多工具没法使用，而且monorepo项目弄得很臃肿，重新探讨一种方案来实现。</p><p>会从多个角度来整理包括vite、tsconfig、eslint、preitter、stylelint、tailwind来整理。同时整理common模块的打包</p><h2 id="项目结构规划" tabindex="-1">项目结构规划 <a class="header-anchor" href="#项目结构规划" aria-label="Permalink to &quot;项目结构规划&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>app</span></span>
<span class="line"><span>    app1</span></span>
<span class="line"><span>        package.json</span></span>
<span class="line"><span>    app2</span></span>
<span class="line"><span>        package.json</span></span>
<span class="line"><span>    app3</span></span>
<span class="line"><span>        package.json</span></span>
<span class="line"><span>    common</span></span>
<span class="line"><span>        components</span></span>
<span class="line"><span>        utils</span></span></code></pre></div><h2 id="vite-打包" tabindex="-1">vite 打包 <a class="header-anchor" href="#vite-打包" aria-label="Permalink to &quot;vite 打包&quot;">​</a></h2><h2 id="eslint" tabindex="-1">eslint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;eslint&quot;">​</a></h2><h3 id="命令行" tabindex="-1">命令行 <a class="header-anchor" href="#命令行" aria-label="Permalink to &quot;命令行&quot;">​</a></h3><p>默认当前执行目录中寻找配置文件、找不到往父级目录循环查找。</p><h3 id="vscode插件" tabindex="-1">vscode插件 <a class="header-anchor" href="#vscode插件" aria-label="Permalink to &quot;vscode插件&quot;">​</a></h3><p>对每个文件就近查找配置文件，如果能找到（不管配置文件是否忽略该文件）使用该配置文件。如果找不到依次向上查找</p><h3 id="monorepo中配置" tabindex="-1">monorepo中配置 <a class="header-anchor" href="#monorepo中配置" aria-label="Permalink to &quot;monorepo中配置&quot;">​</a></h3><p>如果全部项目都使用同一套规则，则配置在最外层，如果部分项目单独使用，单独配置即可。全局配置需要注意尽可能覆盖所有需要检查的文件。</p><h2 id="stylelint" tabindex="-1">stylelint <a class="header-anchor" href="#stylelint" aria-label="Permalink to &quot;stylelint&quot;">​</a></h2><h3 id="命令行-1" tabindex="-1">命令行 <a class="header-anchor" href="#命令行-1" aria-label="Permalink to &quot;命令行&quot;">​</a></h3><p><strong>npx stylelint &quot;</strong>/*.ts&quot;** glob 模式需要引号包裹。对每个文件会单独使用最近的配置文件</p><h3 id="vscode集成" tabindex="-1">vscode集成 <a class="header-anchor" href="#vscode集成" aria-label="Permalink to &quot;vscode集成&quot;">​</a></h3><p>对每个文件会单独使用最近的配置文件</p><h2 id="prettier" tabindex="-1">prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;prettier&quot;">​</a></h2><h3 id="命令行使用" tabindex="-1">命令行使用 <a class="header-anchor" href="#命令行使用" aria-label="Permalink to &quot;命令行使用&quot;">​</a></h3><p>npx prettier . --check 对每个文件会单独使用最近的配置文件</p><h3 id="vscode集成-1" tabindex="-1">vscode集成 <a class="header-anchor" href="#vscode集成-1" aria-label="Permalink to &quot;vscode集成&quot;">​</a></h3><p>会依次按照项目中.prettierrc editorConfig vscode-setting配置，配置查询规则同上。</p><h3 id="配合eslint" tabindex="-1">配合eslint <a class="header-anchor" href="#配合eslint" aria-label="Permalink to &quot;配合eslint&quot;">​</a></h3><p>使用eslint-config-prettier 并且关闭prettier/prettier</p><h3 id="配合stylelint" tabindex="-1">配合stylelint <a class="header-anchor" href="#配合stylelint" aria-label="Permalink to &quot;配合stylelint&quot;">​</a></h3><p>stylelint15之前 使用stylelint-config-prettier，v15之后不需要管，stylelint已经删除了所有与prettier冲突的选项。</p><h2 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;lint-staged&quot;">​</a></h2>`,28)]))}const m=e(o,[["render",i]]);export{u as __pageData,m as default};
