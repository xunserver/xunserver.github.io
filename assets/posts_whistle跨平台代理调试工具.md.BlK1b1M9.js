import{_ as a,c as i,o as e,ah as n}from"./chunks/framework.BurO9VyR.js";const c=JSON.parse('{"title":"whistle跨平台代理调试工具","description":null,"frontmatter":{"title":"whistle跨平台代理调试工具","comments":true,"hide":false,"abbrlink":"5258564a","date":"2021-11-22T17:14:22.000Z","updated":"2021-11-22T17:14:22.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/whistle跨平台代理调试工具.md","filePath":"posts/whistle跨平台代理调试工具.md"}'),t={name:"posts/whistle跨平台代理调试工具.md"};function l(h,s,p,r,d,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>whistle用于代理http,https,websocket请求，监听修改报文，实现调式功能。语法简单，对前端友好。</p><h3 id="安装和命令行" tabindex="-1">安装和命令行 <a class="header-anchor" href="#安装和命令行" aria-label="Permalink to &quot;安装和命令行&quot;">​</a></h3><p>通过npm全局安装</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> whistle</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 前台启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 后台启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 后台停止</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看帮助信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span></span></code></pre></div><p>其余请求参数</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h4 id="范式" tabindex="-1">范式 <a class="header-anchor" href="#范式" aria-label="Permalink to &quot;范式&quot;">​</a></h4><p>whistle所有的操作都是通过下面范式配置， 匹配模式 操作协议+操作值</p><pre><code>pattern       operatorURI
   |                |
请求url表达式    对应的操作：操作协议和操作值
</code></pre><h4 id="匹配模式" tabindex="-1">匹配模式 <a class="header-anchor" href="#匹配模式" aria-label="Permalink to &quot;匹配模式&quot;">​</a></h4><p>匹配模式分为域名、路径、正则、精准匹配和，通配符匹配</p><h5 id="域名匹配" tabindex="-1">域名匹配 <a class="header-anchor" href="#域名匹配" aria-label="Permalink to &quot;域名匹配&quot;">​</a></h5><p>通过域名、协议和端口号进行匹配，会匹配命中的所有请求</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不区分协议</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">www.baidu.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 区分协议， 注意尾部添加/ 不是域名匹配</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https://www.baidu.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 带端口的形式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">www.baiu.com:9000</span></span></code></pre></div><h5 id="路径匹配" tabindex="-1">路径匹配 <a class="header-anchor" href="#路径匹配" aria-label="Permalink to &quot;路径匹配&quot;">​</a></h5><p>匹配uri路径及其子路径，uri是由域名和路径组成</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">www.baidu.com/xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 匹配 www.baidu.com/xxx 以及 www.baidu.com/xxx/xxx1/xxxx.index.html, 但是不匹配 www.baidu.com/xxx1</span></span></code></pre></div><p>如果想实现任何域名的路径匹配，使用通配符模式 **/xxx</p><h5 id="正则匹配" tabindex="-1">正则匹配 <a class="header-anchor" href="#正则匹配" aria-label="Permalink to &quot;正则匹配&quot;">​</a></h5><p>支持子匹配，i模式，不支持g模式。子匹配可用在operatorURI中,同时支持非匹配 <code>!/xxx/</code></p><h5 id="精准匹配" tabindex="-1">精准匹配 <a class="header-anchor" href="#精准匹配" aria-label="Permalink to &quot;精准匹配&quot;">​</a></h5><p>在路径匹配前添加$，同时支持非匹配， 表示不精准匹配某条。<code>!\\$uri</code></p><h5 id="通配符匹配" tabindex="-1">通配符匹配 <a class="header-anchor" href="#通配符匹配" aria-label="Permalink to &quot;通配符匹配&quot;">​</a></h5><p>使用<code>^</code>开始，可选的<code>$</code>作为结尾</p><ul><li>*.com 匹配 xx.com 但是不能匹配 a.xx.com</li><li>**.com 可以匹配 a.xx.com</li><li>*/xx 可以匹配</li></ul>`,26)]))}const u=a(t,[["render",l]]);export{c as __pageData,u as default};
