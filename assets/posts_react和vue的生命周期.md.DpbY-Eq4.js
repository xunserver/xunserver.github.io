import{_ as t,c as a,o as l,ah as o}from"./chunks/framework.BurO9VyR.js";const _=JSON.parse('{"title":"react和vue的生命周期","description":null,"frontmatter":{"title":"react和vue的生命周期","comments":true,"hide":false,"abbrlink":"27ee65e3","date":"2020-04-02T17:33:50.000Z","updated":"2020-04-02T17:33:50.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/react和vue的生命周期.md","filePath":"posts/react和vue的生命周期.md"}'),r={name:"posts/react和vue的生命周期.md"};function i(n,e,d,s,p,c){return l(),a("div",null,e[0]||(e[0]=[o('<h2 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h2><ol><li>beforeCreate （ &lt;=初始化事件和生命周期）</li><li>created （&lt;= prop 注入完成）</li><li>beforeMount 编译 template 模板或者 render， 并收集依赖</li><li>mouted （挂载到 dom 上面）</li><li>beforeUpdate =&gt; 不能在里面更新 data =&gt; 开始 diff render</li><li>beforeDestory =&gt; 解除绑定，解除事件，销毁子组件。</li><li>destoryed =&gt; 删除完回调</li></ol><h2 id="react" tabindex="-1">react <a class="header-anchor" href="#react" aria-label="Permalink to &quot;react&quot;">​</a></h2><h3 id="初始化阶段" tabindex="-1">初始化阶段 <a class="header-anchor" href="#初始化阶段" aria-label="Permalink to &quot;初始化阶段&quot;">​</a></h3><ol><li>defaultProp =&gt; prop</li><li>initState</li><li>componentWillMount</li><li>render</li><li>componentDidMount</li></ol><h3 id="运行阶段" tabindex="-1">运行阶段 <a class="header-anchor" href="#运行阶段" aria-label="Permalink to &quot;运行阶段&quot;">​</a></h3><p>react 的变化需要自己手动更新，包括 props 和 state 的变化</p><ol><li>props 变化通过 componentWillReceiveProps 获得，</li><li>state 的变化通过 setState 方法来实现</li></ol><p>均会触发 shouldComponentUpdate 钩子，如果钩子返回 false 表示不更新。<br> 然后会触发 componentWillUpdate 构造<br> 重新调用 render 函数， 渲染界面<br> 触发 componentDidUpdate 钩子，</p><p>销毁钩子 componentWillUnmount</p>',10)]))}const m=t(r,[["render",i]]);export{_ as __pageData,m as default};
