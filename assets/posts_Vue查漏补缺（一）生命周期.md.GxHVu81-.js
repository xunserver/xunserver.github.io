import{_ as a,c as s,o as e,ah as t}from"./chunks/framework.BurO9VyR.js";const c=JSON.parse('{"title":"Vue查漏补缺（一）生命周期","description":null,"frontmatter":{"title":"Vue查漏补缺（一）生命周期","comments":true,"hide":false,"abbrlink":"69b5cd9a","date":"2022-03-24T08:03:10.000Z","updated":"2022-03-24T08:03:10.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/Vue查漏补缺（一）生命周期.md","filePath":"posts/Vue查漏补缺（一）生命周期.md"}'),l={name:"posts/Vue查漏补缺（一）生命周期.md"};function n(h,i,o,r,p,d){return e(),s("div",null,i[0]||(i[0]=[t(`<h3 id="生命周期解释" tabindex="-1">生命周期解释 <a class="header-anchor" href="#生命周期解释" aria-label="Permalink to &quot;生命周期解释&quot;">​</a></h3><p>生命周期函数是一个hook，类似于好莱坞的设计模式，hook是同步调用，在Vue执行的各个时间点被调用，能获取到对应时间点VM的状态</p><h3 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h3><ol><li>赋值_self, vm=this</li><li>合并extend和mixin选型</li><li>初始化proxy拦截器</li><li>初始化h函数</li><li>初始化组件上的事件监听器</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    initMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合并extend和mixin选项</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    stateMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化$set $watch $delete $get方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eventMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化 $on $once $emit $forceupdate等方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lifecycleMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化声明周期hook</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    renderMixin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化渲染函数h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="beforecreate" tabindex="-1">beforeCreate <a class="header-anchor" href="#beforecreate" aria-label="Permalink to &quot;beforeCreate&quot;">​</a></h3><ol><li>injection</li><li>prop（options.propsData），解析父组件传入的初始值，建立响应式</li><li>method</li><li>data (使用observe 建立响应式)</li><li>computed</li><li>watch</li><li>provider</li></ol><h3 id="created" tabindex="-1">created <a class="header-anchor" href="#created" aria-label="Permalink to &quot;created&quot;">​</a></h3><ol><li>编辑模板生成render函数</li><li>vm.$el 赋值（但是还未替换dom）</li></ol><h3 id="beforemount" tabindex="-1">beforeMount <a class="header-anchor" href="#beforemount" aria-label="Permalink to &quot;beforeMount&quot;">​</a></h3><ol><li><p>执行render函数，生成vnode(这儿有个点，如果是组件是有el选项的，执行$mount,如果是其他的组件的子组件，会在组件的child = componentInstanceForVnode(), child.$mount()执行挂载)</p></li><li><p>根据vnode创建子组件</p></li><li><p>挂载vnode到dom中</p></li></ol><h3 id="mounted" tabindex="-1">mounted <a class="header-anchor" href="#mounted" aria-label="Permalink to &quot;mounted&quot;">​</a></h3>`,12)]))}const u=a(l,[["render",n]]);export{c as __pageData,u as default};
