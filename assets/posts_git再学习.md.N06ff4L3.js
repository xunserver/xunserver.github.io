import{_ as i,c as s,o as t,ah as e}from"./chunks/framework.BurO9VyR.js";const k=JSON.parse('{"title":"git再学习","description":null,"frontmatter":{"title":"git再学习","comments":true,"hide":false,"abbrlink":"141454d6","date":"2021-11-15T17:39:46.000Z","updated":"2021-11-15T17:39:46.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/git再学习.md","filePath":"posts/git再学习.md"}'),l={name:"posts/git再学习.md"};function n(h,a,p,r,o,c){return t(),s("div",null,a[0]||(a[0]=[e(`<h3 id="经验技巧原则记录" tabindex="-1">经验技巧原则记录 <a class="header-anchor" href="#经验技巧原则记录" aria-label="Permalink to &quot;经验技巧原则记录&quot;">​</a></h3><ul><li>未推送的内容使用reset回退，已推送的内容使用revert回退</li><li>谨慎使用rebase，建议仅作为本地内容commit的合并</li><li>使用对commit --amend 对上一次commit信息进行修改，可以把当前暂存区的合并到修改中</li></ul><p>下面文件是常用的git 配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[user]</span></span>
<span class="line"><span>	name = yangjiaxun</span></span>
<span class="line"><span>	email = yangjiaxun@longfor.com</span></span>
<span class="line"><span>[alias]</span></span>
<span class="line"><span>	lg = log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative</span></span></code></pre></div><h3 id="gitlab-分支管理流程" tabindex="-1">gitlab 分支管理流程 <a class="header-anchor" href="#gitlab-分支管理流程" aria-label="Permalink to &quot;gitlab 分支管理流程&quot;">​</a></h3><h3 id="commit理解" tabindex="-1">commit理解 <a class="header-anchor" href="#commit理解" aria-label="Permalink to &quot;commit理解&quot;">​</a></h3><p>git 是由commit组成，commit 记录git每次操作，包括</p><ul><li>commitid（sha-1）</li><li>Author,</li><li>commiter,</li><li>Parent(父commit)，</li><li>child(多个下游commit),</li><li>Branches 当前被哪些分支引用</li></ul><p>每次commit操作会在当前commit上，添加一个下游commit，同时挪动相关引用。</p><h3 id="branch-理解" tabindex="-1">branch 理解 <a class="header-anchor" href="#branch-理解" aria-label="Permalink to &quot;branch 理解&quot;">​</a></h3><p>commit用commit标记，同时可以取一个别名，这个别名就是branch，branch指向某个commit。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span></code></pre></div><p>如果当前工作区是branch，commit时会挪动branch和HEAD到最新commit，如果当前是在commit上，只会挪动HEAD到最新commit</p><h3 id="head" tabindex="-1">HEAD <a class="header-anchor" href="#head" aria-label="Permalink to &quot;HEAD&quot;">​</a></h3><p>当前引用，始终指向当前工作区所在commit，可以用checkout来挪动。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将当前HEAD 挪动到develop 所指的commit上，并切换工作区</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到349d1ddf的commit上，HEAD -&gt; 349d1ddf, 并切换工作区</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 349d1ddf</span></span></code></pre></div><h3 id="merge" tabindex="-1">merge <a class="header-anchor" href="#merge" aria-label="Permalink to &quot;merge&quot;">​</a></h3><p>分为两种情况，快速合并和新建合并</p><ul><li>快速合并是指要合并过来的分支commit树包含当前分支commit信息，这个时候直接挪动当前分支到要合并的分支</li><li>如果不包含，会自动在当前分支新建一个commit。这个commit包含两个分支的diff 信息，然后挪动当前分支到自动创建的commit。</li></ul><h3 id="reset" tabindex="-1">reset <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;reset&quot;">​</a></h3><p>将分支和HEAD挪动位置</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 挪动当前分支到HEAD所在commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 挪动当前分支到HEAD父commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 挪动当前分支到3次父commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD~3</span></span></code></pre></div><ul><li>--soft 将差异内容保存到暂存区</li><li>--hard 清空当前工作区和暂存区内容</li><li>不加参数，将差异保存在工作区</li></ul><p>也可以对文件进行操作，删除暂存区内容</p><h3 id="checkout" tabindex="-1">checkout <a class="header-anchor" href="#checkout" aria-label="Permalink to &quot;checkout&quot;">​</a></h3><p>针对文件时，是操作工作区内容和版本区一致</p><h3 id="工作区、暂存区和版本区" tabindex="-1">工作区、暂存区和版本区 <a class="header-anchor" href="#工作区、暂存区和版本区" aria-label="Permalink to &quot;工作区、暂存区和版本区&quot;">​</a></h3><ul><li>工作区 -&gt;当前文件系统所拥有的状态</li><li>暂存区 -&gt;add后添加到到内容</li><li>版本区 -&gt;commit后的区域 指针都指向版本区</li></ul><h3 id="pull和push" tabindex="-1">pull和push <a class="header-anchor" href="#pull和push" aria-label="Permalink to &quot;pull和push&quot;">​</a></h3>`,29)]))}const m=i(l,[["render",n]]);export{k as __pageData,m as default};
