import{_ as i,c as a,o as n,ah as h}from"./chunks/framework.BurO9VyR.js";const E=JSON.parse('{"title":"js编码规范","description":null,"frontmatter":{"title":"js编码规范","comments":true,"hide":false,"abbrlink":"e960579a","date":"2021-08-13T17:29:12.000Z","updated":"2021-08-13T17:29:12.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/js编码规范.md","filePath":"posts/js编码规范.md"}'),t={name:"posts/js编码规范.md"};function l(e,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="javascript-编码规范" tabindex="-1">Javascript 编码规范 <a class="header-anchor" href="#javascript-编码规范" aria-label="Permalink to &quot;Javascript 编码规范&quot;">​</a></h1><p>[TOC]</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h2><ul><li>原则: 必须坚持的指导思想</li><li>建议: 需要加以考虑的约定</li><li>不好示例: 反面教材，里面的都是错误示范</li><li>推荐示例: 正面教程，可以按照里面示例类推</li></ul><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><h3 id="文件" tabindex="-1">文件 <a class="header-anchor" href="#文件" aria-label="Permalink to &quot;文件&quot;">​</a></h3><h4 id="建议-不使用index文件实现逻辑-index用于聚合导出。" tabindex="-1">建议: 不使用index文件实现逻辑，index用于聚合导出。 <a class="header-anchor" href="#建议-不使用index文件实现逻辑-index用于聚合导出。" aria-label="Permalink to &quot;建议: 不使用index文件实现逻辑，index用于聚合导出。&quot;">​</a></h4><p>避免<code>componentA/index.js</code>，然后在index.js 写component的逻辑，正确的写法是 <code>componentA/componentA.js</code>。 <code>componentA/index.js</code> 仅作导出。当你在浏览器resource查找文件就知道了-__-。</p><h3 id="命名原则" tabindex="-1">命名原则 <a class="header-anchor" href="#命名原则" aria-label="Permalink to &quot;命名原则&quot;">​</a></h3><h4 id="原则-源文件编码格式-包括注释-必须是utf-8" tabindex="-1">原则: 源文件编码格式（包括注释）必须是UTF-8 <a class="header-anchor" href="#原则-源文件编码格式-包括注释-必须是utf-8" aria-label="Permalink to &quot;原则: 源文件编码格式（包括注释）必须是UTF-8&quot;">​</a></h4><p>大家一定被乱码的解释折磨过....</p><h4 id="原则-方法、变量需要一个好名字" tabindex="-1">原则: 方法、变量需要一个好名字 <a class="header-anchor" href="#原则-方法、变量需要一个好名字" aria-label="Permalink to &quot;原则: 方法、变量需要一个好名字&quot;">​</a></h4><p>好的名字有包括不局限以下特征:</p><ol><li>清晰表达意图：使用有描述性的型单词，避免使用单个字母，或者自创缩写来表达，比如 let lastDay 比 let ld 要好</li><li>必须使用英文单词，不允许出现中文拼音（约定熟成除外）。中文拼音在多音字表现上会有歧义，而且不太利于团队以后成成长</li><li>避免误导性命名，有误导的命名比表达不清晰还要危险，比如 let nameArray 不是一个array类型，而是一个字符串。</li><li>能区分出意思，建议不要在变量后面加上data，info，object等一般意思的词。比如productInfo和productData有什么区别。</li></ol><h3 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h3><h4 id="原则-构造函数、类命名都是用大驼峰" tabindex="-1">原则: 构造函数、类命名都是用大驼峰 <a class="header-anchor" href="#原则-构造函数、类命名都是用大驼峰" aria-label="Permalink to &quot;原则: 构造函数、类命名都是用大驼峰&quot;">​</a></h4><p>推荐示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p>不好示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> people</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><h4 id="原则-方法命名使用动词、动宾结构-并遵守驼峰原则" tabindex="-1">原则: 方法命名使用动词、动宾结构，并遵守驼峰原则 <a class="header-anchor" href="#原则-方法命名使用动词、动宾结构-并遵守驼峰原则" aria-label="Permalink to &quot;原则: 方法命名使用动词、动宾结构，并遵守驼峰原则&quot;">​</a></h4><p>格式如下</p><ol><li>get + 非布尔属性名</li><li>is + 布尔属性名</li><li>set + 属性名</li><li>has + 名字\\形容词</li><li>动词</li><li>动词 + 宾语 不好的示例</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Finished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DRAW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> keyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p>推荐示例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setVisible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addKeyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><h4 id="原则-方法名不能过长影响可读性" tabindex="-1">原则: 方法名不能过长影响可读性 <a class="header-anchor" href="#原则-方法名不能过长影响可读性" aria-label="Permalink to &quot;原则: 方法名不能过长影响可读性&quot;">​</a></h4><p>方法名不能超过15个字符，可以采用去掉元音字符或者业界约定的缩写来表示。 比如 <code>function getCustomerInfomation() {}</code> 可以改成 <code>function getCustomerInfo() {}</code></p><h4 id="建议-私有属性或者方法-建议以下划线-开头" tabindex="-1">建议: 私有属性或者方法， 建议以下划线_开头 <a class="header-anchor" href="#建议-私有属性或者方法-建议以下划线-开头" aria-label="Permalink to &quot;建议: 私有属性或者方法， 建议以下划线_开头&quot;">​</a></h4><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><h4 id="原则-变量名遵循驼峰风格-首字母大写-后续每个单词小写" tabindex="-1">原则: 变量名遵循驼峰风格, 首字母大写，后续每个单词小写 <a class="header-anchor" href="#原则-变量名遵循驼峰风格-首字母大写-后续每个单词小写" aria-label="Permalink to &quot;原则: 变量名遵循驼峰风格, 首字母大写，后续每个单词小写&quot;">​</a></h4><h4 id="建议-避免使用否定的布尔变量名" tabindex="-1">建议: 避免使用否定的布尔变量名 <a class="header-anchor" href="#建议-避免使用否定的布尔变量名" aria-label="Permalink to &quot;建议: 避免使用否定的布尔变量名&quot;">​</a></h4><p>对于否定的布尔变量名，当使用逻辑非运算符时，会出现双重否定，对阅读造成阻碍，比如<code>!isNotError</code>。</p><p>不好示例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isNotError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 到底有没有错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inNotFinished</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结束没有</span></span></code></pre></div><p>推荐示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inNotFinished</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="建议-缩写词应该全部大写或者小写-不要混搭。" tabindex="-1">建议: 缩写词应该全部大写或者小写，不要混搭。 <a class="header-anchor" href="#建议-缩写词应该全部大写或者小写-不要混搭。" aria-label="Permalink to &quot;建议: 缩写词应该全部大写或者小写，不要混搭。&quot;">​</a></h4><h4 id="原则-不要用保留字作为键名或者变量名-使用同义词。" tabindex="-1">原则: 不要用保留字作为键名或者变量名，使用同义词。 <a class="header-anchor" href="#原则-不要用保留字作为键名或者变量名-使用同义词。" aria-label="Permalink to &quot;原则: 不要用保留字作为键名或者变量名，使用同义词。&quot;">​</a></h4><p>为了兼容未来，虽然在语法上使用保留字作为键名是可以允许的。可以这样改<code>class =&gt; klass</code>， <code>default =&gt; defaults</code>，<code>private =&gt; hidden</code></p><h4 id="原则-常量使用全部大写并且用下划线-分隔" tabindex="-1">原则: 常量使用全部大写并且用下划线_分隔 <a class="header-anchor" href="#原则-常量使用全部大写并且用下划线-分隔" aria-label="Permalink to &quot;原则: 常量使用全部大写并且用下划线_分隔&quot;">​</a></h4><ol><li>不要魔鬼数字，比如错误码 <code>response.code === &quot;0000&quot; || response.code === 5</code>, 这种代码，不熟悉的人需要花时间去理解 <code>5</code> 是什么，<code>&quot;0000&quot;</code> 又是什么。</li><li>不要魔鬼常量，比如<code>const NUM_FOUR = 4</code>这种脱了裤子放屁行为; 推荐示例</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SUCCESS_CODE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SUCCESS_CODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MAX_GOODS_NUM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><h3 id="注释原则" tabindex="-1">注释原则 <a class="header-anchor" href="#注释原则" aria-label="Permalink to &quot;注释原则&quot;">​</a></h3><h4 id="最好的注释就是没有注释" tabindex="-1">最好的注释就是没有注释 <a class="header-anchor" href="#最好的注释就是没有注释" aria-label="Permalink to &quot;最好的注释就是没有注释&quot;">​</a></h4><p>注释的作用是解释代码。如果变量命令足够清晰，代码结构好就不需要注释。举个例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 大于65岁并且是职工，或者性别是女可以领福利</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((person.flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>别人审阅读代码时需要看注释才能知道if语句中含义。可以换成如下写法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isBenefits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>直接通过阅读代码就可以理解到意思，如果需要深读判断逻辑，同时隔离的函数也方便阅读。</p><h4 id="原则-注释的作用是帮助理解代码-而不是误解代码" tabindex="-1">原则: 注释的作用是帮助理解代码，而不是误解代码 <a class="header-anchor" href="#原则-注释的作用是帮助理解代码-而不是误解代码" aria-label="Permalink to &quot;原则: 注释的作用是帮助理解代码，而不是误解代码&quot;">​</a></h4><p>无用的注释，过期的注释及时清理掉。如果一个注释和代码实现不一致，那么enummmm....。</p><h4 id="原则-不要出现todo代码-todo代码自己在个人备忘录记录。" tabindex="-1">原则: 不要出现todo代码，todo代码自己在个人备忘录记录。 <a class="header-anchor" href="#原则-不要出现todo代码-todo代码自己在个人备忘录记录。" aria-label="Permalink to &quot;原则: 不要出现todo代码，todo代码自己在个人备忘录记录。&quot;">​</a></h4><p>大家习惯把部分代码标记上todo，然后推到公共分支。如果某一天你不接手这个项目了，后面的人看到你写的todo，他到底需不要todo，这是个问题。</p><h4 id="建议-不要临时注释屏蔽代码-直接删除。" tabindex="-1">建议: 不要临时注释屏蔽代码，直接删除。 <a class="header-anchor" href="#建议-不要临时注释屏蔽代码-直接删除。" aria-label="Permalink to &quot;建议: 不要临时注释屏蔽代码，直接删除。&quot;">​</a></h4><p>临时注释屏蔽部分代码是大部分人常见的操作，可以直接删除。如果后续需要找回，git来帮忙。否则后面的人接手一看，这个代码屏蔽注释了，不知道啥原因，不敢动，久而久之，x山。</p><h4 id="原则-不要用注释记录文件修改信息" tabindex="-1">原则: 不要用注释记录文件修改信息 <a class="header-anchor" href="#原则-不要用注释记录文件修改信息" aria-label="Permalink to &quot;原则: 不要用注释记录文件修改信息&quot;">​</a></h4><p>都用git了， 不要在文件开头去记录xxx多久修改了啥。git信息里面都有。</p><h3 id="注释风格" tabindex="-1">注释风格 <a class="header-anchor" href="#注释风格" aria-label="Permalink to &quot;注释风格&quot;">​</a></h3><h4 id="原则-单行注释使用-多行注释-文件注释用" tabindex="-1">原则: 单行注释使用 //, 多行注释 /** */, 文件注释用 /* */ <a class="header-anchor" href="#原则-单行注释使用-多行注释-文件注释用" aria-label="Permalink to &quot;原则: 单行注释使用 //, 多行注释 /\\*\\* \\*/, 文件注释用 /* \\*/&quot;">​</a></h4><p>推荐大家使用jsDoc风格的注释规范</p><h4 id="原则-注释和描述的代码相邻-放在代码上方-并且和代码的缩进一致。" tabindex="-1">原则: 注释和描述的代码相邻，放在代码上方，并且和代码的缩进一致。 <a class="header-anchor" href="#原则-注释和描述的代码相邻-放在代码上方-并且和代码的缩进一致。" aria-label="Permalink to &quot;原则: 注释和描述的代码相邻，放在代码上方，并且和代码的缩进一致。&quot;">​</a></h4><h4 id="原则-注释要和上方的代码块有间隔-间隔一行。-后空两格。" tabindex="-1">原则: 注释要和上方的代码块有间隔，间隔一行。 // 后空两格。 <a class="header-anchor" href="#原则-注释要和上方的代码块有间隔-间隔一行。-后空两格。" aria-label="Permalink to &quot;原则: 注释要和上方的代码块有间隔，间隔一行。 // 后空两格。&quot;">​</a></h4><h2 id="排版" tabindex="-1">排版 <a class="header-anchor" href="#排版" aria-label="Permalink to &quot;排版&quot;">​</a></h2><h3 id="风格" tabindex="-1">风格 <a class="header-anchor" href="#风格" aria-label="Permalink to &quot;风格&quot;">​</a></h3><p>排版可以从下面的维度出发，给出每个维度的建议项和原由，各团队可以自行商议。</p><h4 id="建议-团队内风格应该保持一致-大家商量-抛弃个人喜好" tabindex="-1">建议: 团队内风格应该保持一致，大家商量，抛弃个人喜好 <a class="header-anchor" href="#建议-团队内风格应该保持一致-大家商量-抛弃个人喜好" aria-label="Permalink to &quot;建议: 团队内风格应该保持一致，大家商量，抛弃个人喜好&quot;">​</a></h4><h4 id="建议-团队内将风格固化到ide中-通过eslint-stylelint-editorconfig等来保证一致性。" tabindex="-1">建议: 团队内将风格固化到IDE中，通过eslint，stylelint, editorConfig等来保证一致性。 <a class="header-anchor" href="#建议-团队内将风格固化到ide中-通过eslint-stylelint-editorconfig等来保证一致性。" aria-label="Permalink to &quot;建议: 团队内将风格固化到IDE中，通过eslint，stylelint, editorConfig等来保证一致性。&quot;">​</a></h4><h3 id="缩进" tabindex="-1">缩进 <a class="header-anchor" href="#缩进" aria-label="Permalink to &quot;缩进&quot;">​</a></h3><h4 id="原则-禁止使用制表符作为缩进" tabindex="-1">原则: 禁止使用制表符作为缩进 <a class="header-anchor" href="#原则-禁止使用制表符作为缩进" aria-label="Permalink to &quot;原则: 禁止使用制表符作为缩进&quot;">​</a></h4><p>制表符在不同IDE或者代码阅读器上面表现的风格不一致，有可能产生对齐错乱的问题。空格在不会有这样的问题。我们在开发中常使用tab键实现缩进，需要把tab设置为缩进空格。</p><h4 id="建议-缩进使用2个空格缩进。" tabindex="-1">建议: 缩进使用2个空格缩进。 <a class="header-anchor" href="#建议-缩进使用2个空格缩进。" aria-label="Permalink to &quot;建议: 缩进使用2个空格缩进。&quot;">​</a></h4><p>缩进过大，在嵌套过深的情况，需要拖动横向滚动条条才能阅读代码，不方便阅读。</p><h3 id="换行" tabindex="-1">换行 <a class="header-anchor" href="#换行" aria-label="Permalink to &quot;换行&quot;">​</a></h3><h4 id="建议-超长代码需要换行-换行时操作符放在前面" tabindex="-1">建议: 超长代码需要换行，换行时操作符放在前面 <a class="header-anchor" href="#建议-超长代码需要换行-换行时操作符放在前面" aria-label="Permalink to &quot;建议: 超长代码需要换行，换行时操作符放在前面&quot;">​</a></h4><p>推荐示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> resultA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxx </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> resultB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxxxxxxxxxxxA</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxxxxxxxxxB</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxxxxxxxxxC</span></span></code></pre></div><h4 id="建议-函数参数尽量在同一行-对于超长的场景每个参数独占一行。" tabindex="-1">建议: 函数参数尽量在同一行，对于超长的场景每个参数独占一行。 <a class="header-anchor" href="#建议-函数参数尽量在同一行-对于超长的场景每个参数独占一行。" aria-label="Permalink to &quot;建议: 函数参数尽量在同一行，对于超长的场景每个参数独占一行。&quot;">​</a></h4><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someLongerFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    xxxxxxxxxxA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    xxxxxxxxxxB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    xxxxxxxxxxC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    xxxxxxxxxxD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span></code></pre></div><h4 id="建议-对象字面量超过4个-都应该换行" tabindex="-1">建议: 对象字面量超过4个，都应该换行 <a class="header-anchor" href="#建议-对象字面量超过4个-都应该换行" aria-label="Permalink to &quot;建议: 对象字面量超过4个，都应该换行&quot;">​</a></h4><p>不好的示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airticle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;中国之声&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, author: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some people&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, date: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2012-02-01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, preview: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, total: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">334343</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> airticle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;中国之声&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    author: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some people&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    date: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2012-02-01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preview: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    total: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">334343</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="建议-链式调用对象时-一行最好不超过4个调用-可以改成每个独占一行。" tabindex="-1">建议: 链式调用对象时，一行最好不超过4个调用，可以改成每个独占一行。 <a class="header-anchor" href="#建议-链式调用对象时-一行最好不超过4个调用-可以改成每个独占一行。" aria-label="Permalink to &quot;建议: 链式调用对象时，一行最好不超过4个调用，可以改成每个独占一行。&quot;">​</a></h4><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">someInstance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queryAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;classA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">someInstance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queryAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;classA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="建议-else-和-if尾括号放在同一行-else-if同理" tabindex="-1">建议: else 和 if尾括号放在同一行，else if同理 <a class="header-anchor" href="#建议-else-和-if尾括号放在同一行-else-if同理" aria-label="Permalink to &quot;建议: else 和 if尾括号放在同一行，else if同理&quot;">​</a></h4><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="建议-设置每行的最大长度-超过最大行数需要换行。" tabindex="-1">建议: 设置每行的最大长度，超过最大行数需要换行。 <a class="header-anchor" href="#建议-设置每行的最大长度-超过最大行数需要换行。" aria-label="Permalink to &quot;建议: 设置每行的最大长度，超过最大行数需要换行。&quot;">​</a></h4><p>阅读代码最喜欢时从上到下阅读，不喜欢横向滚动条。推荐每行最大长度不超过180</p><h4 id="建议-条件语句过长的-可以将每个条件都放入当都一行-操作符放在开头" tabindex="-1">建议: 条件语句过长的，可以将每个条件都放入当都一行，操作符放在开头 <a class="header-anchor" href="#建议-条件语句过长的-可以将每个条件都放入当都一行-操作符放在开头" aria-label="Permalink to &quot;建议: 条件语句过长的，可以将每个条件都放入当都一行，操作符放在开头&quot;">​</a></h4><h3 id="空行" tabindex="-1">空行 <a class="header-anchor" href="#空行" aria-label="Permalink to &quot;空行&quot;">​</a></h3><h4 id="原则-不同的逻辑块之间空一行" tabindex="-1">原则: 不同的逻辑块之间空一行 <a class="header-anchor" href="#原则-不同的逻辑块之间空一行" aria-label="Permalink to &quot;原则: 不同的逻辑块之间空一行&quot;">​</a></h4><p>相对独立的代码块之间考虑换行（一般这个时候你需要提炼函数了-_-）。</p><h4 id="建议-class中-方法和方法之间需要换行。不同逻辑区间的属性之间换行。" tabindex="-1">建议: class中，方法和方法之间需要换行。不同逻辑区间的属性之间换行。 <a class="header-anchor" href="#建议-class中-方法和方法之间需要换行。不同逻辑区间的属性之间换行。" aria-label="Permalink to &quot;建议: class中，方法和方法之间需要换行。不同逻辑区间的属性之间换行。&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> People</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    sex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    career</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;teacher&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    isFlag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    isRegisted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    checkValid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="原则-方法体、块语句、类的开始或者末尾不要有空行。" tabindex="-1">原则: 方法体、块语句、类的开始或者末尾不要有空行。 <a class="header-anchor" href="#原则-方法体、块语句、类的开始或者末尾不要有空行。" aria-label="Permalink to &quot;原则: 方法体、块语句、类的开始或者末尾不要有空行。&quot;">​</a></h4><h4 id="建议-一般情况下-不要使用连续空行。" tabindex="-1">建议: 一般情况下，不要使用连续空行。 <a class="header-anchor" href="#建议-一般情况下-不要使用连续空行。" aria-label="Permalink to &quot;建议: 一般情况下，不要使用连续空行。&quot;">​</a></h4><h3 id="空格" tabindex="-1">空格 <a class="header-anchor" href="#空格" aria-label="Permalink to &quot;空格&quot;">​</a></h3><h4 id="建议-关键字周围空格一致性" tabindex="-1">建议: 关键字周围空格一致性 <a class="header-anchor" href="#建议-关键字周围空格一致性" aria-label="Permalink to &quot;建议: 关键字周围空格一致性&quot;">​</a></h4><ol><li>在保留字(if, for while) 和左括号( 之间添加一个空格</li><li>else catch 与 关闭花括号 } 之间添加一个空格</li><li>在任何打开花括号前添加一个空格, (函数参数和\`\`模板中去除外)</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 下面这三种情况除外</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> too</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`#\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="4"><li>在任何三元或者二元操作符的两侧增加一个空格</li><li>数组和函数参数逗号, 后面添加一个空格，前面不要增加空格。</li><li>; 前面不要空格</li><li>单行 {} 内侧需要一个空格</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, total: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ol start="8"><li>数组[]内侧不要有空格 [a, b, c]，不要[ a, b ]。</li><li>禁止出现多个空格，除注释和缩进外。</li></ol><h3 id="花括号" tabindex="-1">花括号 <a class="header-anchor" href="#花括号" aria-label="Permalink to &quot;花括号&quot;">​</a></h3><h4 id="建议-总是给代码执行体添加" tabindex="-1">建议: 总是给代码执行体添加{} <a class="header-anchor" href="#建议-总是给代码执行体添加" aria-label="Permalink to &quot;建议: 总是给代码执行体添加\\{\\}&quot;">​</a></h4><p>while, if, for, do，即使执行语句只有一行。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result) foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>上面这种看着很酷，如果需要多写一个语句，就需要三行的改动，如果我们事先添加好花括号。改动只有一行，出错的机率大幅度减低。血的教训——__——。</p><h4 id="建议-花括号要和语句在一行" tabindex="-1">建议: 花括号要和语句在一行 <a class="header-anchor" href="#建议-花括号要和语句在一行" aria-label="Permalink to &quot;建议: 花括号要和语句在一行&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Xxx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="建议-对象字面量和数组中使用拖尾逗号" tabindex="-1">建议: 对象字面量和数组中使用拖尾逗号, <a class="header-anchor" href="#建议-对象字面量和数组中使用拖尾逗号" aria-label="Permalink to &quot;建议: 对象字面量和数组中使用拖尾逗号,&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keyA: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keyB: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 拖尾逗号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> someArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxxA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxxB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,]</span></span></code></pre></div><h4 id="建议-每行代码句后添加分号。" tabindex="-1">建议: 每行代码句后添加分号。 <a class="header-anchor" href="#建议-每行代码句后添加分号。" aria-label="Permalink to &quot;建议: 每行代码句后添加分号。&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个代码会被解析 some = &#39;xxx&#39;; 而不是 some = getSome;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arg1; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> some</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getSome</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个代码会被解析成 return; { .... };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="建议-单文件长度最好不要超过1500行-尽可能的考虑拆分" tabindex="-1">建议: 单文件长度最好不要超过1500行，尽可能的考虑拆分 <a class="header-anchor" href="#建议-单文件长度最好不要超过1500行-尽可能的考虑拆分" aria-label="Permalink to &quot;建议: 单文件长度最好不要超过1500行，尽可能的考虑拆分&quot;">​</a></h4><h4 id="建议-单个方法长度不要超过50行" tabindex="-1">建议: 单个方法长度不要超过50行 <a class="header-anchor" href="#建议-单个方法长度不要超过50行" aria-label="Permalink to &quot;建议: 单个方法长度不要超过50行&quot;">​</a></h4><h4 id="建议-圈复杂度不要超过20" tabindex="-1">建议: 圈复杂度不要超过20 <a class="header-anchor" href="#建议-圈复杂度不要超过20" aria-label="Permalink to &quot;建议: 圈复杂度不要超过20&quot;">​</a></h4><h4 id="建议-块嵌套深度不超过4层。if语句判断等" tabindex="-1">建议: 块嵌套深度不超过4层。if语句判断等 <a class="header-anchor" href="#建议-块嵌套深度不超过4层。if语句判断等" aria-label="Permalink to &quot;建议: 块嵌套深度不超过4层。if语句判断等&quot;">​</a></h4><h4 id="建议-回调深读不超过4层。" tabindex="-1">建议: 回调深读不超过4层。 <a class="header-anchor" href="#建议-回调深读不超过4层。" aria-label="Permalink to &quot;建议: 回调深读不超过4层。&quot;">​</a></h4><h3 id="变量-1" tabindex="-1">变量 <a class="header-anchor" href="#变量-1" aria-label="Permalink to &quot;变量&quot;">​</a></h3><h4 id="原则-优先使用const-其次let。非特殊场景不使用var" tabindex="-1">原则: 优先使用const，其次let。非特殊场景不使用var <a class="header-anchor" href="#原则-优先使用const-其次let。非特殊场景不使用var" aria-label="Permalink to &quot;原则: 优先使用const，其次let。非特殊场景不使用var&quot;">​</a></h4><h4 id="原则-在使用地方申明变量-且尽快初始化" tabindex="-1">原则: 在使用地方申明变量，且尽快初始化 <a class="header-anchor" href="#原则-在使用地方申明变量-且尽快初始化" aria-label="Permalink to &quot;原则: 在使用地方申明变量，且尽快初始化&quot;">​</a></h4><h4 id="原则-每行申明一个变量-结构和for循环除外" tabindex="-1">原则: 每行申明一个变量，结构和for循环除外 <a class="header-anchor" href="#原则-每行申明一个变量-结构和for循环除外" aria-label="Permalink to &quot;原则: 每行申明一个变量，结构和for循环除外&quot;">​</a></h4><ol><li>方便阅读</li><li>在debug模式下，可以按行阅读。单行代码无法优美的查看（大雾）。 不好示例</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> varA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;nb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> varA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;nb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> varB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">varA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">varB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h4 id="建议-申明阶段禁止连续赋值" tabindex="-1">建议: 申明阶段禁止连续赋值 <a class="header-anchor" href="#建议-申明阶段禁止连续赋值" aria-label="Permalink to &quot;建议: 申明阶段禁止连续赋值&quot;">​</a></h4><h4 id="建议-变量不需要使用undefined来初始化" tabindex="-1">建议: 变量不需要使用undefined来初始化 <a class="header-anchor" href="#建议-变量不需要使用undefined来初始化" aria-label="Permalink to &quot;建议: 变量不需要使用undefined来初始化&quot;">​</a></h4><p>未赋值的变量会默认有一个undefined的初始值(????)</p><h4 id="建议-非特殊情况一般使用基础类型的字面量来初始化-而不是封装类型。" tabindex="-1">建议: 非特殊情况一般使用基础类型的字面量来初始化，而不是封装类型。 <a class="header-anchor" href="#建议-非特殊情况一般使用基础类型的字面量来初始化-而不是封装类型。" aria-label="Permalink to &quot;建议: 非特殊情况一般使用基础类型的字面量来初始化，而不是封装类型。&quot;">​</a></h4><p>不好的示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stringA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numberB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numberB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  124;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会有语义上的不明确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arrA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [3, 4, 5]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arrA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [empty * 4]   语义不明确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arrC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;4&#39;]</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 语义不明确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 考虑可读性和冗余性，对象也是</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keyA: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;longfor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keyB: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="建议-内部作用域变量不要覆盖外部作用域变量" tabindex="-1">建议: 内部作用域变量不要覆盖外部作用域变量 <a class="header-anchor" href="#建议-内部作用域变量不要覆盖外部作用域变量" aria-label="Permalink to &quot;建议: 内部作用域变量不要覆盖外部作用域变量&quot;">​</a></h4><p>会导致更深层次的代码无法获取到想要的变量，在后续变更操作中，增加出错风险。</p><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> aa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 如果c函数需要知道a函数中aa咋办???????</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aa)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><h4 id="建议-方法的参数不超过5个" tabindex="-1">建议: 方法的参数不超过5个 <a class="header-anchor" href="#建议-方法的参数不超过5个" aria-label="Permalink to &quot;建议: 方法的参数不超过5个&quot;">​</a></h4><p>超过5个的参数，将逻辑关联的参数放入对一个对象中。</p><h4 id="建议-函数参数指定默认参数-不是使用-指定默认参数" tabindex="-1">建议: 函数参数指定默认参数，不是使用 || 指定默认参数 <a class="header-anchor" href="#建议-函数参数指定默认参数-不是使用-指定默认参数" aria-label="Permalink to &quot;建议: 函数参数指定默认参数，不是使用 || 指定默认参数&quot;">​</a></h4><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果 a = false 或 a = &#39;&#39;；enummmmm.....</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="建议-永远不要改变参数的值。" tabindex="-1">建议: 永远不要改变参数的值。 <a class="header-anchor" href="#建议-永远不要改变参数的值。" aria-label="Permalink to &quot;建议: 永远不要改变参数的值。&quot;">​</a></h4><ol><li>如果函数中新增加一个功能，需要用到参数的原始值，想要一下需要改动的地方有多少。</li><li>如果参数是引用传参，改变参数的属性会导致修改传入外部，造成一些不必要的问题。</li></ol><h4 id="建议-默认参数放在最后面" tabindex="-1">建议: 默认参数放在最后面 <a class="header-anchor" href="#建议-默认参数放在最后面" aria-label="Permalink to &quot;建议: 默认参数放在最后面&quot;">​</a></h4><p>默认参数放在前面，需要写undefined来占位，放在后面可以不用。 不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cool....。</span></span></code></pre></div><h4 id="建议-es6不要使用arguments-请rest替代" tabindex="-1">建议: es6不要使用arguments, 请rest替代 <a class="header-anchor" href="#建议-es6不要使用arguments-请rest替代" aria-label="Permalink to &quot;建议: es6不要使用arguments, 请rest替代&quot;">​</a></h4><ol><li>箭头函数不存在arguments</li><li>arguments只是类数组，操作不方便</li></ol><h4 id="建议-对于外部api-始终对参数进行校验。" tabindex="-1">建议: 对于外部API，始终对参数进行校验。 <a class="header-anchor" href="#建议-对于外部api-始终对参数进行校验。" aria-label="Permalink to &quot;建议: 对于外部API，始终对参数进行校验。&quot;">​</a></h4><p>为了保证健壮性，防御性编程不可少(大雾)</p><h4 id="建议-优先使用参数结构" tabindex="-1">建议: 优先使用参数结构 <a class="header-anchor" href="#建议-优先使用参数结构" aria-label="Permalink to &quot;建议: 优先使用参数结构&quot;">​</a></h4><h3 id="申明与实现" tabindex="-1">申明与实现 <a class="header-anchor" href="#申明与实现" aria-label="Permalink to &quot;申明与实现&quot;">​</a></h3><h4 id="原则-函数申明一致性" tabindex="-1">原则: 函数申明一致性 <a class="header-anchor" href="#原则-函数申明一致性" aria-label="Permalink to &quot;原则: 函数申明一致性&quot;">​</a></h4><p>函数有表达式声明和function申明。有如下区别</p><ol><li>function申明会将申明提升到作用域顶级，可以在申明前调用</li><li>表达式申明不会提升，在申请前使用会出错(not a function) 团队应该选择统一的风格来实现，推荐使用表达式申明。</li></ol><h4 id="建议-匿名函数优先使用箭头函数" tabindex="-1">建议: 匿名函数优先使用箭头函数 <a class="header-anchor" href="#建议-匿名函数优先使用箭头函数" aria-label="Permalink to &quot;建议: 匿名函数优先使用箭头函数&quot;">​</a></h4><p>普通函数和箭头函数性能和开销没有太大差别，但是匿名函数没有this的困扰(^-^)。</p><h4 id="原则-箭头函数参数风格一致性" tabindex="-1">原则: 箭头函数参数风格一致性 <a class="header-anchor" href="#原则-箭头函数参数风格一致性" aria-label="Permalink to &quot;原则: 箭头函数参数风格一致性&quot;">​</a></h4><p>有下面有两种风格</p><ol><li>只有一个参数的情况下去参数括号。</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="2"><li>总是添加参数括号</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>推荐第二种方式，没有花括号的方式会有阅读上的停顿。</p><h4 id="原则-箭头函数return风格一致性" tabindex="-1">原则: 箭头函数return风格一致性 <a class="header-anchor" href="#原则-箭头函数return风格一致性" aria-label="Permalink to &quot;原则: 箭头函数return风格一致性&quot;">​</a></h4><p>同上，方法体只有一个return 语句，是不是需要添加花括号。推荐总是添加花括号，丑一点但是方便断点调试。</p><h4 id="建议-函数有多个返回参数时使用对象解构" tabindex="-1">建议: 函数有多个返回参数时使用对象解构 <a class="header-anchor" href="#建议-函数有多个返回参数时使用对象解构" aria-label="Permalink to &quot;建议: 函数有多个返回参数时使用对象解构&quot;">​</a></h4><p>优先使用对象结构而不是数组解构。不然冷不丁出现这种<code>const [a,,b,,c] = [1,1,1,1,1,1]</code></p><h2 id="类与对象" tabindex="-1">类与对象 <a class="header-anchor" href="#类与对象" aria-label="Permalink to &quot;类与对象&quot;">​</a></h2><h3 id="类-1" tabindex="-1">类 <a class="header-anchor" href="#类-1" aria-label="Permalink to &quot;类&quot;">​</a></h3><h4 id="建议-优先采用class定义类" tabindex="-1">建议: 优先采用class定义类 <a class="header-anchor" href="#建议-优先采用class定义类" aria-label="Permalink to &quot;建议: 优先采用class定义类&quot;">​</a></h4><ol><li>class关键字定义类简洁，而且逻辑更易于阅读。</li><li>不仅仅时语法糖，class的构造函数有特殊的内部属性<code>[[IsClassConstructor]]: true</code>, 可以防止被作为普通函数使用。</li><li><code>String(SomeClass)</code> 会得到什么? -- class SomeClass {}</li></ol><h4 id="建议-使用extends来实现继承。" tabindex="-1">建议: 使用extends来实现继承。 <a class="header-anchor" href="#建议-使用extends来实现继承。" aria-label="Permalink to &quot;建议: 使用extends来实现继承。&quot;">​</a></h4><h4 id="原则-构造函数中禁止在super-前调用this或者super-xx" tabindex="-1">原则: 构造函数中禁止在super() 前调用this或者super.xx <a class="header-anchor" href="#原则-构造函数中禁止在super-前调用this或者super-xx" aria-label="Permalink to &quot;原则: 构造函数中禁止在super() 前调用this或者super.xx&quot;">​</a></h4><h4 id="建议-在构造函数中申明所有的属性和方法。" tabindex="-1">建议: 在构造函数中申明所有的属性和方法。 <a class="header-anchor" href="#建议-在构造函数中申明所有的属性和方法。" aria-label="Permalink to &quot;建议: 在构造函数中申明所有的属性和方法。&quot;">​</a></h4><p>不要在类实例化后再动态添加属性, 如果一个属性实在执行时被赋值的，也需要先申明，方便VM优化。</p><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><h4 id="建议-优先使用单引号" tabindex="-1">建议: 优先使用单引号 <a class="header-anchor" href="#建议-优先使用单引号" aria-label="Permalink to &quot;建议: 优先使用单引号&quot;">​</a></h4><p>当你创建一个包含html代码时候就知道了</p><h4 id="建议-字符串使用模板字符串" tabindex="-1">建议: 字符串使用模板字符串 <a class="header-anchor" href="#建议-字符串使用模板字符串" aria-label="Permalink to &quot;建议: 字符串使用模板字符串&quot;">​</a></h4><p>可阅读性，一堆 + 很难阅读，特别时字符串中带有 + 时。</p><h4 id="原则-不使用-字符串行连续符号。" tabindex="-1">原则: 不使用\\字符串行连续符号。 <a class="header-anchor" href="#原则-不使用-字符串行连续符号。" aria-label="Permalink to &quot;原则: 不使用\\\\字符串行连续符号。&quot;">​</a></h4><p>当你在\\ 后面加个空格时，找代码会找的你怀疑人生。 直接写在一行，大部分IED会处理用多行来显示一行。</p><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h3><h4 id="建议-添加元素使用数组的push方法-而不是索引赋值" tabindex="-1">建议: 添加元素使用数组的push方法，而不是索引赋值 <a class="header-anchor" href="#建议-添加元素使用数组的push方法-而不是索引赋值" aria-label="Permalink to &quot;建议: 添加元素使用数组的push方法，而不是索引赋值&quot;">​</a></h4><p>数组的length有长度限制，push会检查并抛错，赋值没有。极限情况下出现length不更新问题。</p><h4 id="建议-不在数组定义非数字索引" tabindex="-1">建议: 不在数组定义非数字索引 <a class="header-anchor" href="#建议-不在数组定义非数字索引" aria-label="Permalink to &quot;建议: 不在数组定义非数字索引&quot;">​</a></h4><p>有特殊场景需要添加，建议替换成map或者set。</p><h4 id="建议-数组遍历优先使用数组上方法" tabindex="-1">建议: 数组遍历优先使用数组上方法 <a class="header-anchor" href="#建议-数组遍历优先使用数组上方法" aria-label="Permalink to &quot;建议: 数组遍历优先使用数组上方法&quot;">​</a></h4><h4 id="建议-除特殊场景-不要使用for-in遍历数组。" tabindex="-1">建议: 除特殊场景， 不要使用for in遍历数组。 <a class="header-anchor" href="#建议-除特殊场景-不要使用for-in遍历数组。" aria-label="Permalink to &quot;建议: 除特殊场景， 不要使用for in遍历数组。&quot;">​</a></h4><h4 id="建议-foreach中不要对数组进行增加删除操作" tabindex="-1">建议: forEach中不要对数组进行增加删除操作 <a class="header-anchor" href="#建议-foreach中不要对数组进行增加删除操作" aria-label="Permalink to &quot;建议: forEach中不要对数组进行增加删除操作&quot;">​</a></h4><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h3><h4 id="建议-对象字面量属性名统一风格-不加引号。" tabindex="-1">建议: 对象字面量属性名统一风格，不加引号。 <a class="header-anchor" href="#建议-对象字面量属性名统一风格-不加引号。" aria-label="Permalink to &quot;建议: 对象字面量属性名统一风格，不加引号。&quot;">​</a></h4><p>非特殊场景不使用混搭风格 不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AAA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;welcome to AAA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 特殊情况</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;some-one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="建议-尽量在申明时将所有属性申明好-少动态添加。" tabindex="-1">建议: 尽量在申明时将所有属性申明好，少动态添加。 <a class="header-anchor" href="#建议-尽量在申明时将所有属性申明好-少动态添加。" aria-label="Permalink to &quot;建议: 尽量在申明时将所有属性申明好，少动态添加。&quot;">​</a></h4><h4 id="建议-对象字面量中-方法使用简写。" tabindex="-1">建议: 对象字面量中，方法使用简写。 <a class="header-anchor" href="#建议-对象字面量中-方法使用简写。" aria-label="Permalink to &quot;建议: 对象字面量中，方法使用简写。&quot;">​</a></h4><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="建议-推荐使用对象字面量中使用简写属性" tabindex="-1">建议: 推荐使用对象字面量中使用简写属性 <a class="header-anchor" href="#建议-推荐使用对象字面量中使用简写属性" aria-label="Permalink to &quot;建议: 推荐使用对象字面量中使用简写属性&quot;">​</a></h4><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key: key,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.key;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="建议-使用-号来访问属性方法-只有动态情况或者数字索引下采用-访问" tabindex="-1">建议: 使用.号来访问属性方法，只有动态情况或者数字索引下采用[]访问 <a class="header-anchor" href="#建议-使用-号来访问属性方法-只有动态情况或者数字索引下采用-访问" aria-label="Permalink to &quot;建议: 使用\\.号来访问属性方法，只有动态情况或者数字索引下采用[]访问&quot;">​</a></h4><h4 id="原则-get-和-set-必须成对出现-否则没有意义。" tabindex="-1">原则: get 和 set 必须成对出现，否则没有意义。 <a class="header-anchor" href="#原则-get-和-set-必须成对出现-否则没有意义。" aria-label="Permalink to &quot;原则: get 和 set 必须成对出现，否则没有意义。&quot;">​</a></h4><p>如果只有get，表示该属性只可读，不可写。 如果只有set，表示该属性只可写，不可读。</p><h4 id="原则-禁止在对象上使用object-proptotype-的内置属性-用call代替" tabindex="-1">原则: 禁止在对象上使用Object.proptotype 的内置属性，用call代替 <a class="header-anchor" href="#原则-禁止在对象上使用object-proptotype-的内置属性-用call代替" aria-label="Permalink to &quot;原则: 禁止在对象上使用Object.proptotype 的内置属性，用call代替&quot;">​</a></h4><p>如果一个来自外部的JSON <code>resData = { hasOwnProperty: 1 }</code>; 如果调用<code>resData.hasOwnProperty()</code> 就会出现安全风险。用<code>Object.proptotype.hasOwnProperty.call(resData)</code> 则不会。</p><h4 id="建议-for-in循环对象需要约束" tabindex="-1">建议: for in循环对象需要约束 <a class="header-anchor" href="#建议-for-in循环对象需要约束" aria-label="Permalink to &quot;建议: for in循环对象需要约束&quot;">​</a></h4><p>for in 会将原型链上的属性包括进来，建议使用Object.prototype.hasOwnProperty() 过滤，或者直接使用Object.keys转成数组循环。</p><h4 id="建议-严禁对内置的类型添加修改属性方法。" tabindex="-1">建议: 严禁对内置的类型添加修改属性方法。 <a class="header-anchor" href="#建议-严禁对内置的类型添加修改属性方法。" aria-label="Permalink to &quot;建议: 严禁对内置的类型添加修改属性方法。&quot;">​</a></h4><p>常见在String.prototype 上面添加方法等。</p><h2 id="运算和表达式" tabindex="-1">运算和表达式 <a class="header-anchor" href="#运算和表达式" aria-label="Permalink to &quot;运算和表达式&quot;">​</a></h2><h3 id="条件表达式" tabindex="-1">条件表达式 <a class="header-anchor" href="#条件表达式" aria-label="Permalink to &quot;条件表达式&quot;">​</a></h3><h4 id="建议-条件表达式中-变量在先-表达式在后。" tabindex="-1">建议: 条件表达式中，变量在先，表达式在后。 <a class="header-anchor" href="#建议-条件表达式中-变量在先-表达式在后。" aria-label="Permalink to &quot;建议: 条件表达式中，变量在先，表达式在后。&quot;">​</a></h4><p>有种观点时变量在后面，为了防止 <code>if (a = 1) {}</code>这种低级错误出现。不过为了可阅读性，我们推荐变量的在前面，配合现在IDE，可以避免这种错误。</p><h4 id="建议-总使用-和-不使用-和" tabindex="-1">建议: 总使用 === 和 !==， 不使用 == 和 != <a class="header-anchor" href="#建议-总使用-和-不使用-和" aria-label="Permalink to &quot;建议: 总使用 === 和 !==， 不使用 == 和 !=&quot;">​</a></h4><p>==和!=对于新人来说难以掌握，而且也不利于阅读。所有 == 和 != 的场景都可以用 === 和 !== 表示出来。</p><h4 id="建议-条件语句尽量简单" tabindex="-1">建议: 条件语句尽量简单 <a class="header-anchor" href="#建议-条件语句尽量简单" aria-label="Permalink to &quot;建议: 条件语句尽量简单&quot;">​</a></h4><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isValid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isFinished</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="建议-不要在一个复杂的条件表达式最前面添加否定" tabindex="-1">建议: 不要在一个复杂的条件表达式最前面添加否定! <a class="header-anchor" href="#建议-不要在一个复杂的条件表达式最前面添加否定" aria-label="Permalink to &quot;建议: 不要在一个复杂的条件表达式最前面添加否定!&quot;">​</a></h4><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((person.flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 来读读这个是啥意思</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>需要否定的地方，用数学知识处理一下，解开括号。原则是 AND-OR互换，!抵消。括号加在 OR 中，从左到右依赖删除括号。对<code>!(!conditionA || !conditionB &amp;&amp; conditionC)</code> 举例。</p><ol><li>AND-OR互换: <code>!!conditionA &amp;&amp; !!conditionB || !conditionC</code></li><li>! 抵消: <code>conditionA &amp;&amp; conditionB || !conditionC</code></li><li>括号加在 OR 中 <code>conditionA &amp;&amp; (conditionB || !conditionC)</code></li><li>观察是否能够消除括号，这个例子不能消除括号。</li></ol><h4 id="建议-非特殊场景-if-else-条件判断不要否定在前" tabindex="-1">建议: 非特殊场景，if else 条件判断不要否定在前 <a class="header-anchor" href="#建议-非特殊场景-if-else-条件判断不要否定在前" aria-label="Permalink to &quot;建议: 非特殊场景，if else 条件判断不要否定在前&quot;">​</a></h4><h4 id="建议-禁止使用嵌套的三元表达式" tabindex="-1">建议: 禁止使用嵌套的三元表达式 <a class="header-anchor" href="#建议-禁止使用嵌套的三元表达式" aria-label="Permalink to &quot;建议: 禁止使用嵌套的三元表达式&quot;">​</a></h4><p>嵌套的三元表示式需要用栈的思维来阅读。建议多写几个if替代。</p><h4 id="建议-混合条件表示式-使用括号来标记运算顺序。" tabindex="-1">建议: 混合条件表示式，使用括号来标记运算顺序。 <a class="header-anchor" href="#建议-混合条件表示式-使用括号来标记运算顺序。" aria-label="Permalink to &quot;建议: 混合条件表示式，使用括号来标记运算顺序。&quot;">​</a></h4><h4 id="建议-每个switch语句总是有default-即使default里面为空" tabindex="-1">建议: 每个switch语句总是有default，即使default里面为空 <a class="header-anchor" href="#建议-每个switch语句总是有default-即使default里面为空" aria-label="Permalink to &quot;建议: 每个switch语句总是有default，即使default里面为空&quot;">​</a></h4><p>防御性编程意识不可少，当定义了default，就会想switch的错误场景。</p><h4 id="建议-非特殊场景-总是给每个case添加break" tabindex="-1">建议: 非特殊场景，总是给每个case添加break <a class="header-anchor" href="#建议-非特殊场景-总是给每个case添加break" aria-label="Permalink to &quot;建议: 非特殊场景，总是给每个case添加break&quot;">​</a></h4><h4 id="建议-总是给每个case的执行体添加花括号" tabindex="-1">建议: 总是给每个case的执行体添加花括号{} <a class="header-anchor" href="#建议-总是给每个case的执行体添加花括号" aria-label="Permalink to &quot;建议: 总是给每个case的执行体添加花括号{}&quot;">​</a></h4><p>switch中，每个case都在switch代码块，作用域共享。为了防止出错，建议给每个case添加花括号形成块作用域。</p><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (code) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="正则" tabindex="-1">正则 <a class="header-anchor" href="#正则" aria-label="Permalink to &quot;正则&quot;">​</a></h3><h4 id="原则-正则表达式中不要出现连续空格" tabindex="-1">原则: 正则表达式中不要出现连续空格 <a class="header-anchor" href="#原则-正则表达式中不要出现连续空格" aria-label="Permalink to &quot;原则: 正则表达式中不要出现连续空格&quot;">​</a></h4><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> testReg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">test    test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你能直接知道是几个空格吗</span></span></code></pre></div><p>推荐示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> testReg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span></code></pre></div><h4 id="建议-总是使用具名捕获组" tabindex="-1">建议: 总是使用具名捕获组 <a class="header-anchor" href="#建议-总是使用具名捕获组" aria-label="Permalink to &quot;建议: 总是使用具名捕获组&quot;">​</a></h4><p>比如 <code>&#39;web-doc&#39;.match(/-(?&lt;customName&gt;\\w)/).groups</code>，可以得到 <code>{ customName: &#39;d&#39; }</code></p><h2 id="一些特性" tabindex="-1">一些特性 <a class="header-anchor" href="#一些特性" aria-label="Permalink to &quot;一些特性&quot;">​</a></h2><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h3><h4 id="建议-不要在顶层作用域申明函数变量" tabindex="-1">建议: 不要在顶层作用域申明函数变量 <a class="header-anchor" href="#建议-不要在顶层作用域申明函数变量" aria-label="Permalink to &quot;建议: 不要在顶层作用域申明函数变量&quot;">​</a></h4><p>一般情况下，大部分人会忘记顶层作用域就是全局作用域。如果要申明，应该显示的申明到windows或者global上。</p><h4 id="建议-谨慎添加window上属性。" tabindex="-1">建议: 谨慎添加window上属性。 <a class="header-anchor" href="#建议-谨慎添加window上属性。" aria-label="Permalink to &quot;建议: 谨慎添加window上属性。&quot;">​</a></h4><p>尽可能用命名空间实现，给windows挂载一个特殊的属性，剩下的挂在在这个属性下面。参考jquery 或者underscore</p><h3 id="数字" tabindex="-1">数字 <a class="header-anchor" href="#数字" aria-label="Permalink to &quot;数字&quot;">​</a></h3><h4 id="建议-禁止省略小数点前后的0" tabindex="-1">建议: 禁止省略小数点前后的0 <a class="header-anchor" href="#建议-禁止省略小数点前后的0" aria-label="Permalink to &quot;建议: 禁止省略小数点前后的0&quot;">​</a></h4><p>好好写嘛</p><p>不好示例</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> .5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> numC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="原则-使用isnan-来检查nan" tabindex="-1">原则: 使用isNaN() 来检查NaN <a class="header-anchor" href="#原则-使用isnan-来检查nan" aria-label="Permalink to &quot;原则: 使用isNaN() 来检查NaN&quot;">​</a></h4><h3 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h3><h4 id="建议-异常的原则" tabindex="-1">建议: 异常的原则 <a class="header-anchor" href="#建议-异常的原则" aria-label="Permalink to &quot;建议: 异常的原则&quot;">​</a></h4><ol><li>异常总是Error子类或者Error</li><li>优先考虑内置异常， 不满足情况下使用自定义异常</li><li>捕获的异常不处理需要注释说明</li></ol><h4 id="建议-promise中reject总是返回异常-而不是其他" tabindex="-1">建议: promise中reject总是返回异常，而不是其他; <a class="header-anchor" href="#建议-promise中reject总是返回异常-而不是其他" aria-label="Permalink to &quot;建议: promise中reject总是返回异常，而不是其他;&quot;">​</a></h4><p>Promise rejct 返回 Error可以看到错误栈，方便调试，断点神器。</p><h3 id="异步" tabindex="-1">异步 <a class="header-anchor" href="#异步" aria-label="Permalink to &quot;异步&quot;">​</a></h3><h4 id="原则-不要-return-await写法" tabindex="-1">原则: 不要 return await写法 <a class="header-anchor" href="#原则-不要-return-await写法" aria-label="Permalink to &quot;原则: 不要 return await写法&quot;">​</a></h4><p>直接return，async 本身会返回Promise对象。</p><h3 id="杂谈" tabindex="-1">杂谈 <a class="header-anchor" href="#杂谈" aria-label="Permalink to &quot;杂谈&quot;">​</a></h3><h4 id="建议-一般不使用eval-如果需要-务必需要多人评审。" tabindex="-1">建议: 一般不使用eval，如果需要，务必需要多人评审。 <a class="header-anchor" href="#建议-一般不使用eval-如果需要-务必需要多人评审。" aria-label="Permalink to &quot;建议: 一般不使用eval，如果需要，务必需要多人评审。&quot;">​</a></h4><h4 id="原则-防止出现隐形eval" tabindex="-1">原则: 防止出现隐形eval <a class="header-anchor" href="#原则-防止出现隐形eval" aria-label="Permalink to &quot;原则: 防止出现隐形eval&quot;">​</a></h4><p>setTimeout 和 setInterval第一个参数为字符串时，和eval一样。不过大部分浏览器会拦截这个漏洞。</p><h4 id="原则-非特殊场景不用with" tabindex="-1">原则: 非特殊场景不用with <a class="header-anchor" href="#原则-非特殊场景不用with" aria-label="Permalink to &quot;原则: 非特殊场景不用with&quot;">​</a></h4><p>with可以提升性能，如果掌握不好会有一定的安全风险，比如在语义不明的情况，开发可能错误的执行了某个对象上的方法。建议团队评估后使用。</p><h4 id="建议-类型转换都用显示的方法处理-不要短符号实现。" tabindex="-1">建议: 类型转换都用显示的方法处理，不要短符号实现。 <a class="header-anchor" href="#建议-类型转换都用显示的方法处理-不要短符号实现。" aria-label="Permalink to &quot;建议: 类型转换都用显示的方法处理，不要短符号实现。&quot;">​</a></h4><ol><li>布尔类型: 用 <code>Boolean(numA)</code> 代替 <code>!!numA</code></li><li>数字类型: 用 <code>Number(strA)</code> 代替 <code>+strA</code></li><li>其余类推</li></ol><h4 id="原则-dom卸载时-务必移除事件绑定。" tabindex="-1">原则: DOM卸载时，务必移除事件绑定。 <a class="header-anchor" href="#原则-dom卸载时-务必移除事件绑定。" aria-label="Permalink to &quot;原则: DOM卸载时，务必移除事件绑定。&quot;">​</a></h4><p>不然哪天内存泄漏都找不到原因，引用计数GC的浏览器有这个问题。</p><h4 id="原则-及时清理定时器和延时器" tabindex="-1">原则: 及时清理定时器和延时器 <a class="header-anchor" href="#原则-及时清理定时器和延时器" aria-label="Permalink to &quot;原则: 及时清理定时器和延时器&quot;">​</a></h4><p>同样会导致内存泄漏，还要</p>`,296)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
