import{_ as a,c as i,o as n,ah as e}from"./chunks/framework.BurO9VyR.js";const k=JSON.parse('{"title":"access-control","description":null,"frontmatter":{"title":"access-control","comments":true,"hide":false,"abbrlink":"ff614c6c","date":"2022-10-22T09:49:50.000Z","updated":"2022-10-22T09:49:50.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/access-control.md","filePath":"posts/access-control.md"}'),l={name:"posts/access-control.md"};function t(o,s,r,h,c,p){return n(),i("div",null,s[0]||(s[0]=[e(`<h3 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h3><p>必须满足下列所有条件</p><ul><li>请求方法是 GET POST HEAD(只请求资源首部)</li><li>首部只能包含下面字段 <ul><li>accept</li><li>accept-language</li><li>content-language</li><li>content-type</li></ul></li><li>content-type 的值只能是 <ul><li><code>application/x-www-form-urlencode</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ul></li></ul><h3 id="复杂请求" tabindex="-1">复杂请求 <a class="header-anchor" href="#复杂请求" aria-label="Permalink to &quot;复杂请求&quot;">​</a></h3><p>不满足简单请求的都是复杂请求, 常见的复杂请求包括 content-type: applcation/json</p><h3 id="cors-cross-origin-resource-sharing-跨域资源共享" tabindex="-1">cors cross-origin resource sharing 跨域资源共享 <a class="header-anchor" href="#cors-cross-origin-resource-sharing-跨域资源共享" aria-label="Permalink to &quot;cors cross-origin resource sharing  跨域资源共享&quot;">​</a></h3><h4 id="简单请求-1" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求-1" aria-label="Permalink to &quot;简单请求&quot;">​</a></h4><p>针对简单请求，浏览器发现是跨域，会在请求中添加origin字段，如果服务端允许跨域，会返回access-control-allow-origin 字段，浏览器检测返回字段是否和当前域匹配，决定是否舍弃当前请求。</p><p>响应会返回下面3个首部字段</p><ul><li>access-control-allow-origin, 指定允许的域。只能是origin 字段或者*</li><li>access-control-allow-credentials，决定下次请求是否可以携带cookies</li><li>access-control-allow-headers, 允许浏览器额外获取的首部字段</li></ul><h4 id="复杂请求-1" tabindex="-1">复杂请求 <a class="header-anchor" href="#复杂请求-1" aria-label="Permalink to &quot;复杂请求&quot;">​</a></h4><p>针对复杂请求浏览器会先发送预检请求(options)，检查当前请求能否跨域，允许的字段等。 浏览器发送预检查请求，包括Origin,access-control-request-method（表示当前请求的方法）,access-control-allow-Headers(表示当前请求额外的首部字段)</p><p>服务端根据预检请求，会返回origin，access-control-allow-methods（表示允许的方法），用逗号分隔access-control-allow-headers(表示允许的首部字段)（逗号分隔），浏览器会检查，如果和当前匹配，则会发送正式请求。</p><p>为了避免浏览器每次需要预检请求，还会同时返回access-control-max-age(秒), 表示有效期内不用发送预检请求。如果一个请求背、被预检通过，会走简单请求的流程，如果这个时候被简单请求拦截， 也不会成功</p><h4 id="nginx-配置cors" tabindex="-1">nginx 配置cors <a class="header-anchor" href="#nginx-配置cors" aria-label="Permalink to &quot;nginx 配置cors&quot;">​</a></h4><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access-Control-Allow-Origin *;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access-Control-Allow-Methods </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST,DELETE,OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Access-Control-Max-Age: 7200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add_header Aceess-Contorl-Allow-Headers </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cache-Control,Keep-Alive,If-Modified-Since,Content-Type,Authorization&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者单独对options 请求配置</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    if($</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">request_method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;OPTIONS) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        add_header Access-Control-Allow-Origin *;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        add_header Access-Control-Allow-Methods &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET,POST,PUT,DELETE,OPTIONS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        add_header Access-Control-Allow-Header &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control,If-Modified-Since,If-None-Matched,Authorization,Content-Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span></code></pre></div>`,18)]))}const g=a(l,[["render",t]]);export{k as __pageData,g as default};
