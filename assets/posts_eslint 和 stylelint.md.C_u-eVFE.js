import{_ as i,c as a,o as n,ah as l}from"./chunks/framework.BurO9VyR.js";const c=JSON.parse('{"title":"规范团队项目","description":null,"frontmatter":{"title":"规范团队项目","comments":true,"hide":false,"abbrlink":"95508531","date":"2022-07-22T14:48:30.000Z","updated":"2022-07-22T14:48:30.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/eslint 和 stylelint.md","filePath":"posts/eslint 和 stylelint.md"}'),t={name:"posts/eslint 和 stylelint.md"};function e(p,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="几个角度规范项目开发" tabindex="-1">几个角度规范项目开发 <a class="header-anchor" href="#几个角度规范项目开发" aria-label="Permalink to &quot;几个角度规范项目开发&quot;">​</a></h2><ol><li>eslint 对js、ts以及在vue项目中的js代码进行质量和风格的检查。</li><li>stylelint 对css代码，包括sass，less等代码的风格和质量进行检查。</li><li>prettier 专注于对代码风格的修复，可以结果上面两个插件对代码进行自动修复。</li><li>editorconfig用于编辑器的默认行为，比如新建一个文件、新起一行、一个tab键的默认格式等。</li><li>.gitconfig 用于配置当前项目git的默认行为，比如下载的代码是lf还是crlf（mac和windows同学最对碰到的问题）,如果使用个人电脑，需要不同的项目对应不同user.name 等需要配置。.git/config文件。</li><li>cz工具能够对commit信息进行编辑。</li><li>husky通过对git add、commit和publish过程的介入，对项目本地化规范。</li></ol><h3 id="eslint" tabindex="-1">eslint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;eslint&quot;">​</a></h3><p>eslint通过在项目根目录配置eslintrc.*文件。通过parse选项对文件进行分析。eslint 会从当前文件依次向上检查配置文件，直到文件系统根目录或则碰到一个root: true 的配置文件，利用这个可以给mono配置不同的配置检查，配置文件主要包含一下内容</p><ul><li>env 和 globals 针对全局变量中的检查，比如window变量，document变量等，nodejs的__dirname等等。env 相当于globals的合集。</li><li>parse 和 parseOptions 解析器和解析器选项。 默认是esprima,可以配置成@babel/eslint-parser的 ，支持ts @typescript-eslint/parser 和 支持vue的eslint-plugin-vue。</li><li>rule 配置不同归的规则，key、value形式的对象。value 0 1 2 表示禁用，警告和错误。支持数组的形式调用。数组第二项是rule的参数。</li><li>extends，返回一个有config属性的对象。config属性对应的是配置文件，见后文如何提供一个eslint-plugin。extends都是由插件导入。</li><li>plugins 提供rules的解析，和extends的区别是plugin 提供的是rule规则，但是还未配置。所以一般使用plugin后需要配置相应的extend。plugin 还提供了processor 能力。</li><li>processor 是由plugin 提供，能对非js文件中的js片段提取进行eslint检查。一般都是对应Plugin的extend配置提供。</li><li>overrides 可以覆盖默认的配置，会和全局的定义的配置进行合并</li></ul><p>eslint-plugin-vue <a href="https://eslint.vuejs.org/rules/" target="_blank" rel="noreferrer">https://eslint.vuejs.org/rules/</a></p><p>下面配置vue3 eslint为例</p><blockquote><p>npm i -D eslint-plugin-vue</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    env: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        node: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        browser: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    globals: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;__webpack_public__path__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 忽略代码中webpack相关变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parse: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue-eslint-parse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析vue中template</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parseOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        parse: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@typescript-eslint/parse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ... 其余@typescript-eslint/parse parseOptions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;vue&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // eslint会默认添加eslint-plugin-vue</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;@juqery/test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @juqery/eslint-plugin-test</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;@test&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // @test/eslint-plugin  @开头总是会处理成组织名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extends: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;plugin:vue&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 去eslint-plugin-vue 包中导入config对象</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eslint-config-test包中导入</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 默认前缀是eslint-config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="plugin浅解析" tabindex="-1">plugin浅解析 <a class="header-anchor" href="#plugin浅解析" aria-label="Permalink to &quot;plugin浅解析&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包 eslint-plugin-xunserver</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;xxxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rule 定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vue3: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用时先在plugin中添加rule定义  plugins: [&#39;xunserver&#39;], 然后extends: [&#39;eslint-plugin-xunserver/vue3 或者eslint-plugin-xunserver/vue2&#39;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            env: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                node: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                browser: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extends: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &#39;other config&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vue2: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 大致同上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    processor: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor 对象</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="stylelint" tabindex="-1">stylelint <a class="header-anchor" href="#stylelint" aria-label="Permalink to &quot;stylelint&quot;">​</a></h3><p>stylelint 配置上同eslint类似。从当前文件开始依次向上寻找.stylelintrc.js配置文件，直到找到为止。同eslint区别是默认都是root配置。大致配置如下</p><ul><li>customSynax，定义解析器，比如在vue和html中使用就需要配置，一般和override搭配使用</li><li>extends, 继承其他配置，可以实现插件和customSynax的引入，和eslint有区别，extends大部分时候还用来配置插件。配置在后面的覆盖前面的，extends引入的会被覆盖。</li><li>plugins，通过插件提供新的规则，一般插件只提供了规则，但是未配置，需要extends配置或者自行配置。</li><li>overrides 能针对不能的文件类型使用不同的配置规则。比如stylelint-config-html/vue 实现了vue的特殊处理。</li><li>rules 对不同的规则配置，null表示规则不生效，其余需要参考rule的实现，数组形式如果第二项是对象，则认为是第二参数。通用的参数有disableFix，message两个关注的。一个可以不处理fix，一个可以自定义报错信息。</li><li>ignoreFiles 忽略文件。第三库不使用stylelint</li></ul><h4 id="recss" tabindex="-1">recss <a class="header-anchor" href="#recss" aria-label="Permalink to &quot;recss&quot;">​</a></h4><p>Reasonable System css， 通过style-config-recss 实现规范</p><h4 id="less-sass-和-stylus-的解析" tabindex="-1">less sass 和 stylus 的解析 <a class="header-anchor" href="#less-sass-和-stylus-的解析" aria-label="Permalink to &quot;less sass 和 stylus 的解析&quot;">​</a></h4><p>使用别人配置好的stylelint-config-standard、stylelint-config-standard-xx 实现，其中stylelint-config-standard是在 stylelint-config-recommend 基础上实现。</p><p>如果是自行配置需要，overrides 对应的less、scss和stylus文件，解析器是postcss-less postcss-scss 和 postcss-styl</p><p>vue需要安装postcss-html 和对应的postcss-less postcss-scss 等</p><h4 id="解决prettier冲突" tabindex="-1">解决prettier冲突 <a class="header-anchor" href="#解决prettier冲突" aria-label="Permalink to &quot;解决prettier冲突&quot;">​</a></h4><p>同理stylelint不解决格式上的问题，需要关闭和prettier冲突的rules。</p><h4 id="实现一个extend" tabindex="-1">实现一个extend <a class="header-anchor" href="#实现一个extend" aria-label="Permalink to &quot;实现一个extend&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modules.exports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;others extends&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    overrides: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            file: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;**/*.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            customSynax: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="prettier" tabindex="-1">prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;prettier&quot;">​</a></h3><p>prettier 是一个format工具，eslint和stylelint同时具有lint和format功能，执行顺序是eslint =&gt; prettier 或者stylelint =&gt; prettier。 prettier 的配置文件比较简单，一共就10多个选项，使用时指定需要使用的文件即可，prettier在项目中使用意义不大，主要是不能在codeActionSave中使用。目前prettier对css 和 js的格式化都交给对应的格式化工具，不够prettier 对其他语法的格式化还是比较好用，还是建议在编辑保留。 prettier还会使用editorconfig中的配置来初始化配置，如果新建文件总是报错飘红，建议检查editorconfig 和 prettier中冲突的部分。</p><h3 id="vscode中引入格式化工具" tabindex="-1">vscode中引入格式化工具 <a class="header-anchor" href="#vscode中引入格式化工具" aria-label="Permalink to &quot;vscode中引入格式化工具&quot;">​</a></h3><p>vscode 区分为工作区和用户区配置（本地和全局），vscode提供了两种format方式，一种是codeActionOnSave，表示保存时调用格式化工具。另一个是defaultEditor: &#39;xxx&#39;, 表示使用快捷键格式化时调用的工具。</p><ul><li>codeActionOnSave和formatOnSave， formateOnSave是defaultEditor在保存时调用的方式，现在基本启用。codeActionOnSave支持多个格式化程序依次调用。vscode插件在初始化时会向vscode注册format功能</li></ul><p>vscode针对不同类型的文件能够采用不同的配置，&quot;[html]&quot;为html类型的文件采用特定的配置。</p><h3 id="vue中template如何格式化" tabindex="-1">vue中template如何格式化 <a class="header-anchor" href="#vue中template如何格式化" aria-label="Permalink to &quot;vue中template如何格式化&quot;">​</a></h3><p>vue中template中规范prop能够保证良好的编码思路。建议加上vue/attributes-order。</p><h3 id="husky、lint-stage、commitizen和cz-customizable" tabindex="-1">husky、lint-stage、commitizen和cz-customizable <a class="header-anchor" href="#husky、lint-stage、commitizen和cz-customizable" aria-label="Permalink to &quot;husky、lint-stage、commitizen和cz-customizable&quot;">​</a></h3><ul><li>husky 用于在git的各种阶段执行脚本，如果脚本返回错误，停止流程。</li><li>list-stage 用于只校验暂存区文件，提高lint速度，在校验文件时，会从文件的当前的目录开始查找最近的配置，在根目录配置baseconfig，子目录继承。</li><li>commitizen是一个检查commit message的工具。支持各种adapter。cz-customizable 是对应的adapter。安装好后使用git-cz代替git commit。该方案不能很好的和vscode结合，不采用。</li><li>commitlint 检查commit msg是否合规，结合husky实现commit信息的校验。</li></ul><h4 id="husky安装配置" tabindex="-1">husky安装配置 <a class="header-anchor" href="#husky安装配置" aria-label="Permalink to &quot;husky安装配置&quot;">​</a></h4><blockquote><p>pnpm add husky -Dw // 项目安装在根目录 pnpm set-script prepare &quot;husky install&quot; 配置package.json script.prepare 脚本 pnpm husky install // 初始化husky pnpm add &#39;./husky/pre-commit&#39; &#39;lint-stage&#39; // 不同包调用自身的lint-stage 方法 pnpm add &#39;./husky/pre-push&#39; &#39;pnpm -F &quot;./packages/**&quot; run lint&#39; // 全局校验</p></blockquote><h4 id="list-stage" tabindex="-1">list-stage <a class="header-anchor" href="#list-stage" aria-label="Permalink to &quot;list-stage&quot;">​</a></h4><p>在子项目中单独配置.lintstagedrc.js文件,文件内容如下。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .lintstagedrc.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baseConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../../.lintstagedrc.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baseConfig,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;*.{js,jsx,ts,tsx.vue,html}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;eslint --config .eslintrc.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;*.{css,scss,sass,less,styl,vue,html}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stylelint --config .stylelintrc.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;*.{ts,tsx,js,jsx,json,html,yml,css,less,scss,md,sass}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prettier --write&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="commitlint" tabindex="-1">commitlint <a class="header-anchor" href="#commitlint" aria-label="Permalink to &quot;commitlint&quot;">​</a></h4><blockquote><p>pnpm add commitlint -Dw pnpm husky add &#39;./hasky/commit-msg&#39; &#39;pnpm commitlint --config .commitlintrc.js --edit $1&#39; 添加.commitlintrc.js文件</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * build : 改变了build工具 如 webpack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * ci : 持续集成新增</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * chore : 构建过程或辅助工具的变动</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * feat : 新功能</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * docs : 文档改变</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * fix : 修复bug</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * perf : 性能优化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * refactor : 某个已有功能重构</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * revert : 撤销上一次的 commit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * style : 代码格式改变</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * test : 增加测试</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * anno: 增加注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@commitlint/config-conventional&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;type-enum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;always&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;build&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;ci&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;chore&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;docs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;feat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;fix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;perf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;refactor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;revert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;anno&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="eslintrc-js和eslintignore-文件" tabindex="-1">eslintrc.js和eslintignore 文件 <a class="header-anchor" href="#eslintrc-js和eslintignore-文件" aria-label="Permalink to &quot;eslintrc.js和eslintignore 文件&quot;">​</a></h3><p>eslint（stylelint）在执行时，按照如下执行。</p><ol><li>确定当前使用的eslint文件位置，确定执行的上下文。</li><li>确定需要处理的全部文件</li><li>根据上下文中中的.eslitingnore、命令中的--no-ignore、--ext 确定需要处理的最终文件合集</li><li>一个一个文件的查找eslintrc配置，找到配置后执行eslint。配置的查找规则从当前需要检查的配置往上级目录查找，知道文件系统的根目录或者碰到一个root:true的配置文件，这种方式相当于变相实现了继承（stylelint在查找到第一个配置文件后停止，意味着需要自行实现继承）。</li></ol><h3 id="vscode中eslint和stylelint" tabindex="-1">vscode中eslint和stylelint <a class="header-anchor" href="#vscode中eslint和stylelint" aria-label="Permalink to &quot;vscode中eslint和stylelint&quot;">​</a></h3><p>vscode执行逻辑大致同上，只是确定文件的方式有所不同。</p><ol><li>vscode打开时加载项目根目录下的ignore文件</li><li>根据vscode中的no-ignore 和插件配置的生效文件确定最终文件。</li></ol><h3 id="lint-staged-如何实现只检查部分文件" tabindex="-1">lint-staged 如何实现只检查部分文件 <a class="header-anchor" href="#lint-staged-如何实现只检查部分文件" aria-label="Permalink to &quot;lint-staged 如何实现只检查部分文件&quot;">​</a></h3><p>eslint，styllint和prettier均支持stdin方式确定输入文件。lint-staged把需要检查的文件和配置一一对比，确定出需要执行命令的文件，添加在命令后。 lintstagedrc的查找方式从被检查的文件开始向上查找，lintstagedrc中指令执行的上下和本身相同</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lintstagedrc.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;*.(vue,ts,tsx,js,jsx)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 相当于执行在.lintstagedrc.js所在目录下执行eslint xx.js命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="monorepo格式化解决方案" tabindex="-1">monorepo格式化解决方案 <a class="header-anchor" href="#monorepo格式化解决方案" aria-label="Permalink to &quot;monorepo格式化解决方案&quot;">​</a></h3><p>monorepo仓库有如下难点需要解决。</p><ol><li>不同项目使用不同技术栈，采用的规范不一致。</li><li>CI和lint-staged中的校验是全局的。</li><li>vscode编辑器总是从项目根目录读取工具并加载ignore文件。 针对以上问题，解决方案如下</li><li>不同的子项目在编码时，建议到对应的子目录下编写，目的是为了匹配vscode的格式化功能。</li><li>不同子项目在配置时，通通引用公共的配置</li><li>ci和git 校验时采用调用各子项目中的lint工具。</li></ol>`,54)]))}const o=i(t,[["render",e]]);export{c as __pageData,o as default};
