import{_ as a,c as i,o as l,ah as n}from"./chunks/framework.BurO9VyR.js";const E=JSON.parse('{"title":"webpack hook体系","description":null,"frontmatter":{"title":"webpack hook体系","comments":true,"hide":false,"abbrlink":"390d2d6d","date":"2022-11-18T21:11:38.000Z","updated":"2022-11-18T21:11:38.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/webpack hook体系.md","filePath":"posts/webpack hook体系.md"}'),e={name:"posts/webpack hook体系.md"};function h(t,s,k,p,o,r){return l(),i("div",null,s[0]||(s[0]=[n(`<h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>webpack 在执行流程中通过大量的hook对外暴露出当前的执行流程，并允许外界程序通过hook修改或者自定义程序行为。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { SyncHook } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;tapable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sleep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SyncHook;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sleep.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test-name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">webpackContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(webpackContext);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test-name callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sleep.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(some)</span></span></code></pre></div><p>由上面可以看到，webpack hook 机制就是新建hook, 插件订阅hook，webpack内部触发hook、 针对这三个流程，又做了详细的扩充</p><h3 id="创建hook" tabindex="-1">创建hook <a class="header-anchor" href="#创建hook" aria-label="Permalink to &quot;创建hook&quot;">​</a></h3><p>webpack 有不同的hook,不同hook表示内部的回调如何执行。 按照回调逻辑区分</p><ul><li>正常依次执行回调</li><li>waterfall:前一个回调的值会带入下一个回调</li><li>bail 依次调用回调，如果有任何一个回调的值返回undefined，后续的回调值取消</li><li>loop 循环执行回调， 直到有一个回调返回undefined</li></ul><p>按照执行回调的方式区分</p><ul><li>sync 同步的执行回调，通过return 返回回调的结果</li><li>async 异步的执行的回调，通过return promies 结果或者callback结果。异步的钩子通过同步的方式执行没有意义拿不到结果，当然不需要结果的除外。</li></ul><h3 id="订阅hook" tabindex="-1">订阅hook <a class="header-anchor" href="#订阅hook" aria-label="Permalink to &quot;订阅hook&quot;">​</a></h3><p>有tap(同步订阅),tapAsync(异步订阅)和tapPromise(返回一个promise订阅的方式)</p><h3 id="执行hook" tabindex="-1">执行hook <a class="header-anchor" href="#执行hook" aria-label="Permalink to &quot;执行hook&quot;">​</a></h3><p>执行回调的方式有call(依次执行回调函数，会等回调函数执行完), callAsync(异步的依次执行函数，不会等待)，promise(返回一个promise来表示回调的执行结果)</p>`,13)]))}const c=a(e,[["render",h]]);export{E as __pageData,c as default};
