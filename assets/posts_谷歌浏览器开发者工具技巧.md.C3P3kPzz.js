import{_ as a,c as l,o,ah as t}from"./chunks/framework.BurO9VyR.js";const m=JSON.parse('{"title":"谷歌浏览器开发者工具技巧","description":null,"frontmatter":{"title":"谷歌浏览器开发者工具技巧","comments":true,"hide":false,"abbrlink":"ea959a90","date":"2021-11-15T17:39:15.000Z","updated":"2021-11-15T17:39:15.000Z","tags":null,"categories":null,"description":null},"headers":[],"relativePath":"posts/谷歌浏览器开发者工具技巧.md","filePath":"posts/谷歌浏览器开发者工具技巧.md"}'),r={name:"posts/谷歌浏览器开发者工具技巧.md"};function s(i,e,n,c,h,d){return o(),l("div",null,e[0]||(e[0]=[t('<h3 id="保存为全局变量" tabindex="-1">保存为全局变量 <a class="header-anchor" href="#保存为全局变量" aria-label="Permalink to &quot;保存为全局变量&quot;">​</a></h3><p>对打印的信息右键保存为全局变量</p><h3 id="复制dom-element-strng" tabindex="-1">复制dom element strng <a class="header-anchor" href="#复制dom-element-strng" aria-label="Permalink to &quot;复制dom element strng&quot;">​</a></h3><p>点击直接ctrl+c</p><h3 id="element面板调整数字大小" tabindex="-1">element面板调整数字大小 <a class="header-anchor" href="#element面板调整数字大小" aria-label="Permalink to &quot;element面板调整数字大小&quot;">​</a></h3><p>上下箭头 + ctrl alt 或者shift一个一个试一下</p><h3 id="命令行" tabindex="-1">命令行 <a class="header-anchor" href="#命令行" aria-label="Permalink to &quot;命令行&quot;">​</a></h3><ul><li>ctrl + p 打开资源查找器，输入 &gt; 进入命令行。</li><li>直接ctrl + p + shift</li></ul><h3 id="和" tabindex="-1">$ 和 ? <a class="header-anchor" href="#和" aria-label="Permalink to &quot;$ 和 ?&quot;">​</a></h3><ul><li>$ 是 document.querySelector()别名</li><li>? 是 document.querySelectorAll() 别名</li><li>$_ 表示上一次的执行结果,像是对上一次语句左边拼接 =</li></ul><h3 id="console一定是同步的吗" tabindex="-1">console一定是同步的吗？ <a class="header-anchor" href="#console一定是同步的吗" aria-label="Permalink to &quot;console一定是同步的吗？&quot;">​</a></h3><p>console打印需要时间，再打印出结果前，是以引用的方式保存的。所有有可能打印的结果不准确。所以应该尽量打印基本类型，或者使用断点。</p><h3 id="console控件台总是被async-包围" tabindex="-1">console控件台总是被async 包围 <a class="header-anchor" href="#console控件台总是被async-包围" aria-label="Permalink to &quot;console控件台总是被async 包围&quot;">​</a></h3><p>一些异步的方法可以直接使用await，比如fetch语句</p><h3 id="条件断点" tabindex="-1">条件断点 <a class="header-anchor" href="#条件断点" aria-label="Permalink to &quot;条件断点&quot;">​</a></h3><p>在断点语句添加判断语句， 不需要if，如果条件满足就会断点。条件语句总是会执行</p><h3 id="条件断点和console黑科技" tabindex="-1">条件断点和console黑科技 <a class="header-anchor" href="#条件断点和console黑科技" aria-label="Permalink to &quot;条件断点和console黑科技&quot;">​</a></h3><p>利用上面的特性，因为console总是返回undefined，所以可以添加一个条件语句console.log()</p><h3 id="条件和console" tabindex="-1">条件和console <a class="header-anchor" href="#条件和console" aria-label="Permalink to &quot;条件和console&quot;">​</a></h3><p>console.assert()，第一个参数写语句，后面写打印</p><h3 id="log-多参数打印技巧" tabindex="-1">log 多参数打印技巧 <a class="header-anchor" href="#log-多参数打印技巧" aria-label="Permalink to &quot;log 多参数打印技巧&quot;">​</a></h3><p>console.log(x1, x2, x3) 修改改成 console.log({ x1, x2, x3 }) 就可以看到每个位置是什么参数，当然可能会出现值不准确的问题。</p><h3 id="打印数组和对象" tabindex="-1">打印数组和对象 <a class="header-anchor" href="#打印数组和对象" aria-label="Permalink to &quot;打印数组和对象&quot;">​</a></h3><p>console.table</p><h3 id="过滤请求" tabindex="-1">过滤请求 <a class="header-anchor" href="#过滤请求" aria-label="Permalink to &quot;过滤请求&quot;">​</a></h3><ul><li>filter 过滤框中添加 method:GET 就会仅显示GET请求，-method:GET 就会过滤GET请求只显示其他，也可以勾选invert选项</li><li>安装crtl 点击资源类型可以多选</li></ul><h3 id="勾选禁用缓存和硬性刷新浏览器的区别" tabindex="-1">勾选禁用缓存和硬性刷新浏览器的区别 <a class="header-anchor" href="#勾选禁用缓存和硬性刷新浏览器的区别" aria-label="Permalink to &quot;勾选禁用缓存和硬性刷新浏览器的区别&quot;">​</a></h3><p>禁用缓存会每个资源都不使用缓存，硬性刷新只会在dom初始化阶段的请求添加禁止缓存</p><h3 id="添加network展示的列" tabindex="-1">添加network展示的列 <a class="header-anchor" href="#添加network展示的列" aria-label="Permalink to &quot;添加network展示的列&quot;">​</a></h3><p>在表头右键，一般添加上method方法</p><h3 id="代码片段" tabindex="-1">代码片段 <a class="header-anchor" href="#代码片段" aria-label="Permalink to &quot;代码片段&quot;">​</a></h3><p>命令行输入 create new snippet 新建代码片段，通过!加代码片段名称调用</p><h3 id="利用source-filesystem-实现在浏览器中修改代码-并同步css" tabindex="-1">利用source -&gt; filesystem 实现在浏览器中修改代码，并同步css <a class="header-anchor" href="#利用source-filesystem-实现在浏览器中修改代码-并同步css" aria-label="Permalink to &quot;利用source -&gt; filesystem 实现在浏览器中修改代码，并同步css&quot;">​</a></h3><p>本地起一个服务，把代码目录拖到filesystem, 对变绿色的代码就可以直接修改，保存后隐射到本地</p><h3 id="page-filesystem-overrides-contentscript的使用" tabindex="-1">page filesystem overrides contentScript的使用 <a class="header-anchor" href="#page-filesystem-overrides-contentscript的使用" aria-label="Permalink to &quot;page filesystem overrides contentScript的使用&quot;">​</a></h3><ul><li>page 用于查看当前网页下面文件</li><li>filesystem 连接本地和浏览器，在浏览器中的修改会同步到本地代码。文件标志是绿色</li><li>overrides 不能和filesystem共用，修改文件时优先保存overrides。通过完全一致的url对应，包括查询参数。文件标志是紫色。浏览器加载时会本地替换这个资源</li></ul>',36)]))}const p=a(r,[["render",s]]);export{m as __pageData,p as default};
