<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bang</title>
  
  <subtitle>生活总会有惊喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xunserver.cn/"/>
  <updated>2023-03-08T12:33:16.000Z</updated>
  <id>https://blog.xunserver.cn/</id>
  
  <author>
    <name>yangmanman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>esm和cjs的前世今生</title>
    <link href="https://blog.xunserver.cn/archives/5ec22c4f.html"/>
    <id>https://blog.xunserver.cn/archives/5ec22c4f.html</id>
    <published>2023-03-08T12:33:16.000Z</published>
    <updated>2023-03-08T12:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开发中最折磨的就是esm和cjs的相互引用。esm因为default的存在，和cjs兼容始终有大大小小的问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// esm.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> c = &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cjs.js   cjs导入</span></span><br><span class="line"><span class="keyword">const</span> esm = <span class="built_in">require</span>(<span class="string">'./esm.js'</span>) <span class="comment">// 这个到底是导入的 export default 还是导入的 export的各种const。没办法兼容</span></span><br><span class="line"><span class="comment">// esm.a === ?   esm.b === ?</span></span><br></pre></td></tr></table></figure></p><p>这个到底是导入的 export default 还是导入的 export的各种const。没办法兼容。但是反过来cjs转esm能行，只要esm不导入默认。</p><h3 id="tsc和babel"><a href="#tsc和babel" class="headerlink" title="tsc和babel"></a>tsc和babel</h3><p>tsc通过module配置能将ts代码转换成esm或者cjs兼容，其中还增加esModuleInterop支持。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> CreateElement = xx</span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    __esModule: <span class="literal">true</span></span><br><span class="line">    <span class="keyword">default</span>: React,   <span class="comment">// 恰恰也能兼容，因为没有export const default = xxx 或者 export &#123; xxx as default &#125;</span></span><br><span class="line">    CreateElement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; CreateElement &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>).default    <span class="comment">// 一般用cjs写代码不会有default这个属性。所以这玩意儿基本都报错。</span></span><br><span class="line"><span class="keyword">const</span> CreateElement = <span class="built_in">require</span>(<span class="string">'react'</span>).CreateElement   <span class="comment">// 没毛病</span></span><br><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>)  <span class="comment">// 对应的是module.exports</span></span><br></pre></td></tr></table></figure></p><p>tsc新增了esModuleInterop来兼容旧的模块、这个选项会新增两个helper函数用于import（为啥不是export，因为没办法去控制第三方的export）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> React = _importDefault(<span class="built_in">require</span>(<span class="string">'react'</span>)).default <span class="comment">// 对于默认导入使用这个, 也能和原来的保持兼容</span></span><br><span class="line"><span class="keyword">const</span> CreateElement = <span class="built_in">require</span>(<span class="string">'react'</span>).CreateElement   <span class="comment">// 不变化</span></span><br><span class="line"><span class="keyword">const</span> React =  _importStar(<span class="built_in">require</span>(<span class="string">'react'</span>)) <span class="comment">// 对于 * 导入使用这个函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_importDefault</span>(<span class="params">mod</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (mod &amp;&amp; mod.__esModule) ? mod : &#123; <span class="attr">default</span>: mod &#125;  <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_importStar</span>(<span class="params">mod</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mod &amp;&amp; mod.esModule) &#123;</span><br><span class="line">        <span class="keyword">return</span> mod <span class="comment">// 无需处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三方模块，将default属性添加到自身。</span></span><br><span class="line">    <span class="keyword">const</span> result = &#123;&#125;;     <span class="comment">// 添加这个为了防止污染</span></span><br><span class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> mod) &#123;</span><br><span class="line">        <span class="keyword">if</span>(key !== <span class="string">'default'</span> &amp;&amp; mod.hasOwnProperty(key)) &#123;</span><br><span class="line">            result[key] = mod[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result[<span class="string">'default'</span>] = mod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于tsc编译的模块总是会有__esModule 和 default 属性，能满足正常的调用，对于第三方模块因为没有exports.default 通过这个{ default: mod } 来补全。<br>对于星导入，实际就是在exports 上面添加了default属性等于自身</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>babel和esm实现原理差不多，都是实现以上helper函数。@babel/preset-env 中modules配置编译后代码，默认是auto（交给babel-loader等工具来配置），也有cjs等选项，或者是false使用esm。</p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>webpack也能实现esm转cjs(不能实现esm =&gt; esm)。处理方式有不少区别</p><ol><li>对于需要导出的模块如果是esm, 和tsc等相同，将默认导出放到exports.default上，同时添加了exports.__esModule = true在引入时也是取值 exports.default</li><li>对于需要导出的模块是cjs，而且是未修改module的场景，导出没什么区别，就是简单的require</li><li>对于需要导出的模块是cjs，而且是修改module的场景（module.exports），会将module.exports.default 变成一个函数返回,exports其他的属性变成函数的属性，恰恰能兼容，举例如下。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 第三点伪代码</span></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    b: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  b.js</span></span><br><span class="line"><span class="keyword">import</span> B, &#123; b &#125; <span class="keyword">from</span> <span class="string">'./a.js'</span></span><br><span class="line"><span class="comment">// 会解析成如下 </span></span><br><span class="line"><span class="keyword">const</span> B = importDefaultHelper(<span class="built_in">require</span>(<span class="string">'./a.js'</span>))();</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">'./a.js'</span>).b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">importDefaultHelper</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="function"><span class="params">()</span> =&gt;</span> exports</span><br><span class="line">    <span class="keyword">return</span> getter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>最终webpack编译的源码不是很多，不难如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">"./src/b.js"</span>:</span><br><span class="line"><span class="comment">/*!******************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/b.js ***!</span></span><br><span class="line"><span class="comment">  \******************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    b: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">"./src/c.js"</span>:</span><br><span class="line"><span class="comment">/*!******************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/c.js ***!</span></span><br><span class="line"><span class="comment">  \******************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">__webpack_require__.r(__webpack_exports__);  <span class="comment">// 赋值__esModule</span></span><br><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.d(__webpack_exports__, &#123;  <span class="comment">// __webpack_exports__ 初始化是空的module的初始化流程，这一步将esm模块组装好</span></span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">"c"</span>: <span class="function"><span class="params">()</span> =&gt;</span> (<span class="comment">/* binding */</span> c),</span><br><span class="line"><span class="comment">/* harmony export */</span>   <span class="string">"default"</span>: <span class="function"><span class="params">()</span> =&gt;</span> (__WEBPACK_DEFAULT_EXPORT__)</span><br><span class="line"><span class="comment">/* harmony export */</span> &#125;);</span><br><span class="line"><span class="comment">/* harmony default export */</span> <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = (<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">"./src/d.js"</span>:</span><br><span class="line"><span class="comment">/*!******************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/d.js ***!</span></span><br><span class="line"><span class="comment">  \******************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, exports</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">exports.b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="comment">/******/</span> exports: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_modules__[moduleId](<span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/compat get default export */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.n = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ?</span><br><span class="line"><span class="comment">/******/</span> () =&gt; (<span class="built_in">module</span>[<span class="string">'default'</span>]) :</span><br><span class="line"><span class="comment">/******/</span> () =&gt; (<span class="built_in">module</span>);</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> getter;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(__webpack_require__.o(definition, key) &amp;&amp; !__webpack_require__.o(exports, key)) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(exports, key, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: definition[key] &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop))</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">/* webpack/runtime/make namespace object */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define __esModule on exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">'Module'</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(exports, <span class="string">'__esModule'</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> &#125;)();</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">// This entry need to be wrapped in an IIFE because it need to be in strict mode.</span></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="comment">/*!******************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/a.js ***!</span></span><br><span class="line"><span class="comment">  \******************/</span></span><br><span class="line">__webpack_require__.r(__webpack_exports__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./b */</span> <span class="string">"./src/b.js"</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _b__WEBPACK_IMPORTED_MODULE_0___default = <span class="comment">/*#__PURE__*/</span>__webpack_require__.n(_b__WEBPACK_IMPORTED_MODULE_0__);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class="comment">/*! ./d */</span> <span class="string">"./src/d.js"</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _c__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(<span class="comment">/*! ./c */</span> <span class="string">"./src/c.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((_b__WEBPACK_IMPORTED_MODULE_0___default()), _b__WEBPACK_IMPORTED_MODULE_0__.b, _c__WEBPACK_IMPORTED_MODULE_2__.c, _d__WEBPACK_IMPORTED_MODULE_1__, _d__WEBPACK_IMPORTED_MODULE_1__.d)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br><span class="line"><span class="comment">//# sourceMappingURL=main.js.map</span></span><br></pre></td></tr></table></figure></p><p>webpack在和tsc和babel配合时，流程如下。webpack能够分析模块依赖，当查询到依赖的模块是ts时，调用ts-loader或者babel-loader对单个模块进行解析。这个时候tsc或babel本身用不用处理模块的依赖？<br>当然ts总是esm兼容的，如果处理依赖成esm。最终webpack处理的就是esm模块，如果处理成cjs（就会添加之前那些helper函数，不添加会怎么样），这时候webpack会当做cjs来处理（webpack本质就是处理cjs）。</p><p>不添加会怎么样？ webpack只会处理cjs，模块间引用都是tsc处理好扔给webpack，比如也会添加  tsc独到的require(‘xxx’).default，不会想webpack一样使用default()。<br>所以最好的就是处理esm，让webpack来处理模块间的引用关系。包括babel也是这个逻辑。</p><p>回来来看，发现各种loader还处理了模块间的引用关系，这也是为什么ts代码中不支持webpack别名的原因（tsc import时还需要判断类型，tsc并不识别webpack中的别名，）。<br>使用babel能识别别名吗，当然能，babel是直接将ts中的ts部分移除掉。不会处理任何的模块相关的 import “@/xxx” 原封不动传给webpack</p><p>再来看看如果babel处理js遇到别名怎么办，首先helper函数是不管目的模块的格式的，不管是esm还是cjs，统统加上_importDefault(require(‘@/b’))。 所以也能实现别名</p><h3 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;开发中最折磨的就是esm和cjs的相互引用。esm因为default的存在，和cjs兼容始终有大大小小的问题。&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="https://blog.xunserver.cn/archives/11d8b32d.html"/>
    <id>https://blog.xunserver.cn/archives/11d8b32d.html</id>
    <published>2023-03-02T16:09:04.000Z</published>
    <updated>2023-03-02T16:09:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>该死的八股文，问八股文的公司都是lj。</p><h4 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h4><p>通过原型链继承，缺点有两个，原型是复制模式，当修改一个原型链的引用类型时，会直接到原型链上修改，间接的影响其他依赖原型链的对象，第二个是没法在创建子类时自定义父类的构造器参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype = &#123;</span><br><span class="line">    speak() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.constructor = Human; <span class="comment">// 重写了原型，将构造函数补全</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Man.prototype = <span class="keyword">new</span> Human();</span><br><span class="line">Man.prototype.constructor = Man; <span class="comment">// 修正constructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ming = <span class="keyword">new</span> Man();</span><br><span class="line">ming.speak()</span><br><span class="line">ming.speak.test <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">const</span> ku = <span class="keyword">new</span> Man();</span><br><span class="line">ku.speak.test = <span class="string">'ku'</span></span><br><span class="line">ming.speak.test <span class="comment">// 影响了同级的子类</span></span><br></pre></td></tr></table></figure></p><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><p>为了解决上面问题，衍生出了构造函数继承的方案、但是这种方案总是会将父对象拷贝一份，在大量子类时不满足共享原则，其二父类原型上的方法没有继承到<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">sex, name</span>) </span>&#123;</span><br><span class="line">   Human.call(<span class="keyword">this</span>, name);  <span class="comment">// 每次Human() 执行都会创建一个新的speak，可以随意修改不会影响</span></span><br><span class="line">   <span class="keyword">this</span>.sex = sex;  <span class="comment">// 同时 也会将speak绑定到speak上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h4><p>为了解决上面父类原型没有继承到子类的问题，组合式继承就是构造函数继承和类继承的结合。缺点也有就是父构造函数会执行两次，对于父构造函数开销比较大比较耗时<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">sex, name</span>) </span>&#123;</span><br><span class="line">    Human.call(<span class="keyword">this</span>, name)</span><br><span class="line">    <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Man.prototype = <span class="keyword">new</span> Human();</span><br><span class="line">Man.prototype.constructor = Man;</span><br></pre></td></tr></table></figure></p><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>这种就是创建实例，没有了类那一套继承逻辑(然而，类不也是为了创建实例)，这个缺点也是如果o上面有引用的属性，继承o的所有值会共享。Object.create() 就是这玩意儿<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p>其实就是原型式继承的函数封装，新增了扩展子对象的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBook</span>(<span class="params">book</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> o = <span class="keyword">new</span> inheritObject(book);  <span class="comment">// 有new和无new有没有区别</span></span><br><span class="line">    o.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 添加了子对象独有的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><p>上面都是直接针对对象的，如果是类就该用下面这种<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritClass</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 拷贝父的原型</span></span><br><span class="line">    <span class="keyword">const</span> p = inheritObject(superClass);</span><br><span class="line">    subClass.prototype = p;</span><br><span class="line">    subClass.prototype.constructor = subClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">inheritClass(SubType, SuperType)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;该死的八股文，问八股文的公司都是lj。&lt;/p&gt;
&lt;h4 id=&quot;类继承&quot;&gt;&lt;a href=&quot;#类继承&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://blog.xunserver.cn/archives/364ea8cc.html"/>
    <id>https://blog.xunserver.cn/archives/364ea8cc.html</id>
    <published>2023-03-02T12:52:42.000Z</published>
    <updated>2023-03-02T12:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建性设计模式"><a href="#创建性设计模式" class="headerlink" title="创建性设计模式"></a>创建性设计模式</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>用于创建实例，就像工厂一样，输出参数，得到实例结果。包含工厂和实例类两个核心概念。工厂类的产出都应该是相识，或者叫一类东西（注意这个概念）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">One</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="string">'one'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Two</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="string">'two'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Three</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = <span class="string">'three'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFactory</span>(<span class="params">type</span>) </span>&#123;  <span class="comment">// 工厂</span></span><br><span class="line">    <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'one'</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> One()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'two'</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Two()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'three'</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Three()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者类的方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateFactory</span>(<span class="params">type</span>) </span>&#123;  <span class="comment">// 工厂</span></span><br><span class="line">    <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'one'</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> One()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'two'</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Two()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'three'</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Three()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> some = createFactory(<span class="string">'two'</span>)  <span class="comment">// 工厂创建实例</span></span><br></pre></td></tr></table></figure></p><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>如果要新增一个Four类，工厂方法类需要新增一个类和修改工厂方法，而且有可能使用者不清楚createFactory 到底是一个类还是方法。需要引入安全类模式（见代码）。<br>工厂方法是指将类的创建过程流转到子类中执行，核心类就变成了抽象类，同时引入安全类模式。好处是新增类时只用改一个地方<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CreateFactory.set = &#123;</span><br><span class="line">    One() &#123;</span><br><span class="line">        <span class="keyword">this</span>.content = <span class="string">'one'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Two() &#123;</span><br><span class="line">        <span class="keyword">this</span>.content = <span class="string">'two'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Three() &#123;</span><br><span class="line">        <span class="keyword">this</span>.content = <span class="string">'three'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateFactory</span>(<span class="params">type</span>) </span>&#123;  <span class="comment">// 安全类实现</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> instanceOf CreateFactory) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CreateFactory.set[type]()  <span class="comment">// new如果返回一个对象，将对象作为实例，如果返回undefined，当前的this作为实例</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CreateFactory(type)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>工厂模式用于创建示例，抽象工厂用于创建类。包含工厂类，工厂中的抽象类，产品类三个部分。<br>比如培训制造汽车的厂，这个厂可以培训出其他汽车厂，其他汽车厂可以造汽车，这样别人只要知道是某个培训厂出来的就知道车有什么特性。<br>总的来说就是通过工厂模式创建了抽象类，不是具体的产品。真正的产品都是这些抽象类的实现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(subClass, type) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">new</span>.target === AbstractFactory) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象类不能实例化'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将某个产品的特性交给某个来学习的厂</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        F.prototype = <span class="keyword">new</span> AbstractFactory.set[type]();</span><br><span class="line">        subClass.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        <span class="keyword">return</span> subClass</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存了这个厂所有抽象类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">set</span> =  &#123;</span><br><span class="line">        Car: <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">            <span class="keyword">constructor</span>() &#123;</span><br><span class="line">                <span class="keyword">this</span>.model = <span class="string">'car'</span></span><br><span class="line">            &#125;</span><br><span class="line">            featureA() &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'制造car需要自行完成特性A'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            featureB() &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'制造car需要自行完成特性B'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        Bus: <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> </span>&#123;</span><br><span class="line">            <span class="keyword">constructor</span>() &#123;</span><br><span class="line">                <span class="keyword">this</span>.model = <span class="string">'Bus'</span></span><br><span class="line">            &#125;</span><br><span class="line">            featureA() &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'制造Bus需要自行完成特性A'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            featureB() &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'制造Bus需要自行完成特性B'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        Truck: <span class="class"><span class="keyword">class</span> <span class="title">Truck</span> </span>&#123;</span><br><span class="line">            <span class="keyword">constructor</span>() &#123;</span><br><span class="line">                <span class="keyword">this</span>.model = <span class="string">'Truck'</span></span><br><span class="line">            &#125;</span><br><span class="line">            featureA() &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'制造Truck需要自行完成特性A'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            featureB() &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'制造Truck需要自行完成特性B'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 现在有一家宝马厂，最开始不会造汽车，但是有一些基础的技术BMWBase，想学习造汽车</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWBase</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">const</span> BMWCar = <span class="keyword">new</span> AbstractFactory(BMWBase， <span class="string">'Car'</span>);</span><br><span class="line"><span class="keyword">const</span> bmwCar = <span class="keyword">new</span> BMWCar()</span><br></pre></td></tr></table></figure></p><h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>在创建一个实例过程中，对实例每个特性都使用单独实例来创建。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(sex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Age</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据几个特性创建学生</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age, sex) &#123;</span><br><span class="line">        <span class="keyword">if</span>(name instanceOf Name || age instanceOf Age ||  sex instanceOf Sex ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'具体化实例'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">        <span class="keyword">this</span>._sex= sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>保证某个类只有唯一的实例，多次创建也只返回相同的实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Human._cache) &#123;</span><br><span class="line">        <span class="keyword">return</span> Human._cache;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    Human._cache = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Human(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Human(<span class="string">'b'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2)</span><br></pre></td></tr></table></figure></p><p>上面的方式将实例缓存到类的静态属性上，也可能出现修改的场景，通过闭包的方式避免修改。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> createSingleInstanceClass = <span class="function"><span class="keyword">function</span>(<span class="params">targetClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _cache</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!_cache) &#123;</span><br><span class="line">                _cache = <span class="keyword">new</span> targetClass(...args)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _cache</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HumanSingle = createSingleInstanceClass(Human)</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> HumanSingle(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> HumanSingle(<span class="string">'b'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2)</span><br></pre></td></tr></table></figure></p><h3 id="结构性设计模式"><a href="#结构性设计模式" class="headerlink" title="结构性设计模式"></a>结构性设计模式</h3><h4 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h4><p>将复杂的子系统接口创建成高级的封装好的接口</p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>将不同接口统一化，降低使用成本。前提是不同接口描述的功能是一类</p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>通过一个新的对象完全代理对就对象的操作，代理模式的核心是代理对象和被代理的对象保持接口的一致，当删除代理对象时，程序的基本功能正常。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">        <span class="built_in">document</span>.appendChild(img)</span><br><span class="line">    &#125;</span><br><span class="line">    setSrc(src) &#123;</span><br><span class="line">        <span class="keyword">this</span>.img.src = src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createImageProxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyMyImage</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(src) &#123;</span><br><span class="line">            <span class="keyword">this</span>.image = <span class="keyword">new</span> Image</span><br><span class="line">            <span class="keyword">this</span>.myImage = <span class="keyword">new</span> MyImage()</span><br><span class="line">            <span class="keyword">this</span>.image.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                myImage.setSrc(image)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setSrc(src) &#123;</span><br><span class="line">            <span class="keyword">this</span>.myImage.setSrc(<span class="string">'default.jpg'</span>)</span><br><span class="line">            <span class="keyword">this</span>.image.src = src</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个代理请求的接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uploadFileProxy = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = [];</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        cache.push(id)</span><br><span class="line">        <span class="keyword">if</span>(!timer) &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                cache.forEach(<span class="function"><span class="params">file</span> =&gt;</span> upload(file))</span><br><span class="line">                time = <span class="literal">null</span>;</span><br><span class="line">                cache = [];</span><br><span class="line">            &#125;, <span class="number">2000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">uploadFileProxy(<span class="string">'some'</span>)</span><br><span class="line">uploadFile(<span class="string">'some'</span>)   <span class="comment">// 在接口使用上没有差别，当以后代理类不需要时，可以放心的替换</span></span><br></pre></td></tr></table></figure><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>包含抽象base类，container容器类（基于base），元素类(基于base)，每个类可以嵌套其他类（item类不行），每个类有统一的接口。</p><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>将一个类区分为内部状态和外部状态，内部状态是指多个对象都是相同，用于共享。外部状态是变化的，当需要一个对象，将内部状态和外部状态组合。本质上是时间换空间的操作。</p><h3 id="行为性设计模式"><a href="#行为性设计模式" class="headerlink" title="行为性设计模式"></a>行为性设计模式</h3><h4 id="模版模式"><a href="#模版模式" class="headerlink" title="模版模式"></a>模版模式</h4><p>实现一个抽象父类，并定义执行的流程，子类依次实现步骤<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.actionA();</span><br><span class="line">        <span class="keyword">this</span>.actionB();</span><br><span class="line">        <span class="keyword">this</span>.actionC();</span><br><span class="line">    &#125;</span><br><span class="line">    actionA() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'action A should define by sub'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    actionB() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'action B should define by sub'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    actionC() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'action C should define by sub'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span> <span class="title">extend</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    actionA() &#123;&#125;  <span class="comment">// 依次重写</span></span><br><span class="line">    actionB() &#123;&#125;</span><br><span class="line">    actionC() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>分为被观察者和观察对象、也有衍生出发布订阅模式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 观察一个对象</span></span><br><span class="line">    watch(good) &#123;</span><br><span class="line">        good._watcher.push(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 观察者回调</span></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'商品变少，接收到通知'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Good</span> </span>&#123;</span><br><span class="line">    _watchers = [];</span><br><span class="line">    count = <span class="number">10</span></span><br><span class="line">    out() &#123;</span><br><span class="line">        <span class="keyword">this</span>.count--;</span><br><span class="line">        <span class="comment">// 通知所有的watcher</span></span><br><span class="line">        <span class="keyword">this</span>._watchers.forEach(<span class="function"><span class="params">watcher</span> =&gt;</span> &#123;</span><br><span class="line">            watcher.run(<span class="keyword">this</span>.count)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher();</span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> Good();</span><br><span class="line">watcher.watch(good);  <span class="comment">// 观察</span></span><br><span class="line">good.out();</span><br></pre></td></tr></table></figure></p><p>发布订阅和观察者模式区别是对于依赖的管理，观察者模式的依赖是被观察对象本身在管理(如果依赖管理稍微复杂，被观察对象本身也会变复杂)，会带来一些和被观察对象无关的状态。发布订阅是将依赖的管理交给订阅中心，结构上更去耦合。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    center = center</span><br><span class="line">    <span class="comment">// 观察一个对象</span></span><br><span class="line">    watch() &#123;</span><br><span class="line">        <span class="keyword">this</span>.center.sub(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 观察者回调</span></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'商品变少，接收到通知'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> center = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> _watcher = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        sub(watcher) &#123;</span><br><span class="line">            _watcher.push(watcher)</span><br><span class="line">        &#125;,</span><br><span class="line">        publish(data) &#123;</span><br><span class="line">            _watcher.forEach(<span class="function"><span class="params">watcher</span> =&gt;</span> watcher.run(data))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Good</span> </span>&#123;</span><br><span class="line">    center = center;</span><br><span class="line">    count = <span class="number">10</span></span><br><span class="line">    out() &#123;</span><br><span class="line">        <span class="keyword">this</span>.count--;</span><br><span class="line">        <span class="comment">// 通知所有的watcher</span></span><br><span class="line">        <span class="keyword">this</span>.center.publish(<span class="keyword">this</span>.count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher();</span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> Good();</span><br><span class="line">watcher.watch();  <span class="comment">// 观察</span></span><br><span class="line">good.out();</span><br></pre></td></tr></table></figure></p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>将接受者总是封装成命令类，请求总是和命令绑定从而执行命令，忽略接受者的差异。<br>命令核心就是命令类，接受者和请求者，请求者总是会执行命令类，命令类将请求转发给未来的接受者。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> BaseCommand &#123;</span><br><span class="line">    <span class="keyword">abstract</span> execute() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> OrderCommand <span class="keyword">extends</span> BaseCommand &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">receiver</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver</span><br><span class="line">    &#125;</span><br><span class="line">    executed() &#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> BaseAction &#123;</span><br><span class="line">    <span class="keyword">abstract</span> command</span><br><span class="line">    <span class="keyword">abstract</span> addCommand() &#123;&#125;</span><br><span class="line">    <span class="keyword">abstract</span> action() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MoveAction <span class="keyword">extends</span> BaseAction &#123;</span><br><span class="line">    command = <span class="literal">null</span></span><br><span class="line">    addCommand(command) &#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    action() &#123;</span><br><span class="line">        <span class="keyword">this</span>.command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><p>责任链模式是将一个大函数拆分成参数功能相似的区段。数据在区段之前流转，上一个处理函数不满足，流转到下一条，如果满足，责任链终止。就需要满足责任链的处理函数总是能满足当前函数所有的功能。<br>包含处理函数、责任链节点两个关键类。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单超过500的，打7折，</span></span><br><span class="line"><span class="comment"> * 订单在200~500之间，如果level是A，打8折，如果level是B，打8.5折。</span></span><br><span class="line"><span class="comment"> * 如果订单在200以下，并且有card，打9折，没有card原价。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">originFn</span>(<span class="params">order, level, hasCard</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(order &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> order * <span class="number">0.7</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> () &#123;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> () &#123;&#125;  <span class="comment">// 如果if else，新增修改规则变麻烦</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照打折的维度拆分，固定参数为 order, level, hasCard</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order500</span>(<span class="params">order</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> order * <span class="number">0.7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order200500</span>(<span class="params">order, level</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(level === A) &#123;</span><br><span class="line">        <span class="keyword">return</span> order * <span class="number">0.8</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> order * <span class="number">0.85</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderLess200</span>(<span class="params">order, _, hasCard</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> order * <span class="number">0.9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderNormal</span>(<span class="params">order</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> order</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> ChainAbstract &#123;</span><br><span class="line">    fn</span><br><span class="line">    nextChain</span><br><span class="line">    <span class="keyword">abstract</span> setNextChain() &#123;&#125;</span><br><span class="line">    <span class="keyword">abstract</span> startCurrentChain() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Chain <span class="keyword">extends</span> ChainAbstract &#123;</span><br><span class="line">    nextChain = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fn = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    setNextChain(chain) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nextChain = chain;</span><br><span class="line">    &#125;</span><br><span class="line">    startCurrentChain(...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="keyword">this</span>.fn(...args)</span><br><span class="line">        <span class="keyword">if</span>(ret === <span class="string">'next'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.nextChain &amp;&amp; <span class="keyword">this</span>.nextChain.startCurrentChain(...args)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    startChainAsync(cb, ...args) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fn(<span class="function">(<span class="params">ret</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ret === <span class="string">'next'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.nextChain &amp;&amp; <span class="keyword">this</span>.nextChain.startCurrentChain(cb, ...args)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cb(ret)</span><br><span class="line">        &#125;, ...args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chain500 = <span class="keyword">new</span> Chain(order500)</span><br><span class="line"><span class="keyword">const</span> chain200500 = <span class="keyword">new</span> Chain(order200500)</span><br><span class="line"><span class="keyword">const</span> chainLess200 = <span class="keyword">new</span> Chain(orderLess200)</span><br><span class="line">chain500.setNextChain(chain200500)</span><br><span class="line">chain200500.setNextChain(chainLess200)</span><br><span class="line"></span><br><span class="line">chain500.startCurrentChain(<span class="number">700</span>, <span class="string">'A'</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p><h3 id="中介模式"><a href="#中介模式" class="headerlink" title="中介模式"></a>中介模式</h3><p>节点本身不做逻辑处理，将状态上传到中介方，又中介调度处理。这样节点不用关注其他节点，尽可能少的额外状态。</p><h3 id="状态机模式"><a href="#状态机模式" class="headerlink" title="状态机模式"></a>状态机模式</h3><p>实体类、状态类，状态切换函数。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> LightStateAbstract &#123;</span><br><span class="line">    light: Light</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">light</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> pressButton</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> OnLightState <span class="keyword">extends</span> LightStateAbstract &#123;</span><br><span class="line">    pressButton() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'current is on, next is off'</span>)</span><br><span class="line">        <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.off)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> OffLightState <span class="keyword">extends</span> LightStateAbstract &#123;</span><br><span class="line">    pressButton() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'current is off, next is on'</span>)</span><br><span class="line">        <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.on)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Light &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.on = <span class="keyword">new</span> OnLightState(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.off = <span class="keyword">new</span> OffLightState(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.currentState = <span class="keyword">this</span>.on;</span><br><span class="line">    &#125;</span><br><span class="line">    setState(state: LightState) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentState = state;</span><br><span class="line">    &#125;</span><br><span class="line">    pressButton() &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentState.pressButton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">new</span> Light();</span><br><span class="line">light.pressButton();  <span class="comment">// on</span></span><br><span class="line">light.pressButton(); <span class="comment">// off</span></span><br><span class="line">light.pressButton(); <span class="comment">// on</span></span><br></pre></td></tr></table></figure></p><p>js中有基于FSM的状态机。实现逻辑差不多。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FSM = &#123;</span><br><span class="line">    on: &#123;</span><br><span class="line">        press() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'on'</span>)</span><br><span class="line">            <span class="keyword">this</span>.currentState = <span class="keyword">this</span>.off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    off: &#123;</span><br><span class="line">        press() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'off'</span>)</span><br><span class="line">            <span class="keyword">this</span>.currentState = <span class="keyword">this</span>.on</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> light = &#123;</span><br><span class="line">    on: FSM.on,</span><br><span class="line">    off: FSM.off,</span><br><span class="line">    currentState: FSM.,</span><br><span class="line">    press() &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentState.press.call(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于闭包的状态机。上面状态都是手动声明，通过闭包来保存当前的状态<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegate</span>(<span class="params">light, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        press() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建性设计模式&quot;&gt;&lt;a href=&quot;#创建性设计模式&quot; class=&quot;headerlink&quot; title=&quot;创建性设计模式&quot;&gt;&lt;/a&gt;创建性设计模式&lt;/h3&gt;&lt;h4 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue查漏补缺（二）几个响应式的原理</title>
    <link href="https://blog.xunserver.cn/archives/b534a667.html"/>
    <id>https://blog.xunserver.cn/archives/b534a667.html</id>
    <published>2023-02-23T06:05:48.000Z</published>
    <updated>2023-02-23T06:05:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一下源码中响应式几个忽略的点</p><h3 id="get和set中的ob"><a href="#get和set中的ob" class="headerlink" title="get和set中的ob"></a>get和set中的ob</h3><p>有两个地方会收集依赖，第一个是在defineReactive时，这个场景是某个属性发生变化时set中dep.notify()，第二个是在observer对象内部，用于手动更新依赖。ob.dep.notify()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep;</span><br><span class="line">    <span class="keyword">let</span> _value = obj[key];</span><br><span class="line">    <span class="keyword">let</span> childOb = _value.__ob__</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span>(Dep.target) &#123;</span><br><span class="line">                dep.depend();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(childOb) &#123;</span><br><span class="line">                    childOb.dep.depend();  <span class="comment">// 用于$set</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(_value)) &#123;</span><br><span class="line">                        dependArray(_value)  <span class="comment">// 用于array的push等方法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="set"><a href="#set" class="headerlink" title="$set"></a>$set</h3><p>set绑定在this上面和Vue静态属性上，是一个和实例不太有关系的方法，在实例的开始-beforeCreate阶段执行(stateMixin中执行)<br>this.$set(target, key, value)</p><ol><li>判断target是否是对象或者数组，如果是其他的，打印警告不处理</li><li>如果是数组，判断添加的key是否超长，超长则更新数组length，然后通通按照splice来更新数据（因为数组的splice是魔改的，也能实现响应式）</li><li>对象则需要不能直接对vm.$data 进行操作，也不能对未响应的target进行操作，如果是未响应的数据直接赋值即可</li><li>满足条件的对象，使用defineProperty来添加响应式</li><li>最后调用的target上的dep，通知整个target更新，使用了之前的<strong>ob</strong>.dep.notify()</li></ol><h3 id="array魔改"><a href="#array魔改" class="headerlink" title="array魔改"></a>array魔改</h3><p>array上面能够原地修改的方法有sort,reverse, splice 和几个队列栈相关的操作。其实只用关心对数组值新增的值的添加响应式</p><ol><li>初始化数组的响应式和对象差不多，通过对索引依次调用observe，建立响应式逻辑。</li><li>在初始化数组响应式时，如果数组存在上面原型的方法，重写当前方法，将添加的每个值变成响应式。</li><li>通知<strong>ob</strong>.dep.notify() 更新</li></ol><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>watch算是比较简单的，有两种使用方法，在选项中声明watch，二是在原型上面this.$watch 动态声明。watch申明了一个user-watcher, user-watcher会对一个响应式对象进行监听(get)，在update中将新值和旧值传递给回调函数。属于最简单的watcher应用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Watcher(vm, getter, cb)</span><br></pre></td></tr></table></figure></p><p>关键就是这个getter，当执行时，当前全局的Dep.target指向的是当前这个watcher，当getter里面数据变化时，当前这个watcher就会执行, 当watcher初始化时，会立即执行一次来天添加依赖。当依赖变化时会执行watcher.update(), 添加到异步队列，异步队列又会添加到nexttick中依次执行watcher.run,watcher.run 会执行cb(this.getter())</p><p>cb(this.getter())，无论是会有两个执行，render-watcher 就是放在this.getter()触发的updateComponent(), 同理computed也是没有CB只有getter</p><p>源码中可以发现，还支持sync参数，不讲watcher添加到任务队列，直接更新</p><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>computed同理，外号computed-watcher, 和watcher区别是拼接getter函数不一样，getter里面可能会涉及对多个getter对象读取，所以也具有if里面的语句如果第一次未收集不会添加到依赖项中, computed懒实现原理是</p><h3 id="nexttick"><a href="#nexttick" class="headerlink" title="nexttick"></a>nexttick</h3><p>如果想要获取更新的dom，需要用到该api。nexttick实际就是将代码放置到当前周期最后通过微任务或者宏任务添加。nexttick 函数返回一个promise对象，表示当前这个回调执行完毕</p><script>// @ is an alias to /srcimport HelloWorld from '@/components/HelloWorld.vue'export default {  name: 'HomeView',  data() {    return {      msg: 'message'    }  },  components: {    HelloWorld  },  mounted() {    this.msg = '123';    this.$nextTick(() => {      debugger // 理论上这个debugger时界面应该是白屏      alert()  // 实际上debugger不会阻止渲染线程，还是alert大爷出马    })  },  render(h) {    const vNode = h('HelloWorld', {props: {msg: this.msg}}, h('div',{}, ''))    return vNode  }}</script><h3 id="异步队列"><a href="#异步队列" class="headerlink" title="异步队列"></a>异步队列</h3><p>会将所有set中触发的watcher添加到异步队列中，如果watcher已经存在在队列中，放置到队列最后。异步队列的执行总是在当前周期优先通过nexttick（）添加。</p><h3 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="$forceUpdate()"></a>$forceUpdate()</h3><p>同步的执行当前异步队列并清空（不是删除nexttick中执行函数，只是清空），注意同步，意味着不需要再使用nexttick 就能获取更新后dom</p><p>上面的理解是错误的， 并不是同步的，forceUpdate只是让当前Vue实例上的所有watcher.upadte(将自身添加到异步队列中，无论对应的依赖是否有更新),话说一个组件中也不会有太多watcher</p><h3 id="事件原理"><a href="#事件原理" class="headerlink" title="事件原理"></a>事件原理</h3><p>主要是通过对模版的分析转换成vnode，vnode中通过on和nativeOn分别放入componentOptions, 在组件实例化时，如果是原生事件，在转换到dom时添加到dom上面，如果是自定义事件，直接走的Vue.prototype.$on监听(和代码中自定义事件差不多)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录一下源码中响应式几个忽略的点&lt;/p&gt;
&lt;h3 id=&quot;get和set中的ob&quot;&gt;&lt;a href=&quot;#get和set中的ob&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js-context and scoped</title>
    <link href="https://blog.xunserver.cn/archives/f112fe7a.html"/>
    <id>https://blog.xunserver.cn/archives/f112fe7a.html</id>
    <published>2023-02-16T04:13:56.000Z</published>
    <updated>2023-02-16T04:13:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>重新理一下js的中执行上下文和作用域的底层逻辑，以及this的中一些误区</p><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>js引擎在执行代码时会创建三种上下文，全局上下文，函数上下文和eval上下文。上下文以栈的形式保存，最开始，js引擎会创建一个全局上下文，推入栈。当执行到一个函数时，会创建一个函数上下文，入栈,再执行上下文的初始化。函数中又会一层一层的创建上下文，持续的推入栈形成上下文栈，当函数执行完成后，栈会弹出销毁。<br>上下文包含三个要素，变量对象，作用域和this推导。变量对象(VO)，函数中又称为AO，是在函数执行时才激活的对象。函数执行时先分析生成AO，包括形参，函数声明和变量声明（注意有先后顺序），如果变量声明和函数以及形参冲突，则变量声明取消。分析完后进入函数执行过程，这时候又会动态的调整AO。</p><p>函数在创建的时候会将当前的上下文的scoped保存到函数的[[scoped]]对象中，当函数上下文初始时，函数的scoped = object.assign([[scoped]], AO)。这样形成了作用域链。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d)  <span class="comment">// function</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">23</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(d)  <span class="comment">// 23</span></span><br><span class="line">    <span class="keyword">var</span> e = <span class="string">'e'</span></span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面执行a时的AO 和 作用域</span></span><br><span class="line">functionContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">2</span></span><br><span class="line">            [<span class="number">0</span>]: <span class="number">2</span></span><br><span class="line">            [<span class="number">1</span>]: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        b: <span class="number">2</span>,</span><br><span class="line">        c: <span class="number">5</span>,</span><br><span class="line">        d: <span class="function"><span class="keyword">function</span>,</span></span><br><span class="line"><span class="function">        <span class="title">d</span>: <span class="title">undefined</span> // 变量申明不会覆盖形参和函数申明</span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scoped</span>: </span>&#123;</span><br><span class="line">        ...[[scoped]]</span><br><span class="line">        ...AO,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="this的绑定"><a href="#this的绑定" class="headerlink" title="this的绑定"></a>this的绑定</h3><p>简单理解就是谁调用this指向谁，如果没有调用方，this指向undefined，非严格模式下，undefined就会指向全局， 箭头函数的this在创建时绑定，绑定的是创建时上下文中的this，如果使用了call，apply调用直接指向参数，如果是bind绑定的，this也是在函数创建时绑定。</p><p>初始化上下文时，如果this已经绑定到值，不会执行this的初始化，bind、call、apply也是同理，如果发现函数在初始化阶段已经绑定了this，重新绑定不会生效。</p><p>需要注意的是js中(foo.bar)和(false || foo.bar) 不一致，前者会直接返回foo.bar的引用，后者会返回一个新的值时foo.bar的拷贝<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">    bar,</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">2</span>;</span><br><span class="line">foo.bar() <span class="comment">// 1</span></span><br><span class="line">(foo.bar)() <span class="comment">// 1 括号不会影响旧值</span></span><br><span class="line">(<span class="literal">false</span> || foo.bar)() <span class="comment">// 2   // 表达式会返回一个新值</span></span><br><span class="line"><span class="keyword">var</span> c = foo.bar</span><br><span class="line">c() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;重新理一下js的中执行上下文和作用域的底层逻辑，以及this的中一些误区&lt;/p&gt;
&lt;h3 id=&quot;执行上下文&quot;&gt;&lt;a href=&quot;#执行上下
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FE-advance</title>
    <link href="https://blog.xunserver.cn/archives/fcb5ead3.html"/>
    <id>https://blog.xunserver.cn/archives/fcb5ead3.html</id>
    <published>2023-02-15T08:45:48.000Z</published>
    <updated>2023-02-15T08:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器和网络"><a href="#浏览器和网络" class="headerlink" title="浏览器和网络"></a>浏览器和网络</h3><h4 id="浏览器的进程有哪些，分别作用"><a href="#浏览器的进程有哪些，分别作用" class="headerlink" title="浏览器的进程有哪些，分别作用"></a>浏览器的进程有哪些，分别作用</h4><h4 id="浏览器的线程"><a href="#浏览器的线程" class="headerlink" title="浏览器的线程"></a>浏览器的线程</h4><h4 id="输入一个url，浏览器如何处理解析"><a href="#输入一个url，浏览器如何处理解析" class="headerlink" title="输入一个url，浏览器如何处理解析"></a>输入一个url，浏览器如何处理解析</h4><h4 id="js引擎的执行，如何和各个线程配合"><a href="#js引擎的执行，如何和各个线程配合" class="headerlink" title="js引擎的执行，如何和各个线程配合"></a>js引擎的执行，如何和各个线程配合</h4><h4 id="什么请求会携带cookies"><a href="#什么请求会携带cookies" class="headerlink" title="什么请求会携带cookies"></a>什么请求会携带cookies</h4><p>任何请求都会携带cookies，最终能不能携带cookies还需要多步过滤。</p><h4 id="cookies如何携带，如何设置。"><a href="#cookies如何携带，如何设置。" class="headerlink" title="cookies如何携带，如何设置。"></a>cookies如何携带，如何设置。</h4><p>携带当前请求的父域名和父路径上的cookies，设置域名也是只能设置到当前请求的父域名路径</p><h4 id="跨域场景的cookies是如何设置和携带的"><a href="#跨域场景的cookies是如何设置和携带的" class="headerlink" title="跨域场景的cookies是如何设置和携带的"></a>跨域场景的cookies是如何设置和携带的</h4><p>跨域和携带cookies不冲突，cookies是只看目的不看来源，对于xhr 和 fetch的请求，总是需要手动的设置的是否在请求中包含cookies。对于其他的比如标签，链接或者link等不考虑跨域。</p><h4 id="什么是跨站，samesite是什么"><a href="#什么是跨站，samesite是什么" class="headerlink" title="什么是跨站，samesite是什么"></a>什么是跨站，samesite是什么</h4><p>只有两个请求的顶级有效域名 + 1相同，既是同站。samesite有lax、strict和none。老版本中samesite默认值是none, 意味着cookies的携带不看来源，目前各大浏览器统一设置为 lax, 对于跨站的请求只允许a标签、预加载和get 表单能携带cookies。 </p><h4 id="浏览器的缓存有些那些"><a href="#浏览器的缓存有些那些" class="headerlink" title="浏览器的缓存有些那些"></a>浏览器的缓存有些那些</h4><h4 id="no-store和no-cache"><a href="#no-store和no-cache" class="headerlink" title="no-store和no-cache"></a>no-store和no-cache</h4><h4 id="webpack中的缓存如何配置"><a href="#webpack中的缓存如何配置" class="headerlink" title="webpack中的缓存如何配置"></a>webpack中的缓存如何配置</h4><h4 id="put、post、get区别，浏览器常见的状态码"><a href="#put、post、get区别，浏览器常见的状态码" class="headerlink" title="put、post、get区别，浏览器常见的状态码"></a>put、post、get区别，浏览器常见的状态码</h4><h4 id="跨域的几种方法和原理"><a href="#跨域的几种方法和原理" class="headerlink" title="跨域的几种方法和原理"></a>跨域的几种方法和原理</h4><h4 id="xss和crsf攻击是啥，如何防范"><a href="#xss和crsf攻击是啥，如何防范" class="headerlink" title="xss和crsf攻击是啥，如何防范"></a>xss和crsf攻击是啥，如何防范</h4><h4 id="postmessage如何实现，讲述一下为什么能实现跨域。"><a href="#postmessage如何实现，讲述一下为什么能实现跨域。" class="headerlink" title="postmessage如何实现，讲述一下为什么能实现跨域。"></a>postmessage如何实现，讲述一下为什么能实现跨域。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并获取其他窗口的引用</span></span><br><span class="line"><span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'IFRAME'</span>);</span><br><span class="line">insertIframe(iframe);</span><br><span class="line">iframe.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span><br><span class="line">    iframe.contentWindow.postMessage(<span class="string">"some message"</span>, <span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// iframe中</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'message'</span>, message =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(message.origin === <span class="string">'https://www.baidu.com'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message.data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.parent.postMessage(<span class="string">'iframe message'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>所有的跨域都基于信任链，子iframe手动添加了对父origin的信任，父origin也手动添加了对子的信任。</p><p>还有基于window.domain的跨域，在两个页面是同站但是跨域的场景，手动将的两个站点的window.domain 设置为相同即可在两个页面分别直接获取window对象</p><h4 id="access-control-allow流程。"><a href="#access-control-allow流程。" class="headerlink" title="access-control-allow流程。"></a>access-control-allow流程。</h4><ol><li>判断当前请求是简单请求还是复杂请求，如果是简单请求直接请求，后端在响应中携带access-control-allow: * 对应的域，浏览器检查响应中是否有该字段并且能和当前的域匹配，响应才会被正确的解析。如果是复杂请求，浏览器先发送一个option请求， 不携带请求体，询问是否同意跨域，如果同意再发送简单请求。<h4 id="简单请求和复杂请求"><a href="#简单请求和复杂请求" class="headerlink" title="简单请求和复杂请求"></a>简单请求和复杂请求</h4>简单请求需要满足request method: option, get, post ，request header: accept accept-language 。content-language和 content-type 是 x-www-form-urlencode 和 mutilpart/formdata 以及 text/plain，注意不包括我们平常用的json。 其余的都是复杂请求。</li></ol><p>对于所有的跨域，请求中总是会携带当前域的信息通过origin 协议 host 和端口<br>其中简单请求服务端响应的有:<br>access-control-allow-origin: *（表示所有，但是不会携带cookies，即使设置了携带） ，对于开发环境，建议是正向代理总是将Origin，除了浏览器其他平台没有跨域问题<br>access-control-allow-credentials: 下次请求是否允许发送的cookie（要携带cookies， 两个条件缺一不可）</p><p>对于复杂请求，还会添加 max-age: 表示多少时间内不需要再次预请求。 allow-method: 允许的请求的方法  allow-headers: *(除了 authoritie需要手动指定外，如果一定要手动指定，一定记得添加content-type 这样就能允许所有的content-type类型)</p><h4 id="从浏览器上做优化有哪些-seo，多域名，"><a href="#从浏览器上做优化有哪些-seo，多域名，" class="headerlink" title="从浏览器上做优化有哪些(seo，多域名，)"></a>从浏览器上做优化有哪些(seo，多域名，)</h4><h4 id="获取其他页面的window，获取iframe的window，-iframe获取上级windows"><a href="#获取其他页面的window，获取iframe的window，-iframe获取上级windows" class="headerlink" title="获取其他页面的window，获取iframe的window， iframe获取上级windows"></a>获取其他页面的window，获取iframe的window， iframe获取上级windows</h4><h4 id="iframe如何创建最优，iframe对主页面的影响"><a href="#iframe如何创建最优，iframe对主页面的影响" class="headerlink" title="iframe如何创建最优，iframe对主页面的影响"></a>iframe如何创建最优，iframe对主页面的影响</h4><h4 id="前端需要理解的SEO"><a href="#前端需要理解的SEO" class="headerlink" title="前端需要理解的SEO"></a>前端需要理解的SEO</h4><h3 id="html相关"><a href="#html相关" class="headerlink" title="html相关"></a>html相关</h3><h4 id="meta中的viewport用法"><a href="#meta中的viewport用法" class="headerlink" title="meta中的viewport用法"></a>meta中的viewport用法</h4><h4 id="input中的type-hidden的意义"><a href="#input中的type-hidden的意义" class="headerlink" title="input中的type=hidden的意义"></a>input中的type=hidden的意义</h4><h4 id="字体图标的原理"><a href="#字体图标的原理" class="headerlink" title="字体图标的原理"></a>字体图标的原理</h4><h3 id="css相关"><a href="#css相关" class="headerlink" title="css相关"></a>css相关</h3><h4 id="BFC是啥，触发BFC的条件5点"><a href="#BFC是啥，触发BFC的条件5点" class="headerlink" title="BFC是啥，触发BFC的条件5点"></a>BFC是啥，触发BFC的条件5点</h4><ol><li>BFC外的浮动元素不会和BFC区域重叠</li><li><strong>BFC高度会计算浮动元素</strong></li><li>BFC不会和另一个BFC出现margin重叠</li><li>BFC中的上下边距会重叠，取最大的那个</li></ol><h4 id="line-height-2-和-line-height-200-的区别"><a href="#line-height-2-和-line-height-200-的区别" class="headerlink" title="line-height: 2 和 line-height: 200%的区别"></a>line-height: 2 和 line-height: 200%的区别</h4><h4 id="实现文本溢出省略号"><a href="#实现文本溢出省略号" class="headerlink" title="实现文本溢出省略号"></a>实现文本溢出省略号</h4><h4 id="单词超出换行如何实现，white-space-word-break-overflow-wrap"><a href="#单词超出换行如何实现，white-space-word-break-overflow-wrap" class="headerlink" title="单词超出换行如何实现，white-space , word-break ,overflow-wrap"></a>单词超出换行如何实现，white-space , word-break ,overflow-wrap</h4><p>white-space 用于控制换行符，空格和行框盒子的生成,<br>wrap 允许行框盒子<br>pre 允许换行符和空格<br>line 不予许空格</p><p>word-break 控制单词是否要换行<br>normal: CJK字体换行，非CJK在空格地方换行，而且如果剩余空间不能转载下，会提前换行<br>break-all: CJK（两个标点符号之间）换行，非CJK在任意地方换行，不会提前换行<br>keep-all: CJK不换行，非CJK也不换行</p><p>overflow-wrap 控制的是一个单词在盒子转不下时是否换行。只有normal和break-word两个属性，一个是换行一个是不换行</p><h4 id="flex各个属性，flex实现居中-如何平分剩余空间等"><a href="#flex各个属性，flex实现居中-如何平分剩余空间等" class="headerlink" title="flex各个属性，flex实现居中, 如何平分剩余空间等"></a>flex各个属性，flex实现居中, 如何平分剩余空间等</h4><h4 id="重绘和回流是什么"><a href="#重绘和回流是什么" class="headerlink" title="重绘和回流是什么"></a>重绘和回流是什么</h4><h4 id="渲染层，合成层和图形层是啥"><a href="#渲染层，合成层和图形层是啥" class="headerlink" title="渲染层，合成层和图形层是啥"></a>渲染层，合成层和图形层是啥</h4><h4 id="animation和transition"><a href="#animation和transition" class="headerlink" title="animation和transition"></a>animation和transition</h4><h4 id="几个像素和viewport的关系"><a href="#几个像素和viewport的关系" class="headerlink" title="几个像素和viewport的关系"></a>几个像素和viewport的关系</h4><p>物理像素，指的是一个设备屏幕有多少个物理点，比如pc是1080 <em> 1920表示横向有1920个像素（系统本身不缩放的情况下）。有些设备屏幕是高清屏，用了多个物理像素来展示一个逻辑像素，称为像素比DPR，设备的DPR是固定的，比如苹果某些是2，有些设备是3。莫、默认情况下1 css px = 1 物理像素 </em> DPR（也就是所谓的设备像素，后文中device-width），但是又出现了缩放的场景， 这个时候 1 css px  = 1 物理像素 <em> DPR </em> 2。</p><p>layoutview， 浏览器默认的窗口的大小，980px（css像素），如果不手动指定视图大小，浏览器会按照这个展示<br>visual view  可视窗口，总是理想窗口 / 缩放<br>ideal view   理想窗口，总是和设备像素相同</p><p>在移动端中，大部分设备的DPR是固定的，设备像素也是固定的。但是在pc端因为2k和4k屏的出现，可以动态的调整DPR值，所以现在pc端也需要注意高清屏的问题</p><p>我们在css中接触的总是css像素。下面举一个例子子来加强理解<br>设置 <strong><meat name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1, minimum-scale=1"></meat></strong><br>如果上面的设备的DPR是2，物理像素是750，设备像素就是375，<br>这个时候1css像素就是 1 物理像素 <em> DPR </em> scale(1)就是1设备像素</p><p>再考虑视图的问题，上面因为同时设置了width 和 scale，按照谁大取谁的方式，刚好device-width 和 initial-scale相同，所以layoutview是375px，如果页面中有元素设置500px，就会出现滚动条。可视区域的大小总是设备像素375px;换算成css就是375</p><p>将scale = 2，这个时候因为width还是375，但是 initial-scale * ideal view = 750 大于375，所以最终的layoutview是750px。可视区域也变成了 375 / 2，所以滚动条会有 1 / 4</p><h4 id="1px-解决"><a href="#1px-解决" class="headerlink" title="1px 解决"></a>1px 解决</h4><p>设计稿是750px, 750px中除了一个1px的，映射到实机就是0.5px，css不支持0.5px设置，有两种推荐的方案，第一个是通过transform: scale()来缩放。第二个是直接不用设备独立像素，把手机的像素扩展到最大，比如750px的设计稿，直接将取消缩放，让界面也是750px宽，在这个基础上再做rem等比的缩放。推荐第二种。</p><h4 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h4><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><h4 id="全屏滚动和视差滚动"><a href="#全屏滚动和视差滚动" class="headerlink" title="全屏滚动和视差滚动"></a>全屏滚动和视差滚动</h4><h3 id="js基础"><a href="#js基础" class="headerlink" title="js基础"></a>js基础</h3><h4 id="执行上下文是啥，三大上下文类型，上下文的三大要素"><a href="#执行上下文是啥，三大上下文类型，上下文的三大要素" class="headerlink" title="执行上下文是啥，三大上下文类型，上下文的三大要素"></a>执行上下文是啥，三大上下文类型，上下文的三大要素</h4><h4 id="词法作用域和语法作用域，为什么js是词法作用域"><a href="#词法作用域和语法作用域，为什么js是词法作用域" class="headerlink" title="词法作用域和语法作用域，为什么js是词法作用域"></a>词法作用域和语法作用域，为什么js是词法作用域</h4><h4 id="this的绑定规则，bind后还能修改this吗（使用call修改）"><a href="#this的绑定规则，bind后还能修改this吗（使用call修改）" class="headerlink" title="this的绑定规则，bind后还能修改this吗（使用call修改）"></a>this的绑定规则，bind后还能修改this吗（使用call修改）</h4><h4 id="箭头函数中的上下文深入理解，实现一个调整箭头函数this绑定的函数"><a href="#箭头函数中的上下文深入理解，实现一个调整箭头函数this绑定的函数" class="headerlink" title="箭头函数中的上下文深入理解，实现一个调整箭头函数this绑定的函数"></a>箭头函数中的上下文深入理解，实现一个调整箭头函数this绑定的函数</h4><h4 id="作用域链是什么"><a href="#作用域链是什么" class="headerlink" title="作用域链是什么"></a>作用域链是什么</h4><h4 id="原型链是什么"><a href="#原型链是什么" class="headerlink" title="原型链是什么"></a>原型链是什么</h4><h4 id="如何实现继承，继承的几种方式对比"><a href="#如何实现继承，继承的几种方式对比" class="headerlink" title="如何实现继承，继承的几种方式对比"></a>如何实现继承，继承的几种方式对比</h4><h4 id="class继承和原型继承的区别"><a href="#class继承和原型继承的区别" class="headerlink" title="class继承和原型继承的区别"></a>class继承和原型继承的区别</h4><h4 id="几个原型相关的对象API"><a href="#几个原型相关的对象API" class="headerlink" title="几个原型相关的对象API"></a>几个原型相关的对象API</h4><h4 id="原型中的属性代理如何实现的"><a href="#原型中的属性代理如何实现的" class="headerlink" title="原型中的属性代理如何实现的"></a>原型中的属性代理如何实现的</h4><h4 id="实现一个instanceof-简单描述typeof-和-Object-prototype-toString-call"><a href="#实现一个instanceof-简单描述typeof-和-Object-prototype-toString-call" class="headerlink" title="实现一个instanceof, 简单描述typeof 和 Object.prototype.toString.call()"></a>实现一个instanceof, 简单描述typeof 和 Object.prototype.toString.call()</h4><h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>#### </p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="几个有关原型的方法"><a href="#几个有关原型的方法" class="headerlink" title="几个有关原型的方法"></a>几个有关原型的方法</h4><h4 id="属性控制器"><a href="#属性控制器" class="headerlink" title="属性控制器"></a>属性控制器</h4><h4 id="可迭代对象的总结，如何快速转换成数组等。"><a href="#可迭代对象的总结，如何快速转换成数组等。" class="headerlink" title="可迭代对象的总结，如何快速转换成数组等。"></a>可迭代对象的总结，如何快速转换成数组等。</h4><h4 id="判断变量类型的的方法"><a href="#判断变量类型的的方法" class="headerlink" title="判断变量类型的的方法"></a>判断变量类型的的方法</h4><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><h4 id="完整的描述一次vue的流程"><a href="#完整的描述一次vue的流程" class="headerlink" title="完整的描述一次vue的流程"></a>完整的描述一次vue的流程</h4><h4 id="watch、compouted，以及watcher"><a href="#watch、compouted，以及watcher" class="headerlink" title="watch、compouted，以及watcher"></a>watch、compouted，以及watcher</h4><h4 id="响应式建立过程，两个Dep的原理"><a href="#响应式建立过程，两个Dep的原理" class="headerlink" title="响应式建立过程，两个Dep的原理"></a>响应式建立过程，两个Dep的原理</h4><h4 id="set和array-push的原理"><a href="#set和array-push的原理" class="headerlink" title="$set和array.push的原理"></a>$set和array.push的原理</h4><h4 id="keep-alive-原理"><a href="#keep-alive-原理" class="headerlink" title="keep-alive 原理"></a>keep-alive 原理</h4><h4 id="异步组件的原理"><a href="#异步组件的原理" class="headerlink" title="异步组件的原理"></a>异步组件的原理</h4><h4 id="手动派发更新的流程"><a href="#手动派发更新的流程" class="headerlink" title="手动派发更新的流程"></a>手动派发更新的流程</h4><h4 id="vue对象如何转换成vnode"><a href="#vue对象如何转换成vnode" class="headerlink" title="vue对象如何转换成vnode"></a>vue对象如何转换成vnode</h4><h4 id="异步队列和nexttick原理"><a href="#异步队列和nexttick原理" class="headerlink" title="异步队列和nexttick原理"></a>异步队列和nexttick原理</h4><h4 id="数据请求在created和mounted的区别"><a href="#数据请求在created和mounted的区别" class="headerlink" title="数据请求在created和mounted的区别"></a>数据请求在created和mounted的区别</h4><h4 id="vue-prop原理"><a href="#vue-prop原理" class="headerlink" title="vue prop原理"></a>vue prop原理</h4><h4 id="vue-事件原理"><a href="#vue-事件原理" class="headerlink" title="vue 事件原理"></a>vue 事件原理</h4><h4 id="patch-全流程"><a href="#patch-全流程" class="headerlink" title="patch 全流程"></a>patch 全流程</h4><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><h4 id="类型兼容、结构类型和层级类型"><a href="#类型兼容、结构类型和层级类型" class="headerlink" title="类型兼容、结构类型和层级类型"></a>类型兼容、结构类型和层级类型</h4><h4 id="ts几个经典的体操类型"><a href="#ts几个经典的体操类型" class="headerlink" title="ts几个经典的体操类型"></a>ts几个经典的体操类型</h4><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><h3 id="JSON-SCHEMA"><a href="#JSON-SCHEMA" class="headerlink" title="JSON SCHEMA"></a>JSON SCHEMA</h3><h4 id="json-schema-所有属性"><a href="#json-schema-所有属性" class="headerlink" title="json schema 所有属性"></a>json schema 所有属性</h4><h4 id="json-schema-解析流程"><a href="#json-schema-解析流程" class="headerlink" title="json schema 解析流程"></a>json schema 解析流程</h4><h4 id="组件编排设计"><a href="#组件编排设计" class="headerlink" title="组件编排设计"></a>组件编排设计</h4><h3 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h3><h4 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call, apply, bind"></a>call, apply, bind</h4><h4 id="实现promise"><a href="#实现promise" class="headerlink" title="实现promise"></a>实现promise</h4><h4 id="实现debounce-和-throlle"><a href="#实现debounce-和-throlle" class="headerlink" title="实现debounce 和 throlle"></a>实现debounce 和 throlle</h4><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h4 id="判断对象的类型，toString-实现"><a href="#判断对象的类型，toString-实现" class="headerlink" title="判断对象的类型，toString 实现"></a>判断对象的类型，toString 实现</h4><h4 id="快速排序和归并排序"><a href="#快速排序和归并排序" class="headerlink" title="快速排序和归并排序"></a>快速排序和归并排序</h4><h4 id="递归和迭代优化"><a href="#递归和迭代优化" class="headerlink" title="递归和迭代优化"></a>递归和迭代优化</h4><h4 id="实现一个发布订阅模式"><a href="#实现一个发布订阅模式" class="headerlink" title="实现一个发布订阅模式"></a>实现一个发布订阅模式</h4><h4 id="实现观察者模式"><a href="#实现观察者模式" class="headerlink" title="实现观察者模式"></a>实现观察者模式</h4><h4 id="实现责任链模式"><a href="#实现责任链模式" class="headerlink" title="实现责任链模式"></a>实现责任链模式</h4><h4 id="实现状态机模式"><a href="#实现状态机模式" class="headerlink" title="实现状态机模式"></a>实现状态机模式</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浏览器和网络&quot;&gt;&lt;a href=&quot;#浏览器和网络&quot; class=&quot;headerlink&quot; title=&quot;浏览器和网络&quot;&gt;&lt;/a&gt;浏览器和网络&lt;/h3&gt;&lt;h4 id=&quot;浏览器的进程有哪些，分别作用&quot;&gt;&lt;a href=&quot;#浏览器的进程有哪些，分别作用&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一起写UI库（三）----栅格布局</title>
    <link href="https://blog.xunserver.cn/archives/179039cd.html"/>
    <id>https://blog.xunserver.cn/archives/179039cd.html</id>
    <published>2022-12-24T11:33:14.000Z</published>
    <updated>2022-12-24T11:33:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>实现一个UI库都具备的栅格系统，用于快速实现一个响应式的布局，栅格系统有如下特性</p><ul><li>具备一个row容器和一系列的col单元格，当然，col单独存在时也需要能正常展示</li><li>24个单元格，更加精细化的展示，同时还需要能够在单元格之间有空隙</li><li>单元格除了正常的排列外还需要具备偏移和排序功能</li><li>响应式布局也是必不可少的</li><li>新的框架也要是一个能够利用新特性的来实现栅格的，拥抱新特性</li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="基于float"><a href="#基于float" class="headerlink" title="基于float"></a>基于float</h4><p>首先实现一个简单的row，row根据不同设备大小定义，宽度100%<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="selector-class">.clearfix</span>();</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@unit-count:</span> <span class="number">24</span>;</span><br><span class="line">    <span class="variable">@unit-width:</span> (<span class="number">100%</span> / <span class="variable">@unit-count</span>)</span><br><span class="line">    .col &#123;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    &#125;</span><br><span class="line">    each(range(<span class="variable">@unit-count</span>), &#123;</span><br><span class="line">        .col-<span class="variable">@&#123;value&#125;</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: (<span class="variable">@unit-width</span> * <span class="variable">@value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加上间隔，假设间隔添加为12px，而且间隔还需要是首尾无间隔，中间的间隔相同<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以按照下面写</span></span><br><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">6px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>栅格系统的偏移指的是在原有位置上平移，如果有重复会直接覆盖。排序会使最终的效果按照css不是html实现，我们定义通过col-offset-4 表示在原有的位置上向右偏移4个单元格。定义col-push-4表示从第四个单元格开始布局<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">each</span>(range(<span class="variable">@unit-count</span>), &#123;</span><br><span class="line">    <span class="selector-class">.col-offset-</span><span class="variable">@&#123;value&#125;</span> &#123;</span><br><span class="line">        <span class="comment">// 偏移的关键通过相对定位 不会影响到其他</span></span><br><span class="line">        <span class="attribute">left</span>: <span class="variable">@value</span> * <span class="variable">@unit-width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .col-push-<span class="variable">@&#123;value&#125;</span> &#123;</span><br><span class="line">        <span class="comment">// 排序的关键是marigin，通过margin会影响到后面所有的</span></span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="variable">@value</span> * <span class="variable">@unit-width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="bootstrap实现栅格系统"><a href="#bootstrap实现栅格系统" class="headerlink" title="bootstrap实现栅格系统"></a>bootstrap实现栅格系统</h4><p>主要是参考bootstrap的栅格系统，bootstrap栅格系统由container、row和col组成。规定col必须包含在row中，row可以包含在container或者另一个col中。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span><span class="attribute">-sizes</span>: &#123;</span><br><span class="line">    <span class="attribute">sm</span>: <span class="number">768px</span></span><br><span class="line">    <span class="attribute">md</span>: <span class="number">992px</span>;</span><br><span class="line">    <span class="attribute">lg</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">xs</span>: <span class="number">1920px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@media-sizes</span>[sm]) &#123;</span><br><span class="line">    <span class="comment">// 总是在两边空出一定间隔，避免撑满</span></span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">@media-sizes</span>[sm] - <span class="number">18px</span>; <span class="comment">// 750px;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@media-sizes</span>[md]) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">@media-size</span>[md] - <span class="number">22px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@media-sizes</span>[lg]) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">@media-size</span>[md] - <span class="number">30px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">// 额外增加了15px的间隔</span></span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.row</span> &#123;</span><br><span class="line">        <span class="comment">// 抵消到container额外增加的padding的</span></span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">margin-right</span>: -<span class="number">15px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.col</span> &#123;</span><br><span class="line">        <span class="comment">// 因为这个地方总是增加了15的padding，为了方便col本身也作为container 容器使用, 也能实现间隔</span></span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">15px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="基于flex实现栅格系统"><a href="#基于flex实现栅格系统" class="headerlink" title="基于flex实现栅格系统"></a>基于flex实现栅格系统</h4><p>bootstrap栅格系统的神，目前bootstrap4 和 bootstrap5采用的方式就是flex的方式实现栅格，整理借鉴一下。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> auto</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">each</span>(range(<span class="variable">@unit-count</span>), &#123;</span><br><span class="line">    <span class="selector-class">.col-</span><span class="variable">@&#123;value&#125;</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">@unit-width</span> * <span class="variable">@value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="迁移到ui框架"><a href="#迁移到ui框架" class="headerlink" title="迁移到ui框架"></a>迁移到ui框架</h3><p>前面我们的设计都是在style上面作文章，实际栅格系统这种东西也就是style，没有交互，迁移到UI框架需要开放一些定制能力，比如栅格的间隔大小，栅格的个数，这个是单纯的样式系统不能实现的</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h3><ol><li><p>在less中使用计算时，有时会碰到变量不计算的问题(被处理成了宏，直接替换了)，使用括号包括强制计算</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@unit-count:</span> <span class="number">10</span>;</span><br><span class="line"><span class="variable">@unit-width:</span> <span class="number">100%</span> / <span class="number">10</span></span><br><span class="line"></span><br><span class="line">.col &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@unit-width</span> * <span class="number">5</span>  <span class="comment">// 理想应该输出 50   实际会输出 100% / 10 * 5</span></span><br><span class="line">    <span class="attribute">width</span>: (<span class="variable">@unit-width</span> * <span class="number">5</span>)  <span class="comment">// 强制计算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>less中没有slot功能，比如想在@media将内容整个嵌入，还没找到办法实现</p></li><li><p>嵌套选择器没法跳过，这个还没找到功能</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-b</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里我只想最终的输出如下</span></span><br><span class="line"><span class="selector-class">.a-b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实际上会输出如下</span></span><br><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.a-b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果选择更上一级的父选择器, 这个目前已经解决，通过将&amp;赋值实现</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;实现一个UI库都具备的栅格系统，用于快速实现一个响应式的布局，栅格系统有如下特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具备一个row容器和一系列的co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>硬盘分区和卷</title>
    <link href="https://blog.xunserver.cn/archives/7b2d2672.html"/>
    <id>https://blog.xunserver.cn/archives/7b2d2672.html</id>
    <published>2022-12-21T02:19:05.000Z</published>
    <updated>2022-12-21T02:19:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录下平常工作中接触的硬盘、分区和卷等概念，同时理解下电视盒子和各种中路由中分区的作用</p><h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><p>大部分场景中硬盘和磁盘多理解成物理的设备。我们常见的机械硬盘，固态硬盘。根据接口不同又有sata盘，m2盘，m2-sata盘。<br>在linux中 /dev/sda /dev/sdb 就表示的两个磁盘</p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>通常情况下，硬盘不能直接使用，op总是只能识别特定的文件系统。通过对硬盘进行划分成不同的区域，对不同的区域进行不同的格式为不同的文件系统。</p><p>分区有MBR分区和GPT分区（重装系统的会经常看到），前者是老协议，后者较新，目前基本都是GPT</p><p>MBR(master boot record) 主引导记录，使用硬盘的第一个扇区来记录硬盘分区信息。其中64B记录的是4个分区表，所以MBR的硬盘最多只能有4个主分区。或者3个主分区加一个扩展分区（扩展分区中再分区成逻辑分区才能使用）。分区表中记录的起始分区起始扇区和终止扇区，由于分区表大小有限，所以MBR分区不能识别2T以上的硬盘<br>除此之外起始扇区中还记录了主引导程序(446)</p><p>GPT(GUID partition table) 全局分区表 GPT在硬盘的首尾都记录了关键信息，GPT中分区表大小是不是固定的。</p><h3 id="卷"><a href="#卷" class="headerlink" title="卷"></a>卷</h3><p>卷是一个或者多个的分区组成的帮助操作系统管理的逻辑分组，windows中我们看到的卷和分区是相同，一个卷就包含一个分区，也能创建一个包含多个分区的卷，并且多个分区可以不是连续分区。</p><p>所以分区是连续的，但是卷不一定是连续的。</p><h3 id="系统分区、启动分区和活动分区"><a href="#系统分区、启动分区和活动分区" class="headerlink" title="系统分区、启动分区和活动分区"></a>系统分区、启动分区和活动分区</h3><p>系统分区指的是具有的引导程序的分区，启动分区是具有操作系统的分区，活动分区只能是主分区，而且一个硬盘只能有一个活动分区。分区表80开头的是活动分区。活动分区一定指向的是系统分区</p><h3 id="电脑系统启动流程"><a href="#电脑系统启动流程" class="headerlink" title="电脑系统启动流程"></a>电脑系统启动流程</h3><p>MBR的方式启动。bios中选择启动哪个硬盘，启动硬盘中MBR存放的第一个引导程序，第一引导程序可能直接引导系统，也可能继续查找其他的主分区的引导程序。所以MBR的如果是单硬盘双系统不能定制图形化比较大的引导程序</p><p>GPT的方式会查询硬盘中的各个分区中的EFI/boot/bootx64.efi文件做为引导项。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录下平常工作中接触的硬盘、分区和卷等概念，同时理解下电视盒子和各种中路由中分区的作用&lt;/p&gt;
&lt;h3 id=&quot;硬盘&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>每日一个linux命令</title>
    <link href="https://blog.xunserver.cn/archives/540c0c41.html"/>
    <id>https://blog.xunserver.cn/archives/540c0c41.html</id>
    <published>2022-12-20T12:59:41.000Z</published>
    <updated>2022-12-20T12:59:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>记录一下在开发中常用的linux命名</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>查找文件系统的中文件，默认查询的是目录以及子目录。</p><pre><code>find path [option]</code></pre><p>常见使用如下<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询指定目录不含子目录中 包含的.bat脚本文件</span></span><br><span class="line">find ./some-path --maxdepth 1 --name <span class="string">"*.bat"</span>   <span class="comment"># 支持的是基础通配符</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录一下在开发中常用的linux命名&lt;/p&gt;
&lt;h3 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通配符</title>
    <link href="https://blog.xunserver.cn/archives/aecba7e5.html"/>
    <id>https://blog.xunserver.cn/archives/aecba7e5.html</id>
    <published>2022-12-06T08:18:35.000Z</published>
    <updated>2022-12-06T08:18:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开发中常用到各种通配符，目前通配符规范较多，有linux通配符，也有nodejs通配符。简单记录一下区别和各自的使用场景，</p><h1 id="linux通配符"><a href="#linux通配符" class="headerlink" title="linux通配符"></a>linux通配符</h1><ul><li>* 匹配零个或者多个字符，但是不匹配”.”开头的文件, 也不会匹配/之外的内容（限制在单个路径）</li><li>? 匹配任何单个字符</li><li>~yang 用户杨根目录</li><li>[0-9] 匹配0-9 一次</li><li>[!0-9] 不匹配0-9一次</li></ul><p>linux是先匹配再执行。比如touch *.txt。先匹配发现没有则不执行。</p><p>touch {1..9}.txt 先解开大括号创建1到9的txt</p><p>后来bash又在这个基础上扩展了几个语法</p><ul><li><strong> 跨目录匹配，也是先按照目录展开模式再匹配    ls <em>/</em>.* 和 ls </strong>/<em>.</em> 有区别</li><li>{a,b,c} 重复执行匹配模式，先展开大括号再执行*等匹配</li><li>{a..c} 重复执行a到c之间的匹配模式</li><li>?(parttern-list) 匹配一次括号里面的模式</li><li>*(parttern-list) 匹配0次或者多次</li><li>+(parttern-list) 匹配一次或者多次</li><li>@(parttern-list) 匹配一次</li><li>!(parttern-list) 不匹配</li></ul><p>回到开头node中大部分都使用的是扩展后的语法，而且是自行实现，不和平台挂钩。但是我们在命令行中执行命令时根据使用shell的版本，有可能没有实现一些扩展语法</p><p>比如在rimraf中删除东西 rimraf *<em>/node_modules 有可能就不会删除，因为没有实现\</em>* 语法。</p><p>还有一个坑是npm中执行脚本，npm执行脚本不一定会在当前的shell执行，有可能会在其他的shell。就会出现glob语法和在命令行执行不一致的情况，比如上面的rimraf。<br>大部分工具目前都是用的自定义的glob，通过将glob用引号包裹起来可以避免shell的glob模式</p><p><a href="https://medium.com/@jakubsynowiec/you-should-always-quote-your-globs-in-npm-scripts-621887a2a784" target="_blank" rel="noopener">npm 中一定要用引号包裹</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;开发中常用到各种通配符，目前通配符规范较多，有linux通配符，也有nodejs通配符。简单记录一下区别和各自的使用场景，&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://blog.xunserver.cn/archives/f255ffad.html"/>
    <id>https://blog.xunserver.cn/archives/f255ffad.html</id>
    <published>2022-12-05T13:56:44.000Z</published>
    <updated>2022-12-05T13:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>经常用docker，但是从来没有系统性的总结过docker满足生产力需要掌握的内容</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>docker可以理解为一个具有初始操作的快照模版，docker通过运行一个镜像生成容器。</p><ul><li>docker pull nodejs 拉取镜像</li><li>docker images 或者 docker ls 查看本地镜像</li><li>docker image rm xx-image</li></ul><h4 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;</span></span><br><span class="line"><span class="string">  "</span>registry-mirrors<span class="string">": [</span></span><br><span class="line"><span class="string">    "</span>https://hub-mirror.c.163.com<span class="string">",</span></span><br><span class="line"><span class="string">    "</span>https://mirror.baidubce.com<span class="string">"</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;"</span> &gt;&gt; /etc/daemon.json</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器相当于镜像的实例化，每个容器都是一个进程，如果想让容器一直存在需要容器的启动进程一直存在。</p><ul><li>docker container ls 查看当前系统的容器</li><li>docker run –name somename -it –rm -p -v –mount –link -d –restart。<ul><li>-p 本地端口:容器内端口；</li><li>-v 本地本地路径（绝对路劲）|数据卷:容器内路径</li><li>–mount source=some-volumn,target=/var/xxx  绑定本地目录或者数据卷</li><li>-it 绑定本地的输入输出</li><li>–rm 容器终止后删除容器</li><li>–restart always 容器总是重启</li><li>–link 添加另一个容器来组成网络(总是或默认创建一个容器网络)</li></ul></li><li>docker container inspect xxx 查看容器具体信息</li><li>docker container exec  xx -it sh 容器执行某个新命令，常用于进入容器查看信息</li></ul><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>docker 数据卷（相当于一个目录）可用在多个容器之前共享，不会随着容器终止而清空内容，通过–mount 或者-v 绑定到容器中</p><ul><li>docker volume xxxname</li><li>docker volume inspect xxx 查看某个数据卷，主要查看存放位置等。</li></ul><h3 id="docker-网络"><a href="#docker-网络" class="headerlink" title="docker 网络"></a>docker 网络</h3><ul><li>docker network ls 查看所有的网络</li><li>docker network create -d bridge xxx 创建一个桥接网络（一个新的网络，桥接在原host上面的）</li></ul><p>docker 在安装时默认会生成host和bridge两个网络。重点是bridge网络，通过虚拟网桥docker0和容器的网口连接，虚拟网桥又通过宿主机的iptable进行转发。</p><p>我们每创建一个网络就相当于开了一个子网，可以自定义网关和子网范围</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>docker 能够从Dockerfile文件创建镜像，一般社区中的镜像大部分都是Dockerfile创建，Dockerfile是由一系列指令构成，每一个指令都会构建一层，指令不要太多，功能类似的指令尽量放到一层</p><ul><li>FROM 镜像基础来源，可以是另一个镜像</li><li>RUN 执行命令， 尽量将多个指令合并 &amp;&amp; \</li><li>COPY 复制目录或者文件到镜像中，支持linux通配符 COPY home* /user/src/home, 会自动创建目录，而且会保留文件的元数据（权限等）</li><li>ADD 如果是URL，会直接下载文件（权限600），如果是压缩包会解压。ADD指令不会缓存， 每次都会重新构建。总是使用COPY，需要解压时才使用ADD</li><li>CMD 容器的启动命令，容器总是需要一个默认启动命令 CMD [“nginx”, “-g”, “xx”]</li><li>ENTRYPOINT 如果指明了该项，CMD会作为ENTRYPOINT的参数拼接在后面，常用实现一个命令行工具，比如ENTRYPOINT实现指令 CMD实现参数</li><li>ENV配置镜像默认环境变量，</li><li>ARG 配置在构建过程中的环境变量，而且只在FROM后生效用于辅助构建。但是不会存在到镜像中。比如声明一些变量</li><li>VOLUME 定义匿名卷，VOLUME /data 将/data挂载到匿名卷中，如果容器启动时没有指明卷，就会匿名生成一个，所以不是很关注的卷不需要自己再挂载目录</li><li>EXPOSE 声明容器内部暴露的端口</li><li>WORKDIR 声明每个指令镜像内的工作目录（和build时分开），注意在dockerfile中下面不会工作，因为每条指令是单独的，不会共享<br>  RUN cd /app<br>  RUN echo “sdf” &gt; xx.txt </li><li>USER 指定当前指令之后所有的指令的user，同样也是要在FROM后，而且系统中必须要先创建这个角色</li><li>SHELL 指定RUN ENTRYPOINT CMD指令在哪个shell下运行。默认是[“/bin/sh”, “-c”]</li></ul><h4 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h4><p>如果不用多阶段构建，需要将上一个容器的内容拷贝(docker cp)到宿主机，再用COPY拷贝到下一个阶段的容器中去<br>FROM ubuntu:lasted as builder<br>WORKDIR /app/data<br>COPY ./test ./test<br>RUN npm build<br>FROM ubuntu:lasted as builder  // 需要和上面一个FROM相同<br>RUN npm run deploy</p><p>docker build -f xxxdockerfile -t nginx:tag ./xxx –target builder<br>注意最后一个./xx 表示构建过程中的上下文，比如COPY ./local/xxx /app 表示的是.local的相对位置， docker会将上下文目录中所有内容拷贝到镜像中，通过.dockerignore忽略部分文件</p><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h3><p>docker compose文件主要由两部分组成，公共部分和容器部分。公共部分指明当前compose需要创建的网络，数据卷等。容器部分和启动容器类似</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;经常用docker，但是从来没有系统性的总结过docker满足生产力需要掌握的内容&lt;/p&gt;
&lt;h3 id=&quot;镜像&quot;&gt;&lt;a href=&quot;#镜像
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>脚本大全</title>
    <link href="https://blog.xunserver.cn/archives/b7b7cac5.html"/>
    <id>https://blog.xunserver.cn/archives/b7b7cac5.html</id>
    <published>2022-12-05T13:46:16.000Z</published>
    <updated>2022-12-05T13:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "registry-mirrors": [</span></span><br><span class="line"><span class="string">    "https://hub-mirror.c.163.com",</span></span><br><span class="line"><span class="string">    "https://mirror.baidubce.com"</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;'</span> &gt;&gt; /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">DOCKER_CONFIG=/usr/<span class="built_in">local</span>/lib/docker/cli-plugins</span><br><span class="line">sudo mkdir -p <span class="variable">$DOCKER_CONFIG</span>/cli-plugins</span><br><span class="line">sudo curl -SL https://download.fastgit.org/docker/compose/releases/download/v2.6.1/docker-compose-linux-x86_64 -o <span class="variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose</span><br><span class="line">chmod +x <span class="variable">$DOCKER_CONFIG</span>/cli-plugins</span><br><span class="line">docker compose version</span><br></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker compose"></a>安装docker compose</h3><h3 id="部署jenkins"><a href="#部署jenkins" class="headerlink" title="部署jenkins"></a>部署jenkins</h3><p>命令行部署<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir jenkins</span><br><span class="line">chmod 777 jenkins</span><br><span class="line">cd jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 记录下面的密码</span></span><br><span class="line">docker run --name jenkins -p 8080:8080 -p 50000:50000 -v $PWD:/var/jenkins_home --rm -it jenkins/jenkins:lts-jdk11</span><br><span class="line">docker run --name jenkins -p 8080:8080 -p 50000:50000 -v $PWD:/var/jenkins_home -d --restart always jenkins/jenkins:lts-jdk11</span><br></pre></td></tr></table></figure></p><p>使用docker compose部署<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">    jenkins_home:</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    jenkins:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">jenkins/jenkins:lts-jdk11</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"50000:50000"</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="attr">            - jenkins_home:</span><span class="string">/var/jenkins_home</span></span><br></pre></td></tr></table></figure></p><h3 id="部署snoar"><a href="#部署snoar" class="headerlink" title="部署snoar"></a>部署snoar</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  sonarqube:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">sonarqube:community</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">sonarqube</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">sonarqube</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      SONAR_JDBC_URL:</span> <span class="attr">jdbc:postgresql://db:5432/sonar</span></span><br><span class="line"><span class="attr">      SONAR_JDBC_USERNAME:</span> <span class="string">sonar</span></span><br><span class="line"><span class="attr">      SONAR_JDBC_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - sonarqube_data:</span><span class="string">/opt/sonarqube/data</span></span><br><span class="line"><span class="attr">      - sonarqube_extensions:</span><span class="string">/opt/sonarqube/extensions</span></span><br><span class="line"><span class="attr">      - sonarqube_logs:</span><span class="string">/opt/sonarqube/logs</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"9000:9000"</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">postgres:12</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">postgresql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      POSTGRES_USER:</span> <span class="string">sonar</span></span><br><span class="line"><span class="attr">      POSTGRES_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line"><span class="attr">      POSTGRES_DB:</span> <span class="string">sonar</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - postgresql:</span><span class="string">/var/lib/postgresql</span></span><br><span class="line"><span class="attr">      - postgresql_data:</span><span class="string">/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  jenkins:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">jenkins/jenkins:lts-jdk11</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"50000:50000"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">        - jenkins_home:</span><span class="string">/var/jenkins_home</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  sonarqube_data:</span></span><br><span class="line"><span class="attr">  sonarqube_extensions:</span></span><br><span class="line"><span class="attr">  sonarqube_logs:</span></span><br><span class="line"><span class="attr">  postgresql:</span></span><br><span class="line"><span class="attr">  postgresql_data:</span></span><br><span class="line"><span class="attr">  jenkins_home:</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line">docker compose up </span><br><span class="line">docker compose start</span><br></pre></td></tr></table></figure><h3 id="搭建内网测速服务器"><a href="#搭建内网测速服务器" class="headerlink" title="搭建内网测速服务器"></a>搭建内网测速服务器</h3><pre><code>docker run -it --rm --name speedtest -p 9100:80 adolfintel/speedtestdocker run --name speedtest -p 9100:80 --restart always -d adolfintel/speedtest</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>doc 和 git submodule</title>
    <link href="https://blog.xunserver.cn/archives/7bf438f9.html"/>
    <id>https://blog.xunserver.cn/archives/7bf438f9.html</id>
    <published>2022-12-02T09:31:02.000Z</published>
    <updated>2022-12-02T09:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于搞了一些开源工具，需要一个统一的文档管理，入了vitepress写文档的坑。目前的开源内容有一系列的config文件，集中在@xunserver/config 这个仓库中，通过pnpm管理，每个包都有自己的reameme.md 和changelog.md。<br>还有个仓库存放了icon,style和vui的代码，目前有下面的痛点。</p><ol><li>doc是一个单独仓库只存放文档，文档中还需要引入各个包的readme.md已经changelog。</li><li>除了changelog外，对vui的还需要进行组件的引入，对于style还需要样式的引入。</li><li>目前的doc和vui存放在一起通过pnpm的方式引入。</li></ol><h3 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h3><p>git submodule 相当于将某个仓库的某个commit作为模块添加项目中，而且对项目透明，项目本身不能去修改。</p><h4 id="git-submodule-add"><a href="#git-submodule-add" class="headerlink" title="git submodule add"></a>git submodule add</h4><p>添加submodule到项目中，执行后git 会下载子模块到项目中。同时生成.gitmodule文件来记录关系</p><h4 id="git-submodule-init"><a href="#git-submodule-init" class="headerlink" title="git submodule init"></a>git submodule init</h4><p>根据.gitmodule文件下载子项目，通常用来父项目第一次拉取后</p><h4 id="git-submodule-deinit"><a href="#git-submodule-deinit" class="headerlink" title="git submodule deinit"></a>git submodule deinit</h4><p>清空子项目代码但是不删除.gitmodule中的关系</p><h4 id="git-submodule-update"><a href="#git-submodule-update" class="headerlink" title="git submodule update"></a>git submodule update</h4><p>根据.gitmodule 中记录的子项目的commit下载子项目的代码，通过git submodule update –remote 总是根据远端的来下载。通常情况下如果子项目更新后，父项目能够感知到子项目的最新commit，并且会生成一个差异文件，如果差异文件被提交。另一个合作伙伴需要根据最新的commit的下载代码</p><h4 id="git-submodule-foreach"><a href="#git-submodule-foreach" class="headerlink" title="git submodule foreach"></a>git submodule foreach</h4><p>批量操作子项目，git submodule foreach “echo $name”</p><h4 id="git-rm-path"><a href="#git-rm-path" class="headerlink" title="git rm path"></a>git rm path</h4><p>删除子项目</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>doc文档有两种情况是需要更新的</p><ol><li>相关的readme或者组件变更，doc本身无需变更。这种情况doc设置一个每天自动重新构建即可。</li><li>doc本身需要变更，变更部分内容。这种需要doc发布后触发重新构建</li><li>手动更新</li></ol><h3 id="doc文档"><a href="#doc文档" class="headerlink" title="doc文档"></a>doc文档</h3><p>doc文档使用的vitepress, 可以在文档中直接引入vue3代码，同时还支持markdown引用。这两个可以引入其他的包的说明文档和vui组件的文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于搞了一些开源工具，需要一个统一的文档管理，入了vitepress写文档的坑。目前的开源内容有一系列的config文件，集中在@xunse
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rollup</title>
    <link href="https://blog.xunserver.cn/archives/de3a6b85.html"/>
    <id>https://blog.xunserver.cn/archives/de3a6b85.html</id>
    <published>2022-12-02T09:04:00.000Z</published>
    <updated>2022-12-02T09:04:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>child_process</title>
    <link href="https://blog.xunserver.cn/archives/e4a9508d.html"/>
    <id>https://blog.xunserver.cn/archives/e4a9508d.html</id>
    <published>2022-12-02T02:20:01.000Z</published>
    <updated>2022-12-02T02:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>nodejs 提供创建操作子进程的能力，通过spawn exec fork execFile四个api。后面三个均是spawn的衍生。</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>shell是一个快捷启动进程的壳子，当我们在shell中敲命令（外部命令）时，实际是通过shell作为父进程创建了一个子进程比如 node xxx.js。所以当我们关闭shell窗口时，对应的命令也会kill。没登录一次shell窗口就会产生一个shell进程。具体是哪个shell使用用户自行配置的。</p><p>有时候我们写shell脚本会指定该脚本由哪个shell执行，流程是先打开对应的进程，对应的进程对脚本内容进行处理。</p><h3 id="child-process"><a href="#child-process" class="headerlink" title="child_process"></a>child_process</h3><p>nodejs本身在执行时也是一个进程，如果是被shell直接调用，则是shell的衍生进程。当nodejs通过child_process 创建子进程时，如果有些子进程还需要通过shell来启动，所以还能指定是否启动shell。 主进程关闭后子进程也会关闭。进程需要关注的是以下几个点</p><ol><li>stdout，stdin，stderr 表示进程输入，输出和错误。由于当前的默认情况子进程的stdout,stdin,stderr是pipe，意思是通过管道向外发射。也可以设置为和父进程共享，借助父进程来输入输出</li><li>还有一种IPC子进程，父子进程通过IPC通信，nodejs中是on(‘message’)和send。通过fork创建或者执行std是IPC。 IPC只能用都是node进程的情况下</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> child_process <span class="keyword">from</span> <span class="string">'child_process'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shelljs = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> child = child_process.spawn(<span class="string">'ls'</span>, &#123;</span><br><span class="line">        shell: <span class="literal">true</span></span><br><span class="line">    &#125;, (err, stdin, stdout) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进程追加"><a href="#进程追加" class="headerlink" title="进程追加"></a>进程追加</h3><p>很多情况子进程都是启动后执行完毕就会自动关闭，每次执行上下文不共享。但是也可以启动一个常驻的进程，比如直接启动一个shell。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; spawn, spawnSync &#125; <span class="keyword">from</span> <span class="string">"child_process"</span>;</span><br><span class="line"><span class="keyword">const</span> mergeShellOptions = <span class="function">(<span class="params">...options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, ...options);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getGlobalShell = <span class="function">(<span class="params">(shell</span>) =&gt;</span> (option, config) =&gt; &#123;</span><br><span class="line">  shell = shell || Shell.createShell(option, config);</span><br><span class="line">  <span class="keyword">return</span> shell;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">const</span> getDefaultOption = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  shell: <span class="literal">true</span>,</span><br><span class="line">  stdio: [<span class="string">"pipe"</span>, <span class="string">"inherit"</span>, <span class="string">"inherit"</span>],</span><br><span class="line">  timeout: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">5</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> getBash = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">"win32"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">cmd</span>: <span class="string">"cmd"</span>, <span class="attr">arg</span>: <span class="string">"/C"</span> &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">cmd</span>: <span class="string">"sh"</span>, <span class="attr">arg</span>: <span class="string">"-c"</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultOption = getDefaultOption();</span><br><span class="line">  <span class="keyword">static</span> createShell(option, config) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Shell(option, config);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> exec(cwd, option, config) &#123;</span><br><span class="line">    <span class="keyword">const</span> shell = getGlobalShell(option, config);</span><br><span class="line">    shell.exec(cwd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * shell示例的选项</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  shellOption;</span><br><span class="line">  shell;</span><br><span class="line">  <span class="keyword">constructor</span>(option, config) &#123;</span><br><span class="line">    <span class="keyword">this</span>.shellOption = mergeShellOptions(Shell.defaultOption, option);</span><br><span class="line">    <span class="keyword">this</span>.shell = spawn(getBash().cmd, <span class="keyword">this</span>.shellOption);</span><br><span class="line">  &#125;</span><br><span class="line">  exec(cwd) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(cwd);</span><br><span class="line">    <span class="keyword">this</span>.shell.stdin.write(cwd + <span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  close() &#123;</span><br><span class="line">    <span class="keyword">this</span>.shell.kill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Shell;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;nodejs 提供创建操作子进程的能力，通过spawn exec fork execFile四个api。后面三个均是spawn的衍生。&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>npm包的CI和changeset</title>
    <link href="https://blog.xunserver.cn/archives/69a9cdfe.html"/>
    <id>https://blog.xunserver.cn/archives/69a9cdfe.html</id>
    <published>2022-11-30T03:28:44.000Z</published>
    <updated>2022-11-30T03:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前的config仓库按照monorepo的方式存放的，里面有完全不同种类的的config包，大部分包的依赖的都是独立的,也有部分公共的包比如typescript和prettier。同时各个仓库的发布阶段都是交给github-action在做CI如何设计。</p><h3 id="changeset"><a href="#changeset" class="headerlink" title="changeset"></a>changeset</h3><p>changeset生成能够被消耗的changeset描述文件, 开发自行调整描述文件， changeset version消耗描述文件，调整需要发布的包， changeset publish到各个包发布，流程很简单。<br>按照下面步骤描述下细节</p><ol><li><p>changeset init 初始化changeset配置</p></li><li><p>changeset add 对当前更改新增描述文件，changeset add 会自动的查找到当前的修改的包，前提是没有commit的情况下</p></li><li><p>选择包进入命令式的交互填写，主要写需要更新那些包。通过patch minor 或者major的方式更新包。</p></li><li><p>changeset version消耗刚才描述文件来对包进行version的更新。</p></li><li><p>changeset publish 会到各个包下面进行npm publish，这个步骤也可以通过自行publish实现</p></li></ol><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ol><li>本地修改代码，运行changeset add 生成消耗文件，可以不修改文件，强行生成changeset文件。</li><li>正常上传代码，github action 根据存在pub来决定是否打包</li><li>github action 运行 changeset version 消耗文件同时修改版本号</li><li>运行pnpm -F “[origin/xx]”… run build 来分别执行相关的包的build</li><li>运行pnpm publish -F “[origin/xxx]” 发布包或者[HEAD]…（当前分支比较）</li><li>使用<code>git add -A</code> git commit -m “” git push 推送包， 也可以通过merge来推送包避免多人修改时的问题</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;目前的config仓库按照monorepo的方式存放的，里面有完全不同种类的的config包，大部分包的依赖的都是独立的,也有部分公共的包比
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>重绘回流</title>
    <link href="https://blog.xunserver.cn/archives/f9860ccd.html"/>
    <id>https://blog.xunserver.cn/archives/f9860ccd.html</id>
    <published>2022-11-29T05:10:59.000Z</published>
    <updated>2022-11-29T05:10:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="渲染层-renderLayer"><a href="#渲染层-renderLayer" class="headerlink" title="渲染层 renderLayer"></a>渲染层 renderLayer</h3><p>每一个DOM都会对应一渲染对象(renderObject)，每一个渲染对象在处于不同相同的坐标空间时，就会形成一个RenderLayers渲染层。下面的元素都会生成渲染层。不能开启渲染层的renderObject和其最近一个有渲染层的父节点共享。</p><ol><li>根元素</li><li>有明确定位的属性 position不为static</li><li>opacity &lt; 1</li><li>transform 存在</li><li>overflow 不为visible<h3 id="合成层"><a href="#合成层" class="headerlink" title="合成层"></a>合成层</h3>对于某些符合条件的渲染层会自动处理成合成层，每一个合成层都有一个独立的GraphicsLayer, 不满足和最近一个拥有图形层的共享。<br>下面这些条件能开启图形层</li><li>3D transforms</li><li>video canvas iframe // 即使video没有单独的渲染层，但是video在根元素下，也满足</li><li>will-change 属性</li><li>position:fixed</li><li>对 opacity、transform、fliter、backdropfilter 应用了 animation 或者 transition</li></ol><p>除了显示生成合成层外，还有部分隐式的情况，通过谷歌开发者工具render 和 layers可以看到图层的详细信息</p><p>隐式场景会导致合成层过多的情况下，浏览器出自动层压缩，会将能够合并的合成层压缩到一个图形层中</p><h3 id="图形层-GraphicsLayer"><a href="#图形层-GraphicsLayer" class="headerlink" title="图形层 GraphicsLayer"></a>图形层 GraphicsLayer</h3><p>图形层是最终输出到界面的布局，</p><h3 id="合成层的好处"><a href="#合成层的好处" class="headerlink" title="合成层的好处"></a>合成层的好处</h3><ol><li>合成层是GPU渲染，比较快</li><li>重绘时只会绘制合成层本身</li><li>transform 和 opacity 不会发出重绘</li></ol><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><p>回流指的是layer的重新生成，有以下几种情况会导致回流，注意的回流都是对当前的合成层进行，不会影响到其他的</p><ol><li>首次渲染</li><li>浏览器窗口改变</li><li>元素的位置或者尺寸发生变化</li><li>新增删除可见元素</li><li>元素内容变换</li><li>元素的字体大小发生变化</li><li>激活伪类</li><li>设置style值    // 尽力改css类</li><li>查询元素边界大写</li></ol><p>重绘是指改变visible,outline，背景色等，不会影响的到元素位置的变化。</p><p>我们平常的说的重绘和回流都是针对某一个图形层来说的。 所以优化的思路从两个角度出发。</p><ol><li>尽可能避免回流操作，比如减少style直接js写值，减少对offset的读取。多个新增删除操作合并等。</li><li>如果没办法避免回流操作，尽量将回流的范围缩小，比如将改动的元素提升到合成层中，注意的合成层的条件是现有渲染层，合成层是从渲染层中来的。常见的生成合成的操作有transform: translate3D，或者简单粗暴添加will-change</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;渲染层-renderLayer&quot;&gt;&lt;a href=&quot;#渲染层-renderLayer&quot; class=&quot;headerlink&quot; title=&quot;渲染层 renderLayer&quot;&gt;&lt;/a&gt;渲染层 renderLayer&lt;/h3&gt;&lt;p&gt;每一个DOM都会对应一渲染对象(re
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>keep-alive</title>
    <link href="https://blog.xunserver.cn/archives/c5319648.html"/>
    <id>https://blog.xunserver.cn/archives/c5319648.html</id>
    <published>2022-11-28T08:26:36.000Z</published>
    <updated>2022-11-28T08:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>根据组件的tag和keys来生成具有LRU的缓存的map，通过添加abstract属性，避免出现在$parent链中，每次渲染时总是检查缓存是否存在，如果存在render函数直接返回之前的vnode并添加缓存。返回新的vnode后在keep-alive的patch阶段又会重新走createComponent子组件的操作，就会进入之前的缓存逻辑</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>在当前实例中vnode如果是是组件(keep-alive)，createComponentInstanceForVnode()，示例化keep-alive。keep-alive在初始化中总是绘制触发render-watcher(this.value = this.lazy ? undefined : this.get())。触发了updateComponent(vm._render()), 也就是renderkeep-alive的render函数()</p><p>keep-alive render中，总是检查this.$slots.default(总是一个vnode)的name是否在keep-alive库中，如果在库中检查是否缓存了vnode，没有则缓存，如果有则将componentInstance赋值到组件上，添加vnode.data.keep-alive = true</p><p>在keep-alive 的 createComponent 阶段，由于data.keepAlive 存在并且组件实例存在，直接进入prepatch 阶段，不需要走后面的子组件挂载等操作, 否则按照正常的组件流程走创建子组件挂载等。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>组件的源码比较简单，有两个需要主要的点吗，设置abstract:true 还是能通过parent属性获取到keep-alive组件示例，对于手动的修改缓存队列或者在自定义缓存时有用。keep-alive的render实际是返回一个vnode，如果能够根据key查到缓存则返回之前的vnode。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keep-alive.vue</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> slot = <span class="keyword">this</span>.$slots.default</span><br><span class="line">  <span class="keyword">const</span> vnode: VNode = getFirstComponentChild(slot) <span class="comment">// 找到第一个子组件对象</span></span><br><span class="line">  <span class="keyword">const</span> componentOptions: ?VNodeComponentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class="line">  <span class="keyword">if</span> (componentOptions) &#123; <span class="comment">// 存在组件参数</span></span><br><span class="line">    <span class="comment">// check pattern</span></span><br><span class="line">    <span class="keyword">const</span> name: ?string = getComponentName(componentOptions) <span class="comment">// 组件名</span></span><br><span class="line">    <span class="keyword">const</span> &#123; include, exclude &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="comment">// 条件匹配</span></span><br><span class="line">      <span class="comment">// not included</span></span><br><span class="line">      (include &amp;&amp; (!name || !matches(include, name))) ||</span><br><span class="line">      <span class="comment">// excluded</span></span><br><span class="line">      (exclude &amp;&amp; name &amp;&amp; matches(exclude, name))</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> vnode</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; cache, keys &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> key: ?string = vnode.key == <span class="literal">null</span> <span class="comment">// 定义组件的缓存key</span></span><br><span class="line">      <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">      <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">      ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">      : vnode.key</span><br><span class="line">    <span class="keyword">if</span> (cache[key]) &#123; <span class="comment">// 已经缓存过该组件</span></span><br><span class="line">      vnode.componentInstance = cache[key].componentInstance</span><br><span class="line">      <span class="comment">// make current key freshest</span></span><br><span class="line">      remove(keys, key)</span><br><span class="line">      keys.push(key) <span class="comment">// 调整key排序</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cache[key] = vnode <span class="comment">// 缓存组件对象</span></span><br><span class="line">      keys.push(key)</span><br><span class="line">      <span class="comment">// prune oldest entry</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.max &amp;&amp; keys.length &gt; <span class="built_in">parseInt</span>(<span class="keyword">this</span>.max)) &#123; <span class="comment">// 超过缓存数限制，将第一个删除</span></span><br><span class="line">        pruneCacheEntry(cache, keys[<span class="number">0</span>], keys, <span class="keyword">this</span>._vnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vnode.data.keepAlive = <span class="literal">true</span> <span class="comment">// 渲染和执行被包裹组件的钩子函数需要用到</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vnode || (slot &amp;&amp; slot[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>核心在下面的createComponent中，针对keepAlive包裹的组件，在重新渲染时vnode因为是之前的vnode，会触发init额外的流程。进而直接到prepatch阶段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vnode指的是根据keep-alive render函数得到的包裹组件的vnode，拿到vnode。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComponent</span> (<span class="params">vnode, insertedVnodeQueue, parentElm, refElm</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> i = vnode.data;</span><br><span class="line">      <span class="keyword">if</span> (isDef(i)) &#123;</span><br><span class="line">        <span class="comment">// isReactivated用来判断组件是否缓存。</span></span><br><span class="line">        <span class="keyword">var</span> isReactivated = isDef(vnode.componentInstance) &amp;&amp; i.keepAlive;</span><br><span class="line">        <span class="keyword">if</span> (isDef(i = i.hook) &amp;&amp; isDef(i = i.init)) &#123;</span><br><span class="line">            <span class="comment">// 执行组件初始化的内部钩子 init，下面的componentVNodeHooks.init</span></span><br><span class="line">          i(vnode, <span class="literal">false</span> <span class="comment">/* hydrating */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isDef(vnode.componentInstance)) &#123;</span><br><span class="line">          <span class="comment">// 其中一个作用是保留真实dom到vnode中</span></span><br><span class="line">          initComponent(vnode, insertedVnodeQueue);</span><br><span class="line">          insert(parentElm, vnode.elm, refElm);</span><br><span class="line">          <span class="keyword">if</span> (isTrue(isReactivated)) &#123;</span><br><span class="line">            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> componentVNodeHooks = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params">vnode, hydrating</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        vnode.componentInstance &amp;&amp;</span><br><span class="line">        !vnode.componentInstance._isDestroyed &amp;&amp;</span><br><span class="line">        vnode.data.keepAlive</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// kept-alive components, treat as a patch</span></span><br><span class="line">        <span class="keyword">var</span> mountedNode = vnode; <span class="comment">// work around flow</span></span><br><span class="line">        componentVNodeHooks.prepatch(mountedNode, mountedNode);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 将组件实例赋值给vnode的componentInstance属性</span></span><br><span class="line">        <span class="keyword">var</span> child = vnode.componentInstance = createComponentInstanceForVnode(</span><br><span class="line">          vnode,</span><br><span class="line">          activeInstance</span><br><span class="line">        );</span><br><span class="line">        child.$mount(hydrating ? vnode.elm : <span class="literal">undefined</span>, hydrating);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 后面分析</span></span><br><span class="line">    prepatch: <span class="function"><span class="keyword">function</span> <span class="title">prepatch</span> (<span class="params">oldVnode, vnode</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 新组件实例</span></span><br><span class="line">        <span class="keyword">var</span> options = vnode.componentOptions;</span><br><span class="line">        <span class="comment">// 旧组件实例</span></span><br><span class="line">        <span class="keyword">var</span> child = vnode.componentInstance = oldVnode.componentInstance;</span><br><span class="line">        updateChildComponent(</span><br><span class="line">            child,</span><br><span class="line">            options.propsData, <span class="comment">// updated props</span></span><br><span class="line">            options.listeners, <span class="comment">// updated listeners</span></span><br><span class="line">            vnode, <span class="comment">// new parent vnode</span></span><br><span class="line">            options.children <span class="comment">// new children</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;根据组件的tag和keys来生成具有LRU的缓存的map，通过添加abstract属性，避免出现在$parent链中，每次渲染时总是检查缓存
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>form-data的故事</title>
    <link href="https://blog.xunserver.cn/archives/ff59502f.html"/>
    <id>https://blog.xunserver.cn/archives/ff59502f.html</id>
    <published>2022-11-28T02:42:02.000Z</published>
    <updated>2022-11-28T02:42:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>前端请求中经常碰到content-type，主要需要关注的是以下几种<br>application/json 请求以json的形式上传，后端需要按照的json的方式解析body<br>application/x-www-form-urlencoded 按照key=name&amp;key=name的形式将参数拼接在body中。其中key和name需要用URLSearchParams处理(不能用urlEncodeComponent是历史遗留原因，application/x-www-form-urlencoded 需要将空格转义成+，urlEncodeComponent将空格转义成%20)<br>multipart/form-data boundary=xxxx 将请求按照xxxx分隔包围，每一段包括一个字段.<br>其中每一个keyvalue 也需要转义（空格转+）,这一块比较奇怪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;前端请求中经常碰到content-type，主要需要关注的是以下几种&lt;br&gt;application/json 请求以json的形式上传，后端
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>diff算法</title>
    <link href="https://blog.xunserver.cn/archives/3387ce12.html"/>
    <id>https://blog.xunserver.cn/archives/3387ce12.html</id>
    <published>2022-11-23T03:26:05.000Z</published>
    <updated>2022-11-23T03:26:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单diff"><a href="#简单diff" class="headerlink" title="简单diff"></a>简单diff</h3><p>简单diff的思路是判断新列表的节点是否是递增的，如果不是递增的旧列表中的节点移动到新列表中节点的前一位的后面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reactDiff = <span class="function">(<span class="params">prevVnodeList, newVnodeList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> lastIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newVnodeList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> newVnode = newVnodeList[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; newVnodeList.length; j++) &#123;</span><br><span class="line">            <span class="keyword">const</span> prevVnode = prevVnodeList[j];</span><br><span class="line">            <span class="keyword">if</span>(newVnode.key === prevVnode.key) &#123;</span><br><span class="line">                patchDom(prevVnode, newVnode)</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= lastIndex) &#123;</span><br><span class="line">                    lastIndex = j;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.insertBefore(newVnode.el, newChildren[i<span class="number">-1</span>].el.nextSibling)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="双端diff"><a href="#双端diff" class="headerlink" title="双端diff"></a>双端diff</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单diff&quot;&gt;&lt;a href=&quot;#简单diff&quot; class=&quot;headerlink&quot; title=&quot;简单diff&quot;&gt;&lt;/a&gt;简单diff&lt;/h3&gt;&lt;p&gt;简单diff的思路是判断新列表的节点是否是递增的，如果不是递增的旧列表中的节点移动到新列表中节点的前一位的后
      
    
    </summary>
    
    
  </entry>
  
</feed>
