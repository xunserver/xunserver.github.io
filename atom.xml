<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bang</title>
  
  <subtitle>生活总会有惊喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xunserver.cn/"/>
  <updated>2021-08-06T08:13:04.000Z</updated>
  <id>https://blog.xunserver.cn/</id>
  
  <author>
    <name>yangmanman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue查漏补缺</title>
    <link href="https://blog.xunserver.cn/archives/98f4c1bc.html"/>
    <id>https://blog.xunserver.cn/archives/98f4c1bc.html</id>
    <published>2021-08-06T08:13:04.000Z</published>
    <updated>2021-08-06T08:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态编译-Vue-compile-str"><a href="#动态编译-Vue-compile-str" class="headerlink" title="动态编译 Vue.compile(str)"></a>动态编译 Vue.compile(str)</h3><p>完整版情况可以将模板加载成render函数，实现远程加载功能</p><h3 id="阉割版的响应数据-Vue-observable-obj"><a href="#阉割版的响应数据-Vue-observable-obj" class="headerlink" title="阉割版的响应数据 Vue.observable(obj)"></a>阉割版的响应数据 Vue.observable(obj)</h3><p>创建一个可响应对象，目前我们的可以响应对象在data，watch,computed 中， 这个阉割版的可以响应对象用于渲染函数和计算属性中</p><h3 id="watch可以监听一个数组，也可以是一个方法"><a href="#watch可以监听一个数组，也可以是一个方法" class="headerlink" title="watch可以监听一个数组，也可以是一个方法"></a>watch可以监听一个数组，也可以是一个方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    a: <span class="string">'someMethod'</span>  <span class="comment">// vm实例中方法,</span></span><br><span class="line">    b: [</span><br><span class="line">        &#123;</span><br><span class="line">            handler: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">            deep: <span class="literal">true</span>,</span><br><span class="line">            immediate: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        <span class="string">'someMethod'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插槽新功能-v-slot"><a href="#插槽新功能-v-slot" class="headerlink" title="插槽新功能 v-slot"></a>插槽新功能 v-slot</h3><ol><li>v-slot:slotName 指定具名插槽</li><li>v-slot在单个插槽的情况下可以绑定非template<em>，其余必</em>须绑定到组件上</li><li>v-slot可以简写为#, 认插槽需要#default<h3 id="v-bind-支持对象绑定-动态绑定"><a href="#v-bind-支持对象绑定-动态绑定" class="headerlink" title="v-bind 支持对象绑定, 动态绑定"></a>v-bind 支持对象绑定, 动态绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定一个 attribute --&gt;</span><br><span class="line">&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态 attribute 名 (2.6.0+) --&gt;</span><br><span class="line">&lt;button v-bind:[key]=&quot;value&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span><br><span class="line">&lt;button :[key]=&quot;value&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联字符串拼接 --&gt;</span><br><span class="line">&lt;img :src=&quot;&apos;/path/to/images/&apos; + fileName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- class 绑定 --&gt;</span><br><span class="line">&lt;div :class=&quot;&#123; red: isRed &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :class=&quot;[classA, classB]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :class=&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style 绑定 --&gt;</span><br><span class="line">&lt;div :style=&quot;&#123; fontSize: size + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span><br><span class="line">&lt;div v-bind=&quot;&#123; id: someProp, &apos;other-attr&apos;: otherProp &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 prop 修饰符绑定 DOM attribute --&gt;</span><br><span class="line">&lt;div v-bind:text-content.prop=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span><br><span class="line">&lt;my-component :prop=&quot;someThing&quot;&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span><br><span class="line">&lt;child-component v-bind=&quot;$props&quot;&gt;&lt;/child-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- XLink --&gt;</span><br><span class="line">&lt;svg&gt;&lt;a :xlink:special=&quot;foo&quot;&gt;&lt;/a&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="v-pre-手动指定这个元素和其子元素不需要编译。直接展示原始标签"><a href="#v-pre-手动指定这个元素和其子元素不需要编译。直接展示原始标签" class="headerlink" title="v-pre 手动指定这个元素和其子元素不需要编译。直接展示原始标签"></a>v-pre 手动指定这个元素和其子元素不需要编译。直接展示原始标签</h3><h3 id="不需要响应式的数据记得冻结，比如表格数据"><a href="#不需要响应式的数据记得冻结，比如表格数据" class="headerlink" title="不需要响应式的数据记得冻结，比如表格数据"></a>不需要响应式的数据记得冻结，比如表格数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export  default  &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      retur: &#123;</span><br><span class="line">        data: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    async beforeMounted() &#123;</span><br><span class="line">      this.data = await this.getData()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      async getData() &#123;</span><br><span class="line">        return Object.freeze(someData)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="静态内容尽量使用template模板渲染，-不使用jsx或者render函数。提高性能"><a href="#静态内容尽量使用template模板渲染，-不使用jsx或者render函数。提高性能" class="headerlink" title="静态内容尽量使用template模板渲染， 不使用jsx或者render函数。提高性能"></a>静态内容尽量使用template模板渲染， 不使用jsx或者render函数。提高性能</h3><p>complie 会优化render 函数，直接写没有优化过程。</p><h3 id="组件会在每个生命周期触发事件，比如’hook-mounted’-这种。"><a href="#组件会在每个生命周期触发事件，比如’hook-mounted’-这种。" class="headerlink" title="组件会在每个生命周期触发事件，比如’hook:mounted’ 这种。"></a>组件会在每个生命周期触发事件，比如’hook:mounted’ 这种。</h3><h3 id="尽量使用受控组件，优先选择函数组件。"><a href="#尽量使用受控组件，优先选择函数组件。" class="headerlink" title="尽量使用受控组件，优先选择函数组件。"></a>尽量使用受控组件，优先选择函数组件。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;动态编译-Vue-compile-str&quot;&gt;&lt;a href=&quot;#动态编译-Vue-compile-str&quot; class=&quot;headerlink&quot; title=&quot;动态编译 Vue.compile(str)&quot;&gt;&lt;/a&gt;动态编译 Vue.compile(str)&lt;/h3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>filerun搭建和配置</title>
    <link href="https://blog.xunserver.cn/archives/cecf9a65.html"/>
    <id>https://blog.xunserver.cn/archives/cecf9a65.html</id>
    <published>2021-04-07T14:57:23.000Z</published>
    <updated>2021-04-07T14:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>参考<a href="https://vuepress.mirror.docker-practice.com/install/" target="_blank" rel="noopener">docker安装和配置</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL get.docker.com -o get-docker.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh get-docker.sh --mirror Aliyun</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker <span class="comment">#开机启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker <span class="comment"># 打开服务</span></span></span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo curl -L https://download.fastgit.org/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod u+x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br></pre></td></tr></table></figure><h2 id="修改docker-compose-yml-配置"><a href="#修改docker-compose-yml-配置" class="headerlink" title="修改docker-compose.yml 配置"></a>修改docker-compose.yml 配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mariadb:10.1</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>  <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/filerun/db:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">afian/filerun</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      FR_DB_HOST:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">      FR_DB_PORT:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">      FR_DB_NAME:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      FR_DB_USER:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      FR_DB_PASS:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      APACHE_RUN_USER:</span> <span class="string">www-data</span></span><br><span class="line"><span class="attr">      APACHE_RUN_USER_ID:</span> <span class="number">33</span></span><br><span class="line"><span class="attr">      APACHE_RUN_GROUP:</span> <span class="string">www-data</span></span><br><span class="line"><span class="attr">      APACHE_RUN_GROUP_ID:</span> <span class="number">33</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - db:</span><span class="string">db</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/filerun/html:/var/www/html</span> <span class="comment"># 挂载到宿主的目录 </span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/filerun/user-files:/user-files</span> <span class="comment"># 网盘文件，需要将CIFS挂载到此目录</span></span><br></pre></td></tr></table></figure><h2 id="挂载CIFS硬盘"><a href="#挂载CIFS硬盘" class="headerlink" title="挂载CIFS硬盘"></a>挂载CIFS硬盘</h2><p>选择CIFS共享，不是NFS，NFS权限难搞。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mount -t cifs -o username=share,password=share,gid=tape,uid=33 //bijiben1.home/share  /root/filerun/user-files</span></span><br></pre></td></tr></table></figure></p><p>修改/etc/fstab 实现开机自动挂载<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>bijiben1.home<span class="regexp">/share /</span>root<span class="regexp">/filerun/u</span>ser-files cifs username=share,password=share,gid=tape,uid=<span class="number">33</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h2 id="启动docker-compose"><a href="#启动docker-compose" class="headerlink" title="启动docker-compose"></a>启动docker-compose</h2><blockquote><p>docker-compose up -d </p></blockquote><h2 id="配置filerun"><a href="#配置filerun" class="headerlink" title="配置filerun"></a>配置filerun</h2><ol><li>初始化用户密码是superuser/superuser</li><li>中文界面需要自行下载语言包上传。 <a href="https://github.com/filerun/translations" target="_blank" rel="noopener">语言包</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://vuepress.mirror.docker-prac
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>let-encrypt 域名证书申请</title>
    <link href="https://blog.xunserver.cn/archives/63bb46e5.html"/>
    <id>https://blog.xunserver.cn/archives/63bb46e5.html</id>
    <published>2020-12-13T09:04:51.000Z</published>
    <updated>2020-12-13T09:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载certbot-auto"><a href="#下载certbot-auto" class="headerlink" title="下载certbot-auto"></a>下载certbot-auto</h2><pre><code>wget https://dl.eff.org/certbot-autochmod a+x ./certbot-auto</code></pre><h3 id="单域名证书申请"><a href="#单域名证书申请" class="headerlink" title="单域名证书申请"></a>单域名证书申请</h3><h4 id="新建nginx-配置"><a href="#新建nginx-配置" class="headerlink" title="新建nginx 配置"></a>新建nginx 配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> cloud.jiaxuan.site;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span> /opt/www/cloud.jiaxuan.site;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/cloud.jiaxuan.site_access.log;</span><br><span class="line">    <span class="attribute">error_log</span>  /var/log/nginx/cloud.jiaxuan.site_error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="申请单域名证书"><a href="#申请单域名证书" class="headerlink" title="申请单域名证书"></a>申请单域名证书</h4><blockquote><p>./certbot-auto certonly –email <a href="mailto:1358925129@qq.com" target="_blank" rel="noopener">1358925129@qq.com</a> –domains cloud.jiaxuan.site</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载certbot-auto&quot;&gt;&lt;a href=&quot;#下载certbot-auto&quot; class=&quot;headerlink&quot; title=&quot;下载certbot-auto&quot;&gt;&lt;/a&gt;下载certbot-auto&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;wget https://d
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hyper-v</title>
    <link href="https://blog.xunserver.cn/archives/320b54d3.html"/>
    <id>https://blog.xunserver.cn/archives/320b54d3.html</id>
    <published>2020-11-22T13:20:03.000Z</published>
    <updated>2020-11-22T13:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载固件"><a href="#下载固件" class="headerlink" title="下载固件"></a>下载固件</h2><p>下载<a href="https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/" target="_blank" rel="noopener">lede 虚拟机专用固件</a>, 下载名称为<code>generic-squashfs-combined-efi.vmdk</code>的固件。</p><h2 id="转盘"><a href="#转盘" class="headerlink" title="转盘"></a>转盘</h2><p>使用转盘工具 <a href="http://www.pc6.com/softview/SoftView_809076.html" target="_blank" rel="noopener">StarWind Software V2V Image Converter</a>。转盘工具可以转换<code>.img</code> <code>.vmdk</code> <code>.vhd</code> <code>.vhdx</code>格式，将固件转换成 vhdx 格式镜像，或者并且支持动态动态扩展大小的格式。</p><h2 id="虚拟交换机配置"><a href="#虚拟交换机配置" class="headerlink" title="虚拟交换机配置"></a>虚拟交换机配置</h2><h3 id="配置-Wan"><a href="#配置-Wan" class="headerlink" title="配置 Wan"></a>配置 Wan</h3><p>新建虚拟交换机 =&gt; 外部网络 =&gt; 选择需要绑定的网卡 =&gt; 取消允许管理操作系统共享此网络适配器</p><p>如果取消允许管理操作系统共享此网络适配器，宿主机不能通过此网卡上网，必须要通过内部 <code>lan =&gt; 软路由 =&gt; wan</code> , 共享情况下是直接 <code>=&gt; wan</code></p><p>如果需要多拨的，重复上述步骤</p><h2 id="配置-lan-x"><a href="#配置-lan-x" class="headerlink" title="配置 lan-x"></a>配置 lan-x</h2><p>新建虚拟交换机 =&gt; 外部网络 =&gt; 选择需要绑定的网卡 =&gt; 取消允许管理操作系统共享此网络适配器</p><p>重复上述步骤添加其余 lan</p><h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><ol><li>虚拟机存储位置指的是虚拟机相关的配置保存路径，不是磁盘路径</li><li>虚拟机代数，已知 lede 可以用二代；高恪，爱快二代显示镜像未找到，暂无方法，只能用第一代，第二代可以用 efi 镜像</li><li>第一代第二代磁盘使用不一致，第二代只能用 scsi 控制器添加硬盘驱动器。</li><li>硬盘驱动器第一代选择 IDE 控制器 1</li><li>虚拟磁盘选择转盘后的文件，使用文件前，先扩容到 2G。虚拟磁盘理解成一个隔离的真实磁盘</li><li>网卡配置按照 内部网络 =&gt; lan =&gt; wan 口的形式配置。外部网络需要在高级设置中启动 mac 地址欺骗</li><li>取消安全性检查</li><li>bios 启动顺序，使用硬盘优先</li><li>最好禁用检查点</li></ol><h2 id="启动设备"><a href="#启动设备" class="headerlink" title="启动设备"></a>启动设备</h2><p>使用 192.168.1.1 访问软路由管理界面。因为添加了内部 lan，否则只能设置外部 lan 网卡的网关到 192.168.1.1</p><h2 id="直通教程"><a href="#直通教程" class="headerlink" title="直通教程"></a>直通教程</h2><ol><li>查看所有设备<blockquote><p>Get-PnpDevice </p></blockquote></li><li><p>获取 InstanceId</p><blockquote><p>Get-PnpDevice -FriendlyName “设备名称”| select InstanceId</p></blockquote></li><li><p>禁用设备</p><blockquote><p>Disable-PnpDevice -InstanceId “设备 InstanceId”</p></blockquote></li><li><p>获取设备 LocationPaths</p><blockquote><p>Get-PnpDeviceProperty -InstanceId “设备 InstanceId” -KeyName DEVPKEY_Device_LocationPaths </p></blockquote></li><li><p>通过 LocationPaths 下线设备</p><blockquote><p>Dismount-VMHostAssignableDevice -Force -LocationPath “设备 LocationPaths” </p></blockquote></li><li><p>查看被下线的设备</p><blockquote><p>Get-VMHostAssignableDevice </p></blockquote></li><li><p>通过 LocationPaths 添加设备到虚拟机</p><blockquote><p>Add-VMAssignableDevice -VMName “虚拟机名称” -LocationPath “设备 LocationPaths”</p></blockquote></li></ol><p>可以直接通过 设备管理器 =&gt; 设备 =&gt; 设备详细信息查看 <code>InstanceId</code> 和 <code>LocationPaths</code>。LocationPaths=位置路径 InstanceId=设备实例路径</p><h2 id="踩坑事项"><a href="#踩坑事项" class="headerlink" title="踩坑事项"></a>踩坑事项</h2><ul><li>外部网络不能并用，所以不能同一个外部网络不能分配到两个虚拟机上。</li><li>外部网络设备互斥，不能讲同一个设备分配到两个外部网络上。</li><li>出现 boot loader 加载失败，原因是没有禁用安全性启动</li><li>出现镜像未找到原因是，部分固件不支持二代虚拟机，需要用第一代的形式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载固件&quot;&gt;&lt;a href=&quot;#下载固件&quot; class=&quot;headerlink&quot; title=&quot;下载固件&quot;&gt;&lt;/a&gt;下载固件&lt;/h2&gt;&lt;p&gt;下载&lt;a href=&quot;https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react和vue的生命周期</title>
    <link href="https://blog.xunserver.cn/archives/27ee65e3.html"/>
    <id>https://blog.xunserver.cn/archives/27ee65e3.html</id>
    <published>2020-04-02T09:33:50.000Z</published>
    <updated>2020-04-02T09:33:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><ol><li>beforeCreate （ &lt;=初始化事件和生命周期）</li><li>created （&lt;= prop 注入完成）</li><li>beforeMount 编译 template 模板或者 render， 并收集依赖</li><li>mouted （挂载到 dom 上面）</li><li>beforeUpdate =&gt; 不能在里面更新 data =&gt; 开始 diff render</li><li>beforeDestory =&gt; 解除绑定，解除事件，销毁子组件。</li><li>destoryed =&gt; 删除完回调</li></ol><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><ol><li>defaultProp =&gt; prop</li><li>initState</li><li>componentWillMount</li><li>render</li><li>componentDidMount</li></ol><h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><p>react 的变化需要自己手动更新，包括 props 和 state 的变化</p><ol><li>props 变化通过 componentWillReceiveProps 获得，</li><li>state 的变化通过 setState 方法来实现</li></ol><p>均会触发 shouldComponentUpdate 钩子，如果钩子返回 false 表示不更新。<br>然后会触发 componentWillUpdate 构造<br>重新调用 render 函数， 渲染界面<br>触发 componentDidUpdate 钩子，</p><p>销毁钩子 componentWillUnmount</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;beforeCreate （ &amp;lt;=初始化事件和生命周期）&lt;/li&gt;
&lt;li&gt;created （&amp;lt;= prop
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react开发采坑之路</title>
    <link href="https://blog.xunserver.cn/archives/5bca6e8e.html"/>
    <id>https://blog.xunserver.cn/archives/5bca6e8e.html</id>
    <published>2020-03-31T07:48:38.000Z</published>
    <updated>2020-03-31T07:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父组件给子组件设置-className-也需要通过-props-传递"><a href="#父组件给子组件设置-className-也需要通过-props-传递" class="headerlink" title="父组件给子组件设置 className 也需要通过 props 传递"></a>父组件给子组件设置 className 也需要通过 props 传递</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;`$&#123;this.props.className&#125;  otherClassName`&#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="jsx-属性命名原则"><a href="#jsx-属性命名原则" class="headerlink" title="jsx 属性命名原则"></a>jsx 属性命名原则</h2><p>React DOM 使用 camelCase（小驼峰命名）来定义属性的名称</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;父组件给子组件设置-className-也需要通过-props-传递&quot;&gt;&lt;a href=&quot;#父组件给子组件设置-className-也需要通过-props-传递&quot; class=&quot;headerlink&quot; title=&quot;父组件给子组件设置 className 也需要通
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>英语学习</title>
    <link href="https://blog.xunserver.cn/archives/3f43dc72.html"/>
    <id>https://blog.xunserver.cn/archives/3f43dc72.html</id>
    <published>2020-03-30T23:56:36.000Z</published>
    <updated>2020-03-30T23:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I come across below behavior</p></blockquote><p>我遇到了下面这些问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;I come across below behavior&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我遇到了下面这些问题&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ts+react环境搭建</title>
    <link href="https://blog.xunserver.cn/archives/3a1fbb86.html"/>
    <id>https://blog.xunserver.cn/archives/3a1fbb86.html</id>
    <published>2020-03-30T09:38:25.000Z</published>
    <updated>2020-03-30T09:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="package-json-初始化"><a href="#package-json-初始化" class="headerlink" title="package.json 初始化"></a>package.json 初始化</h2><blockquote><p>npm init</p></blockquote><h2 id="webpack-安装配置"><a href="#webpack-安装配置" class="headerlink" title="webpack 安装配置"></a>webpack 安装配置</h2><h3 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h3><blockquote><p>npm i -D webpack webpack-cli</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol><li>新建<code>config/base.config.js</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: path.resolve(__dirname, <span class="string">"../src/main.tsx"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    filename: <span class="string">"[name]-[hash].js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\./</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;package-json-初始化&quot;&gt;&lt;a href=&quot;#package-json-初始化&quot; class=&quot;headerlink&quot; title=&quot;package.json 初始化&quot;&gt;&lt;/a&gt;package.json 初始化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;n
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习scss</title>
    <link href="https://blog.xunserver.cn/archives/f800a64.html"/>
    <id>https://blog.xunserver.cn/archives/f800a64.html</id>
    <published>2020-03-29T23:56:02.000Z</published>
    <updated>2020-03-29T23:56:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol><li>用于定义<code>属性值</code>（不能是属性名）</li><li>美元符<code>$</code>开头，具有块级作用域</li><li>可以引用其他变量 <code>$light-border: 1px solid \$ligth-color</code></li><li>变量中命令不区分 下划线和中横线，一般统一风格就行</li></ol><h2 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    // 冒号隔开</span><br><span class="line">    width: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>:  width: <span class="number">1px</span> solid &#123;</span><br><span class="line">    // 冒号隔开</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h2><p>导入文件中定义的变量和混合器, 如果在这个文件中重新定义变量会影响后面所有的变量值</p><p>如果 a.scss 定义了\$a, b 引入 a.scss 并重写了， 后面再次引用 a.scss 的文件均是 b 重写过的</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>使用默认值定义 \$width: 400px !default（这样不会覆盖）</li><li>使用嵌套引入，将引入的作为局部变量 div {@import “”}</li></ol><h2 id="mixin"><a href="#mixin" class="headerlink" title="@mixin"></a>@mixin</h2><p>将片段 复用，理解成讲这个片段完整拷贝到@include 位置</p><p><code>@mixin name {xxxxx}</code> 定义 <code>@include name;</code> 使用</p><ol><li>可以使用 &amp;</li><li>可以包含块</li><li>可以带参数 <code>@mixin name($arg1, $arg2)</code>, <code>@include name(red,blue)</code></li><li><p>具名参数 <code>@mixin name($arg1, $arg2)</code>, <code>@include name({$arg2: blue, $arg1: red)</code></p></li><li><p>默认参数 <code>@mixin name($arg1: red, $arg2: \$agr1)</code> 可以对形参进行引用</p></li></ol><h2 id="extends"><a href="#extends" class="headerlink" title="@extends"></a>@extends</h2><p>继承其他选择器的属性, 仅是那个选择器， 不会包括选择器子元素那些</p><p>继承在 BEM 中实战</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: steelblue;</span><br><span class="line">  &amp;__container &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;__item &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    &amp;--active &#123;</span><br><span class="line">      @<span class="keyword">extend</span> .nav__item;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以在html中直接 .nav__item--active 而不需要使用  .nav__item .nav__item--active</span></span><br></pre></td></tr></table></figure><h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><p>修正之前变量的错误认识</p><ol><li>数字，1, 2, 13, 10px</li><li>字符串，有引号字符串与无引号字符串，”foo”, ‘bar’, baz</li><li>颜色，blue, #04a3f9, rgba(255,0,0,0.5)</li><li>布尔型，true, false</li><li>空值，null</li><li>数组 (list)，用空格或逗号作分隔符，1.5em 1em 0 2em, Helvetica, Arial, sans-serif，同时包含（空格 ，）时分解为子数组</li><li>maps, 相当于 JavaScript 的 object，(key1: value1, key2: value2)</li></ol><h2 id="插值语句"><a href="#插值语句" class="headerlink" title="#{}插值语句"></a>#{}插值语句</h2><p>可以避免运算，直接编译</p><h2 id="amp-的理解"><a href="#amp-的理解" class="headerlink" title="&amp;的理解"></a>&amp;的理解</h2><p>理解成一个特殊的变量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> does-parent-exist &#123;</span><br><span class="line">  @<span class="keyword">if</span> &amp; &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$light-theme</span>: (</span><br><span class="line">  border-color: <span class="number">#eceeef</span>,</span><br><span class="line">  font-color: <span class="number">#323232</span>,</span><br><span class="line">  font-secondary: <span class="number">#c2c6d0</span>,</span><br><span class="line">  background-color: <span class="number">#fff</span>,</span><br><span class="line">  bg-title: <span class="number">#d3e6fb</span>,</span><br><span class="line">  bg-oddList: <span class="number">#f3f3f3</span>,</span><br><span class="line">  bg-listHover: <span class="number">#c5dffe</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//深色主题</span></span><br><span class="line"><span class="variable">$dark-theme</span>: (</span><br><span class="line">  border-color: <span class="number">#000</span>,</span><br><span class="line">  font-color: <span class="number">#c2c6d0</span>,</span><br><span class="line">  font-secondary: <span class="number">#aaa</span>,</span><br><span class="line">  background-color: <span class="number">#131925</span>,</span><br><span class="line">  bg-title: <span class="number">#293248</span>,</span><br><span class="line">  bg-oddList: <span class="number">#171e2c</span>,</span><br><span class="line">  bg-listHover: <span class="number">#0d3a70</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义映射集合</span></span><br><span class="line"><span class="variable">$themes</span>: (</span><br><span class="line">  light: <span class="variable">$light-theme</span>,</span><br><span class="line">  dark: <span class="variable">$dark-theme</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> themify(<span class="variable">$themes</span>: <span class="variable">$themes</span>) &#123;</span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$theme-name</span>, <span class="variable">$map</span> in <span class="variable">$themes</span> &#123;</span><br><span class="line">    <span class="selector-class">.theme-</span>#&#123;<span class="variable">$theme-name</span>&#125; &amp; &#123;</span><br><span class="line">      <span class="variable">$theme-map</span>: () !global;</span><br><span class="line">      @<span class="keyword">each</span> <span class="variable">$key</span>, <span class="variable">$value</span> in <span class="variable">$map</span> &#123;</span><br><span class="line">        <span class="variable">$theme-map</span>: map-merge(</span><br><span class="line">          <span class="variable">$theme-map</span>,</span><br><span class="line">          (</span><br><span class="line">            <span class="variable">$key</span>: <span class="variable">$value</span></span><br><span class="line">          )</span><br><span class="line">        ) !global;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @<span class="keyword">content</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$theme-map</span>: null !global;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@function themed(<span class="variable">$key</span>) &#123;</span><br><span class="line">  @return map-get(<span class="variable">$theme-map</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Avenir"</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-<span class="attribute">font</span>-smoothing: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font</span>-smoothing: grayscale;</span><br><span class="line">  @<span class="keyword">include</span> themify(<span class="variable">$themes</span>) &#123;</span><br><span class="line">    <span class="attribute">background</span>: themed(<span class="string">"background-color"</span>);</span><br><span class="line">    <span class="attribute">color</span>: themed(<span class="string">"font-color"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">each</span> <span class="variable">$item</span>, <span class="variable">$index</span> in <span class="variable">$list</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用于定义&lt;code&gt;属性值&lt;/code&gt;（不能是属性名）&lt;/li&gt;
&lt;li&gt;美元符&lt;code&gt;$&lt;/code&gt;开头，具有块级作用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动态规划学习（大雾）</title>
    <link href="https://blog.xunserver.cn/archives/89e50cbe.html"/>
    <id>https://blog.xunserver.cn/archives/89e50cbe.html</id>
    <published>2020-03-21T08:06:37.000Z</published>
    <updated>2020-03-21T08:06:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol><li><p>划分状态</p></li><li><p>状态表示</p></li><li><p>状态转移</p></li><li><p>确定边界</p></li></ol><h2 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h2><ol><li><p>自底向上</p></li><li><p>自顶向下</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;过程&quot;&gt;&lt;a href=&quot;#过程&quot; class=&quot;headerlink&quot; title=&quot;过程&quot;&gt;&lt;/a&gt;过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;划分状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态表示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态转移&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二叉树学习</title>
    <link href="https://blog.xunserver.cn/archives/feb19258.html"/>
    <id>https://blog.xunserver.cn/archives/feb19258.html</id>
    <published>2020-03-21T01:25:27.000Z</published>
    <updated>2020-03-21T01:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树是二叉平衡树的一种，包括 5 种性质</p><ol><li>根节点是黑色</li><li>节点颜色要么黑色，要么红色</li><li>每个叶子节点是黑子</li><li>任意节点到每个叶子节点的路径中包含的黑节点树 相等</li><li>每个红色节点的两个子节点的一定都是黑色（不能有两个连续的红节点）</li></ol><p>红色树通过左旋，右旋，变色来实现平衡</p><ul><li><p>左旋: 旋转节点的右节点变成父节点，选择节点变成右节点的左节点，右节点的左节点变成选择节点的右节点</p></li><li><p>右旋: 旋转节点的左节点变成父节点，旋转节点变成左节点的右节点，左节点的右节点变成旋转节点的左节点</p></li></ul><h2 id="插入流程"><a href="#插入流程" class="headerlink" title="插入流程"></a>插入流程</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;红黑树&quot;&gt;&lt;a href=&quot;#红黑树&quot; class=&quot;headerlink&quot; title=&quot;红黑树&quot;&gt;&lt;/a&gt;红黑树&lt;/h2&gt;&lt;p&gt;红黑树是二叉平衡树的一种，包括 5 种性质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点是黑色&lt;/li&gt;
&lt;li&gt;节点颜色要么黑色，要么红色&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>三次握手四次挥手的奇怪理解</title>
    <link href="https://blog.xunserver.cn/archives/6c3aac24.html"/>
    <id>https://blog.xunserver.cn/archives/6c3aac24.html</id>
    <published>2020-03-18T01:34:43.000Z</published>
    <updated>2020-03-18T01:34:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ol><li>向妹子招手(SYN=1, seq = X)</li><li>妹子回应(ACK=X+1) (此时你知道妹子回应你，你知道妹子的意思了) 并通知向你招手(seq=Y syn =1)</li><li>你回应妹子的招手(ACK=Y+1, seq = Z) (此时妹子也知道你的意思了)</li></ol><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>主动方: FIN=1 ACK=Z seq=X<br>被动方: ACK=X+1 seq=Z<br>被动方：FIN=1 ACK=X seq=Y;<br>主动方：ACK=Y seq=X</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; title=&quot;三次握手&quot;&gt;&lt;/a&gt;三次握手&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;向妹子招手(SYN=1, seq = X)&lt;/li&gt;
&lt;li&gt;妹子回应(ACK=X+1) (此时你知道妹子回应你
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>垂直居中</title>
    <link href="https://blog.xunserver.cn/archives/a1ccf0ca.html"/>
    <id>https://blog.xunserver.cn/archives/a1ccf0ca.html</id>
    <published>2020-03-18T01:03:55.000Z</published>
    <updated>2020-03-18T01:03:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父元素高度已知-子元素高度未知"><a href="#父元素高度已知-子元素高度未知" class="headerlink" title="父元素高度已知, 子元素高度未知"></a>父元素高度已知, 子元素高度未知</h2><h2 id="line-height-vertical-align"><a href="#line-height-vertical-align" class="headerlink" title="line-height + vertical-align"></a>line-height + vertical-align</h2><ol><li>父元素高度和 line-height 一致</li></ol><h2 id="父元素高度已知，子元素高度已知"><a href="#父元素高度已知，子元素高度已知" class="headerlink" title="父元素高度已知，子元素高度已知"></a>父元素高度已知，子元素高度已知</h2><h3 id="position-absolute-和-margin-top-50"><a href="#position-absolute-和-margin-top-50" class="headerlink" title="position: absolute 和 margin-top: -50%"></a>position: absolute 和 margin-top: -50%</h3><h3 id="position-absolute-和-transform-translateY-50"><a href="#position-absolute-和-transform-translateY-50" class="headerlink" title="position: absolute 和 transform: translateY: -50%;"></a>position: absolute 和 transform: translateY: -50%;</h3><h3 id="position-absolute-top-0-bottom-0-margin-auto"><a href="#position-absolute-top-0-bottom-0-margin-auto" class="headerlink" title="position: absolute; top: 0; bottom: 0 ; margin: auto"></a>position: absolute; top: 0; bottom: 0 ; margin: auto</h3><h2 id="父元素高度未知-子元素高度未知"><a href="#父元素高度未知-子元素高度未知" class="headerlink" title="父元素高度未知, 子元素高度未知"></a>父元素高度未知, 子元素高度未知</h2><h3 id="align-item-center"><a href="#align-item-center" class="headerlink" title="align-item: center;"></a>align-item: center;</h3><h3 id="table-table-cell"><a href="#table-table-cell" class="headerlink" title="table table-cell"></a>table table-cell</h3><h3 id="grid-align-items-center"><a href="#grid-align-items-center" class="headerlink" title="grid align-items:center;"></a>grid align-items:center;</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;父元素高度已知-子元素高度未知&quot;&gt;&lt;a href=&quot;#父元素高度已知-子元素高度未知&quot; class=&quot;headerlink&quot; title=&quot;父元素高度已知, 子元素高度未知&quot;&gt;&lt;/a&gt;父元素高度已知, 子元素高度未知&lt;/h2&gt;&lt;h2 id=&quot;line-height
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>passport学习</title>
    <link href="https://blog.xunserver.cn/archives/b4605e3d.html"/>
    <id>https://blog.xunserver.cn/archives/b4605e3d.html</id>
    <published>2020-03-13T11:06:00.000Z</published>
    <updated>2020-03-13T11:06:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发中学习nest.js</title>
    <link href="https://blog.xunserver.cn/archives/65be6a2e.html"/>
    <id>https://blog.xunserver.cn/archives/65be6a2e.html</id>
    <published>2020-03-12T08:39:59.000Z</published>
    <updated>2020-03-12T08:39:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建配置服务"><a href="#新建配置服务" class="headerlink" title="新建配置服务"></a>新建配置服务</h2><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i -S dotenv</span><br><span class="line">npm i -D @types/dotenv</span><br><span class="line">npm install -S @hapi/joi</span><br><span class="line">npm install -D @types/hapi__joi</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.service.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> dotenv <span class="keyword">from</span> <span class="string">"dotenv"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">"fs"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Joi <span class="keyword">from</span> <span class="string">"@hapi/joi"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configSchema = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> EnvConfig = Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ConfigService &#123;</span><br><span class="line">  <span class="keyword">private</span> readonly envConfig: Record&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line">  <span class="comment">// 配置的合并顺序</span></span><br><span class="line">  <span class="comment">// .env.[type].local =&gt; .env.[type] =&gt; .env</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">filePath?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (filePath) &#123;</span><br><span class="line">      <span class="keyword">this</span>.envConfig = dotenv.parse(fs.readFileSync(filePath))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 读取默认配置 .env</span></span><br><span class="line">      <span class="comment">// 读取[type].env 配置</span></span><br><span class="line">      <span class="comment">// 读取 local.[type].env配置</span></span><br><span class="line">      <span class="keyword">let</span> defaultEnvConfig</span><br><span class="line">      <span class="keyword">let</span> typeEnvConfig = &#123;&#125;</span><br><span class="line">      <span class="keyword">let</span> localEnvConfig = &#123;&#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        defaultEnvConfig = dotenv.parse(fs.readFileSync(<span class="string">".env"</span>))</span><br><span class="line">        typeEnvConfig = dotenv.parse(</span><br><span class="line">          fs.readFileSync(<span class="string">`<span class="subst">$&#123;process.env.NODE_ENV&#125;</span>.env`</span>)</span><br><span class="line">        )</span><br><span class="line">        localEnvConfig = dotenv.parse(</span><br><span class="line">          fs.readFileSync(<span class="string">`local.<span class="subst">$&#123;process.env.NODE_ENV&#125;</span>.env`</span>)</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">      <span class="keyword">if</span> (!defaultEnvConfig) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"默认配置文件未找到!"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.envConfig = <span class="built_in">Object</span>.assign(</span><br><span class="line">        defaultEnvConfig,</span><br><span class="line">        typeEnvConfig,</span><br><span class="line">        localEnvConfig</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">    <span class="comment">// this.envConfig = this.validateConfig(this.envConfig);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> validateConfig(envConfig: EnvConfig): EnvConfig &#123;</span><br><span class="line">    <span class="keyword">const</span> envVarSchema: Joi.ObjectSchema = Joi.object(configSchema)</span><br><span class="line">    <span class="keyword">const</span> &#123; error, value: validateEnvConfig &#125; = envVarSchema.validate(envConfig)</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"配置文件验证出错"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> validateEnvConfig</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span>(key: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.envConfig[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// config.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">"@nestjs/common"</span></span><br><span class="line"><span class="keyword">import</span> &#123; ConfigService &#125; <span class="keyword">from</span> <span class="string">"./config.service"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: ConfigService,</span><br><span class="line">      useValue: <span class="keyword">new</span> ConfigService()</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  exports: [ConfigService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ConfigModule &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .env</span></span><br><span class="line">PORT = <span class="number">3000</span></span><br></pre></td></tr></table></figure><p>注册到全局模块</p><h2 id="mysql-typeorm-集成"><a href="#mysql-typeorm-集成" class="headerlink" title="mysql typeorm 集成"></a>mysql typeorm 集成</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S @nestjs/typeorm typeorm mysql</span><br></pre></td></tr></table></figure><p>###</p><h2 id="mysql-typeorm-curd-集成"><a href="#mysql-typeorm-curd-集成" class="headerlink" title="mysql typeorm curd 集成"></a>mysql typeorm curd 集成</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save @nestjsx/crud @nestjsx/crud-typeorm class-transformer class-validator</span><br></pre></td></tr></table></figure><h2 id="默认情况下-module-是单列的，意味着模块中-提供者也是单列"><a href="#默认情况下-module-是单列的，意味着模块中-提供者也是单列" class="headerlink" title="默认情况下 module 是单列的，意味着模块中 提供者也是单列"></a>默认情况下 module 是单列的，意味着模块中 提供者也是单列</h2><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @nestjs/passport passport passport-local</span><br><span class="line">npm install --save-dev @types/passport-local</span><br></pre></td></tr></table></figure><h2 id="JWT-功能"><a href="#JWT-功能" class="headerlink" title="JWT 功能"></a>JWT 功能</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -S @nestjs/jwt passport-jwt</span><br><span class="line"><span class="built_in">npm</span> i -S @types/passport-jwt</span><br></pre></td></tr></table></figure><h2 id="请求的执行顺序"><a href="#请求的执行顺序" class="headerlink" title="请求的执行顺序"></a>请求的执行顺序</h2><p>客户端请求 —&gt; 中间件 —&gt; 守卫 —&gt; 拦截器之前 —&gt; 管道 —&gt; 控制器处理并响应 —&gt; 拦截器之后 —&gt; 过滤器</p><p>重点：在示例给出了它们的写法，注意全局管道、守卫、过滤器和拦截器，只能 new，全局中间件是纯函数，全局管道、守卫、过滤器和拦截器，中间件都不能依赖注入。中间件模块注册也不能用 new，可以依赖注入。管道、守卫、过滤器和拦截器局部注册可以使用 new 和类名，除了管道以为其他都可以依赖注入。拦截器和守卫可以写成高阶方法来传参，达到定制目的</p><h2 id="泛型中-amp-是啥意思"><a href="#泛型中-amp-是啥意思" class="headerlink" title="泛型中&amp;是啥意思"></a>泛型中&amp;是啥意思</h2><p>&amp;指的是并集类型， | 指的是交集类型</p><h2 id="别人的项目结构"><a href="#别人的项目结构" class="headerlink" title="别人的项目结构"></a>别人的项目结构</h2><p>main.ts 入口<br>main.hmr.ts 热更新入口<br>app.service.ts APP 服务（选择）<br>app.module.ts APP 模块（根模块，必须）<br>app.controller.ts APP 控制器（选择）<br>app.controller.spec.ts APP 控制器单元测试用例（选择）<br>config 配置模块<br>core 核心模块（申明过滤器、管道、拦截器、守卫、中间件、全局模块）<br>feature 特性模块（主要业务模块）<br>shared 共享模块（共享 mongodb、redis 封装服务、通用服务）<br>tools</p><h2 id="装饰器的集中写法"><a href="#装饰器的集中写法" class="headerlink" title="装饰器的集中写法"></a>装饰器的集中写法</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> ClassDecorator = &lt;TFunction <span class="keyword">extends</span> <span class="built_in">Function</span>&gt;(</span><br><span class="line">  target: TFunction</span><br><span class="line">) =&gt; TFunction | <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> PropertyDecorator = (</span><br><span class="line">  target: <span class="built_in">Object</span>,</span><br><span class="line">  propertyKey: <span class="built_in">string</span> | symbol</span><br><span class="line">) =&gt; <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> MethodDecorator = &lt;T&gt;(</span><br><span class="line">  target: <span class="built_in">Object</span>,</span><br><span class="line">  propertyKey: <span class="built_in">string</span> | symbol,</span><br><span class="line">  descriptor: TypedPropertyDescriptor&lt;T&gt;</span><br><span class="line">) =&gt; TypedPropertyDescriptor&lt;T&gt; | <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> ParameterDecorator = (</span><br><span class="line">  target: <span class="built_in">Object</span>,</span><br><span class="line">  propertyKey: <span class="built_in">string</span> | symbol,</span><br><span class="line">  parameterIndex: <span class="built_in">number</span></span><br><span class="line">) =&gt; <span class="built_in">void</span></span><br></pre></td></tr></table></figure><h2 id="动态模块中-service-如何被注册到其他动态模块上"><a href="#动态模块中-service-如何被注册到其他动态模块上" class="headerlink" title="动态模块中 service 如何被注册到其他动态模块上"></a>动态模块中 service 如何被注册到其他动态模块上</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">configModule</span> 是个动态模块， 现在需要注册到typeormModule 上面, 最好的方式直接申明全局模块</span><br></pre></td></tr></table></figure><h2 id="采坑记录"><a href="#采坑记录" class="headerlink" title="采坑记录"></a>采坑记录</h2><h3 id="ConfigModule-不能读取-module-目录下的-json-配置文件"><a href="#ConfigModule-不能读取-module-目录下的-json-配置文件" class="headerlink" title="ConfigModule 不能读取 module 目录下的 json 配置文件"></a>ConfigModule 不能读取 module 目录下的 json 配置文件</h3><p>开发代码都在 src 里，生成代码在 dist (打包自动编译)，typescript 打包只会编译 ts 到 dist 下，静态文件 public 和模板 views 不会移动，所以需要放到根目录下， 同理，配置 json 需要放在根目录下。</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>安装</p><blockquote><p>npm i -S class-validator class-transformer</p></blockquote><p>直接在 DTO 中装饰器定义</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create-cat.dto.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CreateCatDto &#123;</span><br><span class="line">  <span class="meta">@IsString</span>()</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置管道<br>控制器中使用方法装饰器注入<br>@UsePipes(new ValidationPipe({transform: true}))</p><h2 id="class-validator-装饰器大全"><a href="#class-validator-装饰器大全" class="headerlink" title="class-validator 装饰器大全"></a>class-validator 装饰器大全</h2><p>@Length<br>@contains(‘text’)</p><h2 id="entity-中定义类型和装饰器相比优先级低"><a href="#entity-中定义类型和装饰器相比优先级低" class="headerlink" title="entity 中定义类型和装饰器相比优先级低"></a>entity 中定义类型和装饰器相比优先级低</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CreateDateColumn</span>(&#123; comment: <span class="string">'创建时间'</span> &#125;)</span><br><span class="line">createdAt: <span class="built_in">Date</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@UpdateDateColumn</span>(&#123; comment: <span class="string">'更新时间'</span> &#125;)</span><br><span class="line">updatedAt: <span class="built_in">boolean</span>   <span class="comment">// 这样也是可以的， 最后也会被解释成 datetime 类型的</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新建配置服务&quot;&gt;&lt;a href=&quot;#新建配置服务&quot; class=&quot;headerlink&quot; title=&quot;新建配置服务&quot;&gt;&lt;/a&gt;新建配置服务&lt;/h2&gt;&lt;p&gt;安装依赖&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发中学习typescript</title>
    <link href="https://blog.xunserver.cn/archives/71eabda7.html"/>
    <id>https://blog.xunserver.cn/archives/71eabda7.html</id>
    <published>2020-03-12T03:00:06.000Z</published>
    <updated>2020-03-12T03:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Record-类型"><a href="#Record-类型" class="headerlink" title="Record 类型"></a>Record 类型</h2><p>将一个类型的所有属性值都映射到另一个类型上并创造一个新的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Record&lt;k <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> petsGroup = <span class="string">"dog"</span> | <span class="string">"cat"</span> | <span class="string">"fish"</span></span><br><span class="line"><span class="keyword">interface</span> IPetInfo &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPets = Record&lt;petsGroup, IPetInfo&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  IPets = &#123;</span></span><br><span class="line"><span class="comment"> *     dog: IPetInfo</span></span><br><span class="line"><span class="comment"> *     cat: IPetInfo</span></span><br><span class="line"><span class="comment"> *     fish: IPetInfo</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animalsInfo: IPets = &#123;</span><br><span class="line">  dog: &#123;</span><br><span class="line">    name: <span class="string">"dogName"</span>,</span><br><span class="line">    age: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cat: &#123;</span><br><span class="line">    name: <span class="string">"catName"</span>,</span><br><span class="line">    age: <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fish: &#123;</span><br><span class="line">    name: <span class="string">"fishName"</span>,</span><br><span class="line">    age: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>一个值可以是几种类型之一<br>如果一个值是联合类型，我们只能访问此联合类型的所有类型里共有的成员。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> unionType = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">  fly()</span><br><span class="line">  layEggs()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Fish &#123;</span><br><span class="line">  swim()</span><br><span class="line">  layEggs()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal = Bird | Fish</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPet</span>(<span class="params"></span>): <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xxx) &#123;</span><br><span class="line">    <span class="keyword">return</span> bird</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fish</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pet = getPet()</span><br><span class="line">pet.fly() <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="类型保护与区分类型"><a href="#类型保护与区分类型" class="headerlink" title="类型保护与区分类型"></a>类型保护与区分类型</h2><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举是 enum 关键定义的数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> enumVar = &#123;</span><br><span class="line">  x,</span><br><span class="line">  y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// enumVar.x = 0</span></span><br><span class="line"><span class="comment">// enumVar[0] = 'x'</span></span><br><span class="line"><span class="keyword">enum</span> enumVar = &#123;</span><br><span class="line">  x = <span class="string">'x'</span></span><br><span class="line">  y = <span class="string">'y'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// enumVar.x = 'x'</span></span><br><span class="line"><span class="comment">// enumVar['x'] = 'x'</span></span><br></pre></td></tr></table></figure><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><p>Partial</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[p]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Required</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Required&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReadOnly</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadOnly&lt;T&gt; = &#123;</span><br><span class="line">  readonly [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pick</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pink&lt;T, K extands keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Record</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Record&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Type</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Type&lt;T&gt; <span class="keyword">extends</span> Function &#123;</span><br><span class="line">  <span class="keyword">new</span> (...arg: <span class="built_in">any</span>): T <span class="comment">// 表示T只能被new 调用， 不能直接调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 type 是不能继承的，而且写法是赋值, interface 更像是申明</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器经计算后必须返回一个函数，就包括两种形式，一是直接返回函数，另一种是函数工厂</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decorator</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decoratorFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰器会在 class 定义期间执行，无须等到 new</p><ol><li>上至下依次对装饰器表达式求值(工厂函数会被执行)。</li><li>求值的结果会被当作函数，由下至上依次调用</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@g</span></span><br><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="comment">// g(f(x))</span></span><br></pre></td></tr></table></figure><ol><li>类装饰器(constructor)</li><li>方法装饰器(constructor, key,)</li><li>属性装饰器</li><li>参数装饰器</li></ol><h2 id="ReadonlyArray-lt-gt-和-Array-lt-gt"><a href="#ReadonlyArray-lt-gt-和-Array-lt-gt" class="headerlink" title="ReadonlyArray&lt;&gt; 和 Array&lt;&gt;"></a>ReadonlyArray&lt;&gt; 和 Array&lt;&gt;</h2><p>用于固定数组， 保证数组不能被修改或者被引用到另一个变量上</p><h2 id="interface-理解"><a href="#interface-理解" class="headerlink" title="interface 理解"></a>interface 理解</h2><p>是对结构的描述</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Test &#123;</span><br><span class="line">  test(): <span class="built_in">boolean</span> <span class="comment">// 描述对象的中函数</span></span><br><span class="line">  (a: <span class="built_in">string</span>): <span class="built_in">boolean</span> <span class="comment">// 函数体的描述</span></span><br><span class="line">  <span class="keyword">new</span> (test: <span class="built_in">string</span>): someInstanceInterface <span class="comment">// 对构造函数的额描述</span></span><br><span class="line">  [prop: <span class="built_in">number</span>]: <span class="built_in">string</span>  <span class="comment">// 索引签名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Test1 <span class="keyword">extends</span> Test // 接口是可继承的</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Counter &#123;    <span class="comment">// 混合类型，类比有属性的函数</span></span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SomeConstructor &#123;  <span class="comment">// 对构造器进行描述，描述构造器和构造器上面的静态属性</span></span><br><span class="line">  <span class="keyword">new</span> (a: <span class="built_in">string</span>): Counter</span><br><span class="line">  test()</span><br><span class="line">  propA: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象字面量传参问题"><a href="#对象字面量传参问题" class="headerlink" title="对象字面量传参问题"></a>对象字面量传参问题</h2><p>对象字面量会被特殊对待而且会经过 额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  width?: <span class="built_in">string</span></span><br><span class="line">  height?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">config: Config</span>): </span>&#123; width: <span class="built_in">string</span> &#125; &#123;&#125;</span><br><span class="line"></span><br><span class="line">test(&#123; height: <span class="number">123</span>, a: <span class="number">123</span> &#125;) <span class="comment">// a会报错</span></span><br></pre></td></tr></table></figure><p>解决方法是提前为 额外的属性进行 定义</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  ...</span><br><span class="line">  [prop: <span class="built_in">string</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的-interface-仅用于表达式声明中"><a href="#函数的-interface-仅用于表达式声明中" class="headerlink" title="函数的 interface 仅用于表达式声明中"></a>函数的 interface 仅用于表达式声明中</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Func &#123;</span><br><span class="line">  (arg1: <span class="built_in">string</span>, arg2: <span class="built_in">number</span>): <span class="built_in">void</span> <span class="comment">// 对函数体描述</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func: Func = <span class="function"><span class="keyword">function</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;&#125; <span class="comment">// 参数名可以和接口不一致</span></span><br></pre></td></tr></table></figure><h2 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h2><p>仅包括数字索引和字符串索引， 数字索引的值必须是字符串索引的子类型，因为 JavaScript 中 a[100]===a[‘100’]</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SomeInterface &#123;</span><br><span class="line">  [prop: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">  [prop: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="readOnly-的理解"><a href="#readOnly-的理解" class="headerlink" title="readOnly 的理解"></a>readOnly 的理解</h2><p>针对对象的属性名进行锁定，在索引签名中，可以对索引锁定<code>readonly [prop: string]: string</code>，对象不能在新增加属性</p><h2 id="interface-的种类"><a href="#interface-的种类" class="headerlink" title="interface 的种类"></a>interface 的种类</h2><ol><li>对象类型</li><li>函数类型</li><li>class 类型</li></ol><h2 id="class-interface-的写法"><a href="#class-interface-的写法" class="headerlink" title="class interface 的写法"></a>class interface 的写法</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? PersonConstructor 是用来检查静态部分的</span></span><br><span class="line"><span class="keyword">interface</span> PersonConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (name: <span class="built_in">string</span>, age: <span class="built_in">number</span>) <span class="comment">// ✔️ 这个是用来检查 constructor 的</span></span><br><span class="line">  typename: <span class="built_in">string</span> <span class="comment">// ✔️ 这个是用来检查静态属性 typename 的</span></span><br><span class="line">  logname(): <span class="built_in">void</span> <span class="comment">// ✔️ 这个用来检查静态方法 logname 的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ? PersonInterface 则是用来检查实例部分的</span></span><br><span class="line"><span class="keyword">interface</span> PersonInterface &#123;</span><br><span class="line">  <span class="comment">// new (name: string, age: number) // ❌ 静态方法的检查也不能写在这里 这样写是错误的</span></span><br><span class="line">  log(): <span class="built_in">void</span> <span class="comment">// : 这里定义了实例方法 log</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Person implements PersonInterface, PersonInterface &#123; ❌ 这样写是错误的</span></span><br><span class="line"><span class="keyword">const</span> Person: PersonConstructor = <span class="keyword">class</span> Person <span class="keyword">implements</span> PersonInterface &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">static</span> typename = <span class="string">"Person type"</span> <span class="comment">// 这里定义了一个名为 typename 的静态属性</span></span><br><span class="line">  <span class="keyword">static</span> logname() &#123;</span><br><span class="line">    <span class="comment">// 这里定义了一个名为 logname 的静态方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.typename)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="comment">// constructor 也是静态方法</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  log() &#123;</span><br><span class="line">    <span class="comment">// log 是实例方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Person: PersonConstructor</span><br></pre></td></tr></table></figure><h2 id="接口可以继承-class"><a href="#接口可以继承-class" class="headerlink" title="接口可以继承 class"></a>接口可以继承 class</h2><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的 private 和 protected 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> someInterface <span class="keyword">extends</span> someClass // 会继承class中所有的成员，实例属性和方法</span><br></pre></td></tr></table></figure><h2 id="对上一条的理解"><a href="#对上一条的理解" class="headerlink" title="对上一条的理解"></a>对上一条的理解</h2><blockquote><p>当我们比较带有 private 或 protected 成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 private 成员，那么只有当另外一个类型中也存在这样一个 private 成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 protected 成员也使用这个规则</p></blockquote><p>就是说需要都是某一个基类的子类才行</p><h2 id="受保护的构造函数"><a href="#受保护的构造函数" class="headerlink" title="受保护的构造函数"></a>受保护的构造函数</h2><p>对构造添加 protected，pretected 能被子类访问， private 不能被子类访问</p><h2 id="类中的-readonly"><a href="#类中的-readonly" class="headerlink" title="类中的 readonly"></a>类中的 readonly</h2><p>你可以使用 readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p><h2 id="typeof-class"><a href="#typeof-class" class="headerlink" title="typeof class"></a>typeof class</h2><p>返回一个 类的 静态成员信息和实例化对象的构造函数信息 （静态信息部分）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  <span class="keyword">static</span> standardGreeting = <span class="string">"Hello, there"</span></span><br><span class="line">  greeting: <span class="built_in">string</span></span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.greeting) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Hello, "</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Greeter.standardGreeting</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greeter1: Greeter</span><br><span class="line">greeter1 = <span class="keyword">new</span> Greeter()</span><br><span class="line">alert(greeter1.greet())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greeterMaker: <span class="keyword">typeof</span> Greeter = Greeter <span class="comment">// Greeter 包括了静态信息部分和动态信息部分，所以满足typeof</span></span><br><span class="line">greeterMaker.standardGreeting = <span class="string">"Hey there!"</span></span><br><span class="line"><span class="keyword">var</span> greeter2: Greeter = <span class="keyword">new</span> greeterMaker() <span class="comment">// new greeterMaker返回动态信息，所以蛮子 Greeter， 是class 本生作为类型， 应该指的是示例部分</span></span><br><span class="line">alert(greeter2.greet())</span><br></pre></td></tr></table></figure><h2 id="函数定义类型"><a href="#函数定义类型" class="headerlink" title="函数定义类型"></a>函数定义类型</h2><p>详情参见<a href="https://blog.csdn.net/qq_38277179/article/details/104446592" target="_blank" rel="noopener">函数类型写法</a></p><ol><li>在申明时给每个参数和返回标记处类型，并写函数体</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">arg1: <span class="built_in">string</span></span>): <span class="title">boolean</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">a</span>: (<span class="params">arg1: <span class="built_in">string</span></span>) =&gt; <span class="title">boolean</span> = <span class="title">func</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 type</li></ol><p>3.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params">a: <span class="built_in">string</span></span>)=&gt;<span class="title">boolean</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="function">(<span class="params">b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span> = <span class="function"><span class="keyword">function</span>(<span class="params">a: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Func1 &#123;</span><br><span class="line">  (a: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TypeScript-里的每个函数参数都是必须的"><a href="#TypeScript-里的每个函数参数都是必须的" class="headerlink" title="TypeScript 里的每个函数参数都是必须的"></a>TypeScript 里的每个函数参数都是必须的</h2><p>不能传 null 和 undefined</p><h2 id="interface-可以缩写，-直接在用的地方定义"><a href="#interface-可以缩写，-直接在用的地方定义" class="headerlink" title="interface 可以缩写， 直接在用的地方定义"></a>interface 可以缩写， 直接在用的地方定义</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SomeInterface &#123;</span><br><span class="line">  (a: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: &#123; (a: <span class="built_in">string</span>): <span class="built_in">boolean</span> &#125; = <span class="function"><span class="keyword">function</span>(<span class="params">a: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这两种是等价的、</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>在定义中函数或者 interface 前面， 使用时在后面</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> &#123;</span><br><span class="line">  &lt;T&gt;(a: T): T</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="keyword">class</span> Add&lt;T&gt; &#123;</span><br><span class="line">  value: <span class="built_in">Array</span>[T]</span><br><span class="line">  consturctor(value:T) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value= [value]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型约束</span></span><br><span class="line"><span class="keyword">interface</span> With&lt;T, name&gt; &#123;</span><br><span class="line">  name: T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Add&lt;T <span class="keyword">extends</span> WithNumber&lt;<span class="built_in">string</span>, <span class="string">"number"</span>&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="泛型仅包括泛型接口和泛型类"><a href="#泛型仅包括泛型接口和泛型类" class="headerlink" title="泛型仅包括泛型接口和泛型类"></a>泛型仅包括泛型接口和泛型类</h2><h2 id="ts-需要区分运行时和编译时"><a href="#ts-需要区分运行时和编译时" class="headerlink" title="ts 需要区分运行时和编译时"></a>ts 需要区分运行时和编译时</h2><p>interface 和 const enum 就会在编译时被抹掉, enum 会被计算到生成的代码中， interface 仅作为检查。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> EnumA &#123;</span><br><span class="line">  A,</span><br><span class="line">  B,</span><br><span class="line">  C</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test = [EnumA.A]</span><br><span class="line"><span class="comment">// =&gt; 生成的js 代码</span></span><br><span class="line"><span class="keyword">const</span> test = [<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="typeof-变量"><a href="#typeof-变量" class="headerlink" title="typeof 变量"></a>typeof 变量</h2><p>可以推导出变量 A 的类型， 用于复制某一变量的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> typeA = <span class="keyword">typeof</span> varA</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Record-类型&quot;&gt;&lt;a href=&quot;#Record-类型&quot; class=&quot;headerlink&quot; title=&quot;Record 类型&quot;&gt;&lt;/a&gt;Record 类型&lt;/h2&gt;&lt;p&gt;将一个类型的所有属性值都映射到另一个类型上并创造一个新的类型&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>严格模式</title>
    <link href="https://blog.xunserver.cn/archives/7108a574.html"/>
    <id>https://blog.xunserver.cn/archives/7108a574.html</id>
    <published>2020-03-09T02:05:43.000Z</published>
    <updated>2020-03-09T02:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>“use strict” 指令只允许出现在脚本或函数的开头。推荐在函数定义中开头放置 ‘use strict’ ，而不是在脚本开头</p><h2 id="为什么要使用严格模式"><a href="#为什么要使用严格模式" class="headerlink" title="为什么要使用严格模式"></a>为什么要使用严格模式</h2><p>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</p><ul><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的 Javascript 做好铺垫。</li></ul><p><code>严格模式</code>体现了 Javascript 更合理、更安全、更严谨的发展方向，包括 IE 10 在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。</p><p>另一方面，同样的代码，在<code>严格模式</code>中，可能会有不一样的运行结果；一些在”正常模式”下可以运行的语句，在<code>严格模式</code>下将不能运行。掌握这些内容，有助于更细致深入地理解 Javascript，让你变成一个更好的程序员。</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol><li>this 的指向不再默认指向 全局</li><li>不允许删除变量、对象、函数</li><li>不能使用 8 进制， 转义字符串</li><li>不能使用 with； eval 是沙盒模式</li><li>保留一些关键字</li><li>禁止使用 arguments.callee</li></ol><h2 id="开发中如何规范"><a href="#开发中如何规范" class="headerlink" title="开发中如何规范"></a>开发中如何规范</h2><p>使用 eslint 等静态代码检查工具，提前扫描。</p><h2 id="常用套路"><a href="#常用套路" class="headerlink" title="常用套路"></a>常用套路</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>; <span class="comment">// 防止合并代码代码导致严格模式失效的情况</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h2&gt;&lt;p&gt;“use strict” 指令只允许出现在脚本或函数的开头。推荐在函数定义中开头放置 ‘use strict’ ，而不是在脚
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代码盒子</title>
    <link href="https://blog.xunserver.cn/archives/2aa90bba.html"/>
    <id>https://blog.xunserver.cn/archives/2aa90bba.html</id>
    <published>2020-03-08T23:41:51.000Z</published>
    <updated>2020-03-08T23:41:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a>Array.prototype.sort</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) <span class="comment">// 1,3,4</span></span><br><span class="line">;[<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a) <span class="comment">// 4,3,1</span></span><br></pre></td></tr></table></figure><h2 id="currying-柯里化函数"><a href="#currying-柯里化函数" class="headerlink" title="currying 柯里化函数"></a>currying 柯里化函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 通用的柯里化函数</span></span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      args.push(<span class="built_in">arguments</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">arguments</span>.callee</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cost = currying(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> len = <span class="built_in">arguments</span>.length</span><br><span class="line">  <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    result += <span class="built_in">arguments</span>[len][<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="惰性代码"><a href="#惰性代码" class="headerlink" title="惰性代码"></a>惰性代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEnterKey</span>(<span class="params">keyCode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> finalCode</span><br><span class="line">  <span class="comment">// 遥控器 确认按键</span></span><br><span class="line">  <span class="keyword">if</span> (keyCode === <span class="number">13</span> || keyCode === <span class="number">14</span>) &#123;</span><br><span class="line">    finalCode = keyCode</span><br><span class="line">    isEnterKey = <span class="function"><span class="keyword">function</span>(<span class="params">keyCode</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> finalCode === keyCode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="addEventListener-兼容优化写法"><a href="#addEventListener-兼容优化写法" class="headerlink" title="addEventListener 兼容优化写法"></a>addEventListener 兼容优化写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element, eventName, callback, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    <span class="comment">// 重写函数</span></span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">element, eventName, callback, options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> element.addEventListener(eventName, callback, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">element, eventName, callback, options</span>) </span>&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + eventName, callback, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      element[<span class="string">"on"</span> + eventName] = callback</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addEvent(element, eventName, callback, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理解绑函数也是同上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_off</span>(<span class="params">el, event, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (el.removeEventListener) &#123;</span><br><span class="line">    el.removeEventListener(event, fn, <span class="literal">false</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.detachEvent) &#123;</span><br><span class="line">    el.detachEvent(<span class="string">"on"</span> + event, fn.bind(el))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el[<span class="string">"on"</span> + event] = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为元素添加-on-和-trgger-方法"><a href="#为元素添加-on-和-trgger-方法" class="headerlink" title="为元素添加 on 和 trgger 方法"></a>为元素添加 on 和 trgger 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// on</span></span><br><span class="line">Element.prototype.on = Element.prototype.addEventListener</span><br><span class="line">NodeList.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">event, fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach.call(<span class="keyword">this</span>, el =&gt; &#123;</span><br><span class="line">    el.on(event, fn)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// trigger</span></span><br></pre></td></tr></table></figure><h2 id="使用代理的单例模式"><a href="#使用代理的单例模式" class="headerlink" title="使用代理的单例模式"></a>使用代理的单例模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSingleClass</span>(<span class="params">Fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">newFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> newFn) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Fn(...arguments)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻转数字"><a href="#翻转数字" class="headerlink" title="翻转数字"></a>翻转数字</h2><p>12345 =&gt; 54321</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverserNumber</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newNumber = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (number &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pop = number % <span class="number">10</span></span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / <span class="number">10</span>)</span><br><span class="line">    newNumber = newNumber * <span class="number">10</span> + pop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newNumber</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找到第一个未重复的字符"><a href="#找到第一个未重复的字符" class="headerlink" title="找到第一个未重复的字符"></a>找到第一个未重复的字符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstNumber</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">-1</span>,</span><br><span class="line">    s</span><br><span class="line">  <span class="keyword">while</span> ((s = str[++i])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.lastIndexOf(s) === i) &#123;</span><br><span class="line">      <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制并发数并尽快的完成任务"><a href="#限制并发数并尽快的完成任务" class="headerlink" title="限制并发数并尽快的完成任务"></a>限制并发数并尽快的完成任务</h2><p>需要上传多张，要求尽快的上传完成，但是同时上传的格式为 m</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;url&#125;</span> is loaded`</span>)</span><br><span class="line">      resolve(url)</span><br><span class="line">    &#125;, url * <span class="number">100</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 版本</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">limitLoadAwait</span>(<span class="params">urls, handler, limit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sequence = [].concat(urls)</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">let</span> promises = sequence.splice(<span class="number">0</span>, limit).map(<span class="keyword">async</span> (url, index) =&gt; &#123;</span><br><span class="line">    result.push(<span class="keyword">await</span> handler(url))</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">await</span> sequence.reduce(<span class="keyword">async</span> (pCollect, url, currentIndex) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> pCollect</span><br><span class="line">    <span class="keyword">let</span> fastIndex = <span class="keyword">await</span> <span class="built_in">Promise</span>.race(promises)</span><br><span class="line"></span><br><span class="line">    promises[fastIndex] = handler(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      result.push(res)</span><br><span class="line">      <span class="keyword">return</span> fastIndex</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promises</span><br><span class="line">  &#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async await 版本</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">limitLoadAwait</span>(<span class="params">urls, handler, limit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sequence = [].concat(urls)</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">let</span> promises = sequence.splice(<span class="number">0</span>, limit).map(<span class="keyword">async</span> (url, index) =&gt; &#123;</span><br><span class="line">    result.push(<span class="keyword">await</span> handler(url))</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">await</span> sequence.reduce(<span class="keyword">async</span> (pCollect, url, currentIndex) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> pCollect</span><br><span class="line">    <span class="keyword">let</span> fastIndex = <span class="keyword">await</span> <span class="built_in">Promise</span>.race(promises)</span><br><span class="line"></span><br><span class="line">    promises[fastIndex] = handler(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      result.push(res)</span><br><span class="line">      <span class="keyword">return</span> fastIndex</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promises</span><br><span class="line">  &#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="巧妙结合-promise-和-reduce"><a href="#巧妙结合-promise-和-reduce" class="headerlink" title="巧妙结合 promise 和 reduce"></a>巧妙结合 promise 和 reduce</h2><p>需要连续调用三个接口， 如果接口返回 true，继续调用下个接口。直到返回 false 或者到末尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(url)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadOneByOne</span>(<span class="params">urls, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> urls.reduce(<span class="function">(<span class="params">p, url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        <span class="keyword">return</span> handler(url)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="literal">false</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uploadOneByOne([<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>], uploadImg).then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p>上述方法缺点是不能提前跳出</p><h2 id="循环队列的思考和实现"><a href="#循环队列的思考和实现" class="headerlink" title="循环队列的思考和实现"></a>循环队列的思考和实现</h2><p>传统方式实现队列, 借助数组的 pop 和 unshift 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _data = []</span><br><span class="line">  <span class="keyword">this</span>.enQueue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    _data.push(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.deQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _data.unshift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法的弊端是每次入队出队都需要挪动整个队列。<br>考虑引入头部指针和尾指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _data = []</span><br><span class="line">  <span class="keyword">var</span> head = <span class="number">0</span>,</span><br><span class="line">    tail = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.enQueue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    _data[head++] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.deQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_data.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _data[tail++]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种策略空间换时间的方案，长时间使用后会溢出。所以有循环队列的方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">initLength</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _data = <span class="keyword">new</span> <span class="built_in">Array</span>(initLength),</span><br><span class="line">    tail = <span class="number">-1</span>,</span><br><span class="line">    head = <span class="number">-1</span>,</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">  dataLength = initLength</span><br><span class="line">  <span class="keyword">this</span>.enQueue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value, head, tail)</span><br><span class="line">    <span class="keyword">if</span> (length === dataLength) &#123;</span><br><span class="line">      <span class="comment">// 溢出</span></span><br><span class="line">      <span class="keyword">this</span>.resetQueue()</span><br><span class="line">    &#125;</span><br><span class="line">    head = (head + <span class="number">1</span>) % dataLength</span><br><span class="line">    _data[head] = value</span><br><span class="line">    length++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.deQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"empty"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    tail = (tail + <span class="number">1</span>) % dataLength</span><br><span class="line">    length--</span><br><span class="line">    <span class="keyword">var</span> result = _data[tail]</span><br><span class="line">    _data[tail] = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.resetQueue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 扩容</span></span><br><span class="line">    dataLength = dataLength * <span class="number">2</span></span><br><span class="line">    _data.length = dataLength</span><br><span class="line">    <span class="comment">// 如果</span></span><br><span class="line">    <span class="keyword">if</span> (head &lt; tail) &#123;</span><br><span class="line">      <span class="keyword">var</span> headList = _data.splice(<span class="number">0</span>, head + <span class="number">1</span>)</span><br><span class="line">      _data.splice(tail, <span class="number">0</span>, ...headList)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(_data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态的去扩大长度，还有 deQueue 应该动态减少长度</p><h2 id="经典算法-洗牌算法"><a href="#经典算法-洗牌算法" class="headerlink" title="经典算法-洗牌算法"></a>经典算法-洗牌算法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffleArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len)</span><br><span class="line">    ;[arr[index], arr[len]] = [arr[len], arr[index]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算详解"><a href="#位运算详解" class="headerlink" title="位运算详解"></a>位运算详解</h2><p>与或非异或</p><p>判断是否为奇数 <code>n &amp; 1</code><br><code>n | 0 === n</code> <code>n ^ n === 0</code> <code>n ^ 0 === n</code><br><code>~~</code>表示向 0 取整</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">power</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="n-gt-gt-gt-0-的含义"><a href="#n-gt-gt-gt-0-的含义" class="headerlink" title="n &gt;&gt;&gt; 0 的含义"></a>n &gt;&gt;&gt; 0 的含义</h2><p>toNumber（不能转成 number 的变成 1） =&gt; 整数(~~n) =&gt; toUint32(负数 + 2 的 30 次方)</p><h2 id="GC-那些事儿"><a href="#GC-那些事儿" class="headerlink" title="GC 那些事儿"></a>GC 那些事儿</h2><ul><li>引用计数法. 对每个开辟的空间进行引用计数， 缺点是回带来内存溢出（循环引用的情况）</li><li>标记回收法：从根开始，递归的标记能访问的对象，标记完成后，去虽有未标记的对象进行回收</li></ul><h3 id="常见的内存泄露情况及处理方案"><a href="#常见的内存泄露情况及处理方案" class="headerlink" title="常见的内存泄露情况及处理方案"></a>常见的内存泄露情况及处理方案</h3><ol><li>被遗忘的定时器</li><li>意外的全局变量(使用严格模式)</li><li>脱离 dom 的引用</li><li>闭包</li></ol><h3 id="脱离的-dom-的引用举例"><a href="#脱离的-dom-的引用举例" class="headerlink" title="脱离的 dom 的引用举例"></a>脱离的 dom 的引用举例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"fa"</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.removeChild(div) <span class="comment">// dom删除了</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//div=null          //切断div对div的引用</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(div)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一行代码实现-flat-函数"><a href="#一行代码实现-flat-函数" class="headerlink" title="一行代码实现 flat 函数"></a>一行代码实现 flat 函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat.apply([], arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Array-prototype-sort&quot;&gt;&lt;a href=&quot;#Array-prototype-sort&quot; class=&quot;headerlink&quot; title=&quot;Array.prototype.sort&quot;&gt;&lt;/a&gt;Array.prototype.sort&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端误区</title>
    <link href="https://blog.xunserver.cn/archives/a2e48826.html"/>
    <id>https://blog.xunserver.cn/archives/a2e48826.html</id>
    <published>2020-02-24T09:41:42.000Z</published>
    <updated>2020-02-24T09:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用值作为属性名情况"><a href="#引用值作为属性名情况" class="headerlink" title="引用值作为属性名情况"></a>引用值作为属性名情况</h2><p>先 toString 再 valueOf，使用独一无二的 key 使用 symbol</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;</span><br><span class="line">b[a] = <span class="number">123</span></span><br><span class="line">b[a] === a[<span class="string">"[object object]"</span>] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>es6 中可以使用 Map 或者 weakMap</p><h2 id="constructor-误区"><a href="#constructor-误区" class="headerlink" title="constructor 误区"></a>constructor 误区</h2><p>constructor 是继承的构造函数的 prototype.constructor 属性。<br>对象的__proto__属性指向函数的 <code>prototype</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Woman</span>(<span class="params">sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Woman.prototype = <span class="keyword">new</span> Person(<span class="string">"yan"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> woman1 = <span class="keyword">new</span> Woman(<span class="string">"female"</span>)</span><br><span class="line">woman1.sayName() <span class="comment">// yan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* --------------------------------- */</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name, sex</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> man1 = <span class="keyword">new</span> Man(<span class="string">"xun"</span>, <span class="string">"male"</span>)</span><br><span class="line">man1.sayName() <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name, sex</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person() <span class="comment">// 问题 Man.prototype.contructor === Person    man1.contructor !== Man</span></span><br><span class="line">Man.prototype.contructor = Man <span class="comment">// 修正 contructor, 修复instanceOf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> man1 = <span class="keyword">new</span> Man(<span class="string">"xun"</span>, <span class="string">"fale"</span>)</span><br><span class="line">man1.sayName() <span class="comment">// xun</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend1</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 等价于 Object.create(o)</span></span><br><span class="line">  <span class="keyword">let</span> Fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Fn.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="let-const-和-var-绑定变量的区别"><a href="#let-const-和-var-绑定变量的区别" class="headerlink" title="let const 和 var 绑定变量的区别"></a>let const 和 var 绑定变量的区别</h2><p>区别是 let const 不会绑定在 window 上面。 var 会。 还有严格模式下函数中的 this 模式不会指向 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="this-永远指向最后调用它的那个对象"><a href="#this-永远指向最后调用它的那个对象" class="headerlink" title="this 永远指向最后调用它的那个对象"></a>this 永远指向最后调用它的那个对象</h2><p><code>a.b.c()</code> c 中 this 指向的是 b，除了显示调用 this，其余都是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">foo.call(obj)()</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2   // 还是指向的window</span></span><br></pre></td></tr></table></figure><h2 id="函数作为参数可以这样写"><a href="#函数作为参数可以这样写" class="headerlink" title="函数作为参数可以这样写"></a>函数作为参数可以这样写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">  &#125;.call(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="setTimeout-使用-undefined-作为参数的情况"><a href="#setTimeout-使用-undefined-作为参数的情况" class="headerlink" title="setTimeout 使用 undefined 作为参数的情况"></a>setTimeout 使用 undefined 作为参数的情况</h2><p>什么也不会发生</p><h2 id="箭头函数-this-问题"><a href="#箭头函数-this-问题" class="headerlink" title="箭头函数 this 问题"></a>箭头函数 this 问题</h2><p>里面的 this 是由外层作用域来决定的，且指向函数定义时的 this 而非执行时。 <code>ps 这句话是错误的， 应该从函数调用栈的观点来看待</code></p><p>箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined</p><p>特殊例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"obj"</span>,</span><br><span class="line">  foo1: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  foo2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span></span><br><span class="line"></span><br><span class="line">obj.foo2.call(&#123; <span class="attr">name</span>: <span class="number">3</span> &#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 所以箭头函数的this 应该是执行时向父作用域的this看齐。 执行代码是应该是加上父作用域的执行情况</span></span><br></pre></td></tr></table></figure><p>箭头函数的 this 不能通过 bind,apply,call 来更改，因为箭头函数自身没有 this，依赖的是父作用域中的 this，所以只能通过修改父作用域来修改 this。</p><p>更加的迷惑的行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"window"</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">"obj1"</span>,</span><br><span class="line">  foo1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  foo2: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">"obj2"</span></span><br><span class="line">&#125;</span><br><span class="line">obj1.foo1.call(obj2)() <span class="comment">// obj2 obj2</span></span><br><span class="line">obj1.foo1().call(obj2) <span class="comment">// obj1 obj1  迷惑： 因为返回箭头函数，所以形成了闭包， 需要再次引用父作用域的this</span></span><br><span class="line">obj1.foo2.call(obj2)() <span class="comment">// window window</span></span><br><span class="line">obj1.foo2().call(obj2) <span class="comment">// window obj2</span></span><br></pre></td></tr></table></figure><h2 id="浏览器端-even-loop-执行顺序"><a href="#浏览器端-even-loop-执行顺序" class="headerlink" title="浏览器端 even loop 执行顺序"></a>浏览器端 even loop 执行顺序</h2><ol><li>一开始整个脚本作为一个宏任务执行</li><li>执行中，同步代码直接执行，宏任务进入宏任务队列， 微任务进入本次宏任务的微任务队列</li><li>宏任务执行，微任务执行</li><li>UI 线程 渲染进行</li><li>web worker 进行</li><li>重复第二点</li></ol><p>宏任务包括 script 、setTimeout、setInterval 、setImmediate 、I/O 、UI rendering</p><p>微任务包括 process.nextTick promise.then MutationObserver</p><p>微任务会被添加到本次宏任务的末尾， 而宏任务会到下一次执行</p><h2 id="promise-误区"><a href="#promise-误区" class="headerlink" title="promise 误区"></a>promise 误区</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  resolve(<span class="string">"success"</span>) <span class="comment">// 如果promise 没有 resolve   .then 不会生效。 打印结果是 1 2 4</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2 4 3</span></span><br></pre></td></tr></table></figure><p>一开始进入宏队列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 放入下一个宏队列</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"2"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 属于本次宏任务的微任务</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 4 3 2</span></span><br></pre></td></tr></table></figure><h2 id="影响性能的可能因素"><a href="#影响性能的可能因素" class="headerlink" title="影响性能的可能因素"></a>影响性能的可能因素</h2><ol><li>=== 性能优于 !== if 语句都需要化简为===</li><li>while 循环性能优于 for 养成 while 循环的好习惯 <code>while(len--)</code></li><li>不能使用<code>++a</code>, 性能比直接先++ 弱</li></ol><h2 id="charAt-和-直接字符串下标的区别"><a href="#charAt-和-直接字符串下标的区别" class="headerlink" title="charAt 和 直接字符串下标的区别"></a>charAt 和 直接字符串下标的区别</h2><p>charAt 是 es3 方法， 下标是 es5+方法。 charAt 在越界时返回 “”。字符串下标会让人误以为是可写的。 实际不能写。</p><h2 id="promise-再次理解"><a href="#promise-再次理解" class="headerlink" title="promise 再次理解"></a>promise 再次理解</h2><p>先上结论</p><ol><li>Promise 的状态一经改变就不能再改变。</li><li>.then 和.catch 都会返回一个新的 Promise。catch 也会返回一个 resolve 状态的 Promise。如果 catch 没有抓到错， 也会返回一个新 promise，是调用 catch 的副本。同理上层有 reject 状态时，.then 也会一直返回一个 rejected 状态的副本</li><li>catch 不管被连接到哪里，都能捕获上层的错误。(见 3.2)</li><li>在 Promise 中，返回任意一个非 promise 的值都会被包裹成 promise 对象，例如 return 2 会被包装为 return Promise.resolve(2)。</li><li>Promise 的 .then 或者 .catch 可以被调用多次, 当如果 Promise 内部的状态一经改变，并且有了一个值，那么后续每次调用.then 或者.catch 的时候都会直接拿到该值。(见 3.5)</li><li>.then 或者 .catch 中 return 一个 error 对象并不会抛出错误，所以不会被后续的 .catch 捕获。(见 3.6)</li><li>.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。(见 3.7)</li><li>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。(见 3.8)</li><li>.then 方法是能接收两个参数的，第一个是处理成功的函数，第二个是处理失败的函数，再某些时候你可以认为 catch 是.then 第二个参数的简便写法。(见 3.9)</li><li>.finally 方法也是返回一个 Promise，他在 Promise 结束的时候，无论结果为 resolved 还是 rejected，都会执行里面的回调函数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 证明第二点 每次调用.then .catch 都是返回的新的promise，状态由上一个promise的状态决定 。除了.then 一个 rejected状态的promise返回rejected状态的promise，其余都返回resolved状态</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> promise(<span class="function"><span class="params">res</span> =&gt;</span> res(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// promise resolved:2</span></span><br><span class="line"><span class="keyword">var</span> b = a.then(<span class="built_in">console</span>.log) <span class="comment">// 2  promise resolved:2</span></span><br><span class="line"><span class="built_in">console</span>.log(b === a) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 同上个a</span></span><br><span class="line">b.then(<span class="built_in">console</span>.log) <span class="comment">// 2  promise resolved:2</span></span><br></pre></td></tr></table></figure><p>证明 catch 返回的 promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">Promise</span>.reject(<span class="number">2</span>) <span class="comment">// reject: 2</span></span><br><span class="line"><span class="keyword">var</span> b = a.catch(<span class="built_in">console</span>.log) <span class="comment">// 2    resolve： undifined</span></span><br><span class="line"><span class="keyword">var</span> c = a.then(<span class="built_in">console</span>.log)</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// reject: 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c === a) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// resolve： undifined</span></span><br></pre></td></tr></table></figure><h2 id="验证返回的-promise-副本是深拷贝还是浅拷贝。"><a href="#验证返回的-promise-副本是深拷贝还是浅拷贝。" class="headerlink" title="验证返回的 promise 副本是深拷贝还是浅拷贝。"></a>验证返回的 promise 副本是深拷贝还是浅拷贝。</h2><p>下面例子证明是”浅拷贝”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Promise</span>.resolve(a);</span><br><span class="line"><span class="keyword">var</span> c = = b.catch().then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res===a)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b.catch() === b)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="promise-then-catch-参数非法的情况"><a href="#promise-then-catch-参数非法的情况" class="headerlink" title="promise .then .catch 参数非法的情况"></a>promise .then .catch 参数非法的情况</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="number">2</span>) <span class="comment">// 只生成副本</span></span><br><span class="line">  .then(<span class="built_in">Promise</span>.resolve(<span class="number">3</span>)) <span class="comment">// 只生成副本</span></span><br><span class="line">  .then(<span class="built_in">console</span>.log) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="await-误区和正确阅读"><a href="#await-误区和正确阅读" class="headerlink" title="await 误区和正确阅读"></a>await 误区和正确阅读</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"async1 start"</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"async1 end"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"async2"</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line"><span class="comment">// 之前错误的观点 start =&gt; async1 start" =&gt; async2 =&gt; async1 end</span></span><br><span class="line"><span class="comment">// 实际运行结果 async1 start =&gt; async2 =&gt; start =&gt; async2</span></span><br></pre></td></tr></table></figure><p>所以可以理解为 await 函数是当前函数.then 的一个语法糖。 然后 async 理解成一个 promise 的封装，所以 await 需要是 resolved 或者 rejected 状态的才行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// pending 状态的。</span></span><br></pre></td></tr></table></figure><h2 id="奇特的-Promise-resolve"><a href="#奇特的-Promise-resolve" class="headerlink" title="奇特的 Promise resolve"></a>奇特的 Promise resolve</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fn(<span class="number">123</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1234</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  a(res)</span><br><span class="line">&#125;)</span><br><span class="line">a.then(<span class="built_in">console</span>.log)</span><br><span class="line"><span class="comment">// 1234</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>其实也不奇特，函数是引用传递</p><h2 id="vue-中碰到浏览器死循环的问题，可以换个浏览器试试。"><a href="#vue-中碰到浏览器死循环的问题，可以换个浏览器试试。" class="headerlink" title="vue 中碰到浏览器死循环的问题，可以换个浏览器试试。"></a>vue 中碰到浏览器死循环的问题，可以换个浏览器试试。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引用值作为属性名情况&quot;&gt;&lt;a href=&quot;#引用值作为属性名情况&quot; class=&quot;headerlink&quot; title=&quot;引用值作为属性名情况&quot;&gt;&lt;/a&gt;引用值作为属性名情况&lt;/h2&gt;&lt;p&gt;先 toString 再 valueOf，使用独一无二的 key 使用 sy
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>炫酷的CSS</title>
    <link href="https://blog.xunserver.cn/archives/b29594f7.html"/>
    <id>https://blog.xunserver.cn/archives/b29594f7.html</id>
    <published>2020-02-22T08:33:01.000Z</published>
    <updated>2020-02-22T08:33:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="若隐若现的发光字"><a href="#若隐若现的发光字" class="headerlink" title="若隐若现的发光字"></a>若隐若现的发光字</h2><ol><li>background-image： line</li><li>background-position: -500% =&gt; 500%</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;若隐若现的发光字&quot;&gt;&lt;a href=&quot;#若隐若现的发光字&quot; class=&quot;headerlink&quot; title=&quot;若隐若现的发光字&quot;&gt;&lt;/a&gt;若隐若现的发光字&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;background-image： line&lt;/li&gt;
&lt;li&gt;backgrou
      
    
    </summary>
    
    
  </entry>
  
</feed>
