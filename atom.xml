<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bang</title>
  
  <subtitle>生活总会有惊喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xunserver.cn/"/>
  <updated>2021-11-16T09:44:06.000Z</updated>
  <id>https://blog.xunserver.cn/</id>
  
  <author>
    <name>yangmanman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>glob模式学习</title>
    <link href="https://blog.xunserver.cn/archives/5500de7d.html"/>
    <id>https://blog.xunserver.cn/archives/5500de7d.html</id>
    <published>2021-11-16T09:44:06.000Z</published>
    <updated>2021-11-16T09:44:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>区段 地址分隔符中分隔的区间 比如 <code>/a/b/c</code> 就分为了3个区间</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><code>*</code>  匹配单个区段中0个或者多个字符</li><li><code>**</code> 匹配跨区段 0个或者多个字符, 如果是 <code>**/</code> 只会匹配目录，或者忽略目录</li><li><code>?</code> 匹配一个字符</li><li><code>[]</code>配置括号中某个字符,当开头添加 <code>^</code>、<code>!</code>时表示不匹配</li><li><code>!</code> <code>?</code> <code>*</code> 和小括号一起使用时，和正则类似</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>匹配任意module下全部js，除了index.js</p><blockquote><p>**/module/!(index).js</p></blockquote><p>只能配置 /module 或者 xx/module，不能匹配 /xx/module</p><blockquote><p>*/module  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;区段 地址分隔符中分隔的区间 比如 &lt;code&gt;/a/b/c&lt;/code&gt; 就分为了3个区间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git再学习</title>
    <link href="https://blog.xunserver.cn/archives/141454d6.html"/>
    <id>https://blog.xunserver.cn/archives/141454d6.html</id>
    <published>2021-11-15T09:39:46.000Z</published>
    <updated>2021-11-15T09:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;git-rebase&quot;&gt;&lt;a href=&quot;#git-rebase&quot; class=&quot;headerlink&quot; title=&quot;git rebase&quot;&gt;&lt;/a&gt;git rebase&lt;/h3&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谷歌浏览器开发者工具技巧</title>
    <link href="https://blog.xunserver.cn/archives/ea959a90.html"/>
    <id>https://blog.xunserver.cn/archives/ea959a90.html</id>
    <published>2021-11-15T09:39:15.000Z</published>
    <updated>2021-11-15T09:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="保存为全局变量"><a href="#保存为全局变量" class="headerlink" title="保存为全局变量"></a>保存为全局变量</h3><p>对打印的信息右键保存为全局变量</p><h3 id="复制dom-element-strng"><a href="#复制dom-element-strng" class="headerlink" title="复制dom element strng"></a>复制dom element strng</h3><p>点击直接ctrl+c</p><h3 id="element面板调整数字大小"><a href="#element面板调整数字大小" class="headerlink" title="element面板调整数字大小"></a>element面板调整数字大小</h3><p>上下箭头 + ctrl alt 或者shift一个一个试一下</p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><ul><li>ctrl + p 打开资源查找器，输入 &gt; 进入命令行。</li><li>直接ctrl + p + shift</li></ul><h3 id="和"><a href="#和" class="headerlink" title="$ 和 ?"></a>$ 和 ?</h3><ul><li>$ 是 document.querySelector()别名</li><li>? 是 document.querySelectorAll() 别名</li><li>$_ 表示上一次的执行结果,像是对上一次语句左边拼接 = </li></ul><h3 id="console一定是同步的吗？"><a href="#console一定是同步的吗？" class="headerlink" title="console一定是同步的吗？"></a>console一定是同步的吗？</h3><p>console打印需要时间，再打印出结果前，是以引用的方式保存的。所有有可能打印的结果不准确。所以应该尽量打印基本类型，或者使用断点。</p><h3 id="console控件台总是被async-包围"><a href="#console控件台总是被async-包围" class="headerlink" title="console控件台总是被async 包围"></a>console控件台总是被async 包围</h3><p>一些异步的方法可以直接使用await，比如fetch语句</p><h3 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h3><p>在断点语句添加判断语句， 不需要if，如果条件满足就会断点。条件语句总是会执行</p><h3 id="条件断点和console黑科技"><a href="#条件断点和console黑科技" class="headerlink" title="条件断点和console黑科技"></a>条件断点和console黑科技</h3><p>利用上面的特性，因为console总是返回undefined，所以可以添加一个条件语句console.log()</p><h3 id="条件和console"><a href="#条件和console" class="headerlink" title="条件和console"></a>条件和console</h3><p>console.assert()，第一个参数写语句，后面写打印</p><h3 id="log-多参数打印技巧"><a href="#log-多参数打印技巧" class="headerlink" title="log 多参数打印技巧"></a>log 多参数打印技巧</h3><p>console.log(x1, x2, x3) 修改改成 console.log({ x1, x2, x3 }) 就可以看到每个位置是什么参数，当然可能会出现值不准确的问题。</p><h3 id="打印数组和对象"><a href="#打印数组和对象" class="headerlink" title="打印数组和对象"></a>打印数组和对象</h3><p>console.table</p><h3 id="过滤请求"><a href="#过滤请求" class="headerlink" title="过滤请求"></a>过滤请求</h3><ul><li>filter 过滤框中添加 method:GET 就会仅显示GET请求，-method:GET 就会过滤GET请求只显示其他，也可以勾选invert选项</li><li>安装crtl 点击资源类型可以多选</li></ul><h3 id="勾选禁用缓存和硬性刷新浏览器的区别"><a href="#勾选禁用缓存和硬性刷新浏览器的区别" class="headerlink" title="勾选禁用缓存和硬性刷新浏览器的区别"></a>勾选禁用缓存和硬性刷新浏览器的区别</h3><p>禁用缓存会每个资源都不使用缓存，硬性刷新只会在dom初始化阶段的请求添加禁止缓存</p><h3 id="添加network展示的列"><a href="#添加network展示的列" class="headerlink" title="添加network展示的列"></a>添加network展示的列</h3><p>在表头右键，一般添加上method方法</p><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><p>命令行输入 create new snippet 新建代码片段，通过!加代码片段名称调用</p><h3 id="利用source-gt-filesystem-实现在浏览器中修改代码，并同步css"><a href="#利用source-gt-filesystem-实现在浏览器中修改代码，并同步css" class="headerlink" title="利用source -&gt; filesystem 实现在浏览器中修改代码，并同步css"></a>利用source -&gt; filesystem 实现在浏览器中修改代码，并同步css</h3><p>本地起一个服务，把代码目录拖到filesystem, 对变绿色的代码就可以直接修改，保存后隐射到本地</p><h3 id="page-filesystem-overrides-contentScript的使用"><a href="#page-filesystem-overrides-contentScript的使用" class="headerlink" title="page filesystem overrides contentScript的使用"></a>page filesystem overrides contentScript的使用</h3><ul><li>page 用于查看当前网页下面文件</li><li>filesystem 连接本地和浏览器，在浏览器中的修改会同步到本地代码。文件标志是绿色</li><li>overrides 不能和filesystem共用，修改文件时优先保存overrides。通过完全一致的url对应，包括查询参数。文件标志是紫色。浏览器加载时会本地替换这个资源</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;保存为全局变量&quot;&gt;&lt;a href=&quot;#保存为全局变量&quot; class=&quot;headerlink&quot; title=&quot;保存为全局变量&quot;&gt;&lt;/a&gt;保存为全局变量&lt;/h3&gt;&lt;p&gt;对打印的信息右键保存为全局变量&lt;/p&gt;
&lt;h3 id=&quot;复制dom-element-strng&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端缓存</title>
    <link href="https://blog.xunserver.cn/archives/97f0c4bf.html"/>
    <id>https://blog.xunserver.cn/archives/97f0c4bf.html</id>
    <published>2021-11-14T10:43:41.000Z</published>
    <updated>2021-11-14T10:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="请求报文和相应报文"><a href="#请求报文和相应报文" class="headerlink" title="请求报文和相应报文"></a>请求报文和相应报文</h3><p>报文中报头部分使用冒号分隔的键值对组成，称为首部字段。部分首部字段在响应和请求中均有，称为通用首部字段。</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><h4 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h4><p>(响应首部字段)资源有效时间，表示在此事件前资源使用缓存。<code>Expires: Wed, 11 May 2022 03:50:47 GMT</code></p><h4 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h4><p>（通用首部字段）缓存控制，由以下字段组成</p><ul><li>max-age 缓存最大时间，是一个相对时间，同时可用于请求，表示希望获得一个max-age 不大于指定值的资源，单位是秒。max-age 会覆盖expires，一般expires和max-age需要同时存在，兼容性设置。</li><li>s-maxage  表示代理服务器最大缓存时间，公共服务器接受到这个参数后，会直接使用这个，忽略其他expires 和 max-age</li><li>public/private 表示资源是否能够被缓存服务器缓存， 不过一般缓存服务器不会处理这个字段，照样缓存。</li><li>no-cache/no store，no-cache在请求中时，表示不使用缓存服务器资源，使用源资源，同时也可以向源资源表示，使用最新资源。在响应中需要使用no-store 才表示真正的不缓存</li><li>no-cache 不进行强缓存（重要）</li><li>no-store 不强缓存，也不协商缓存。</li></ul><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><h4 id="Last-Modified-和-If-Modified-Since"><a href="#Last-Modified-和-If-Modified-Since" class="headerlink" title="Last-Modified 和 If-Modified-Since"></a>Last-Modified 和 If-Modified-Since</h4><p>Last-Modified 资源最后修改时间，浏览器接收当前资源后，下次在请求头中添加If-Modified-Since 字段。服务器验证是否有效，有效返回304。无效返回200、最新资源和最新的Last-Modified</p><p>Last-Modified值实列如下，时间精度到秒<code>Last-Modified: Fri , 14 May 2021 17:23:13 GMT</code>。如果资源是毫秒级别的更新，可能会出现资源不是最新的情况。所以新出现了Etag和If-None-Match</p><h4 id="Etag-和-If-None-match"><a href="#Etag-和-If-None-match" class="headerlink" title="Etag 和 If-None-match"></a>Etag 和 If-None-match</h4><p>Etag在响应头中返回，用于标志资源的唯一性，资源每次变化时，Etag会重新生成。浏览器下次发送请求通过If-None-match发送。服务器对比处理逻辑同Last-Modified</p><h3 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h3><ul><li>memory cache 内存缓存</li><li>disk cache</li></ul><h3 id="缓存时间如何计算"><a href="#缓存时间如何计算" class="headerlink" title="缓存时间如何计算"></a>缓存时间如何计算</h3><p>缓存新鲜度 = max-age || (expires - date)  date 表示响应头中的Date字段<br>缓存使用期 = 响应使用期 + 传输延迟时间 + 停留缓存时间</p><ul><li>响应使用期 = max(0, response_time - date_value)，然后再和响应头age（秒）max</li><li>传输延迟时间 = 响应时间 - 请求时间</li><li>停留缓存时间 = now - 响应时间   now表示电脑当前时间。修改电脑时间使缓存失效的关键点。</li></ul><p>当缓存使用期大于缓存新鲜度时，强缓存会失效，会启用缓存协商，如果无协商缓存，会重新请求。</p><h3 id="启发式缓存"><a href="#启发式缓存" class="headerlink" title="启发式缓存"></a>启发式缓存</h3><p>上述可见强缓存新鲜度 = max-age || (expires - date)。如果max-age、expires、date不存在。缓存新鲜度计算规则 max(0, date - Last-Modified ) * 10%</p><h3 id="开发模式下的刷新操作"><a href="#开发模式下的刷新操作" class="headerlink" title="开发模式下的刷新操作"></a>开发模式下的刷新操作</h3><ul><li>硬性重新加载：不使用本地缓存，同时请求时在请求中添加cache-control: no-cache, 告知服务器和代理服务器不使用缓存。</li></ul><p>使用硬性加载没有用的原因是，这两个请求头仅在页面渲染时添加，通过动态脚本添加的资源不会添加这个请求头，还是会走强缓存。</p><ul><li>清空缓存并强制加载：清空本地缓存并硬性加载</li></ul><h3 id="spa情况下如何配置缓存策略"><a href="#spa情况下如何配置缓存策略" class="headerlink" title="spa情况下如何配置缓存策略"></a>spa情况下如何配置缓存策略</h3><p>spa通过加载一个index.html,index.html中再加载相关文件完成界面。这里就有两个地方index.html 和 其他资源。</p><ul><li><p>index.html 文件名不会变化，需要使用协商缓存，服务端配置max-age = 0, 但是不能配置cache-control: no-store</p></li><li><p>其余资源，设置强缓存。根据文件内容变化文件名，保证每次引用都是新的，也不会走缓存。</p></li></ul><h3 id="webpack-如何使用强缓存"><a href="#webpack-如何使用强缓存" class="headerlink" title="webpack 如何使用强缓存"></a>webpack 如何使用强缓存</h3><ul><li>hash 项目级别的hash</li><li>chunkhash 根据 入口文件相关的依赖进行hash</li><li>contenthash，根据每个文件内容变化的hash</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;请求报文和相应报文&quot;&gt;&lt;a href=&quot;#请求报文和相应报文&quot; class=&quot;headerlink&quot; title=&quot;请求报文和相应报文&quot;&gt;&lt;/a&gt;请求报文和相应报文&lt;/h3&gt;&lt;p&gt;报文中报头部分使用冒号分隔的键值对组成，称为首部字段。部分首部字段在响应和请求中均有
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ccna</title>
    <link href="https://blog.xunserver.cn/archives/838de56f.html"/>
    <id>https://blog.xunserver.cn/archives/838de56f.html</id>
    <published>2021-11-10T04:19:20.000Z</published>
    <updated>2021-11-10T04:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三种配置模式"><a href="#三种配置模式" class="headerlink" title="三种配置模式"></a>三种配置模式</h3><ol><li>用户模式 console登录上去默认   命令行标识符为 &gt; </li><li>特权模式 输入 en | enable进入， 标识符为 #</li><li>配置模式 输入 configrue terminal  标识符为(terminal)#</li></ol><h3 id="console-配置密码"><a href="#console-配置密码" class="headerlink" title="console 配置密码"></a>console 配置密码</h3><p>防止内鬼直接console进入设备<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">en  <span class="comment"># 特权模式</span></span><br><span class="line">configure t <span class="comment"># 配置模式</span></span><br><span class="line">line <span class="comment"># 线缆模式</span></span><br><span class="line">line console 0  <span class="comment"># 选择console 0</span></span><br><span class="line">password somepass  <span class="comment"># 设置密码</span></span><br><span class="line">login  <span class="comment"># 激活登录 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消密码</span></span><br><span class="line">no login  <span class="comment"># 不激活密码</span></span><br><span class="line">no password  <span class="comment"># 删除密码</span></span><br></pre></td></tr></table></figure></p><p>华为仅只有用户视图密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">system-view</span><br><span class="line">user-interface console 0</span><br><span class="line"><span class="comment"># 路由器</span></span><br><span class="line">authentication-mode password</span><br><span class="line"><span class="comment"># 交换机</span></span><br><span class="line"><span class="built_in">set</span> authentication password simple somepassword</span><br></pre></td></tr></table></figure></p><h3 id="特权模式设置密码"><a href="#特权模式设置密码" class="headerlink" title="特权模式设置密码"></a>特权模式设置密码</h3><p>需要在配置模式设置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">enable</span> password somepassword</span><br><span class="line"></span><br><span class="line"><span class="literal">no</span> <span class="builtin-name">enable</span> password 删除密码</span><br></pre></td></tr></table></figure></p><h3 id="查看线缆链接情况"><a href="#查看线缆链接情况" class="headerlink" title="查看线缆链接情况"></a>查看线缆链接情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">show line </span><br><span class="line"></span><br><span class="line"><span class="comment"># 华为</span></span><br><span class="line">show user-interface</span><br></pre></td></tr></table></figure><p>星号表示当前正在使用的端口<br>vty: 虚拟tty<br>cty: console tty<br>aux: 不常用</p><h3 id="查看当前模式下所有配置"><a href="#查看当前模式下所有配置" class="headerlink" title="查看当前模式下所有配置"></a>查看当前模式下所有配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思科</span></span><br><span class="line">show running-config</span><br><span class="line"><span class="comment"># 华为</span></span><br><span class="line">display currenting-configure</span><br></pre></td></tr></table></figure><h3 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h3><p>不保存配置关机后之前的配置会消失<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enable</span></span><br><span class="line">write</span><br><span class="line"></span><br><span class="line"><span class="comment"># 华为只在用户模式保存</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;三种配置模式&quot;&gt;&lt;a href=&quot;#三种配置模式&quot; class=&quot;headerlink&quot; title=&quot;三种配置模式&quot;&gt;&lt;/a&gt;三种配置模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用户模式 console登录上去默认   命令行标识符为 &amp;gt; &lt;/li&gt;
&lt;li&gt;特权模式
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>umd,cmd,commonjs,esmodule学习教程</title>
    <link href="https://blog.xunserver.cn/archives/4986aa26.html"/>
    <id>https://blog.xunserver.cn/archives/4986aa26.html</id>
    <published>2021-11-04T02:56:36.000Z</published>
    <updated>2021-11-04T02:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="amd"><a href="#amd" class="headerlink" title="amd"></a>amd</h3><p>amd Asynchronous Module Definition 异步模块化定义, requirejs实现了这套规范，思想是前置依赖，主要包括以下几个方法</p><ul><li>require.config() 配置依赖</li><li>define([deps], callback)。定义模块</li><li>require([deps], callback)。引用模块<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dependA.js</span></span><br><span class="line">define([</span><br><span class="line">    <span class="string">'dependB'</span></span><br><span class="line">], <span class="function"><span class="keyword">function</span>(<span class="params">dependB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        start: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(dependB.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dependB.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">'dependB'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    baseurl: <span class="string">'/static/umd'</span>,</span><br><span class="line">    paths: &#123;</span><br><span class="line">        <span class="string">"dependB"</span>: <span class="string">'dependB'</span>,</span><br><span class="line">        <span class="string">"dependA"</span>: <span class="string">'dependA'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'dependA'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">dependA</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(dependA)</span><br><span class="line">    dependA.start()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>查看<a href="/static/amd/amd.html">演示</a>。requirejs 需要预先配置好所有依赖。不能动态获取所有</p><h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><p>cmd 通用模块定义（Common Module Definition）。seajs实现了这套规范，依赖是就近依赖，延迟执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">seajs.config(&#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">        dependB: <span class="string">'./dependB.js'</span></span><br><span class="line">        dependA: <span class="string">'./dependA.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">seajs.use(<span class="string">'dependA'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// dependA.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dependB = <span class="built_in">require</span>(<span class="string">'dependB'</span>);</span><br><span class="line">    dependB.start()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// dependB.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    exports.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">'dependB'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>查看<a href="/static/cmd/cmd.html">演示</a>。seajs通过正则解析，预先将当前文件的require的module加载，所以require可以同步加载</p><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><p>commonjs 是nodejs实现的一套模块化规范，和seajs类似。通过require、exports、module实现动态导入导出，不过不需要写define语句。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'A'</span>);</span><br><span class="line"></span><br><span class="line">exports.someA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'someA'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>commonjs下，为什么我们可以在文件中使用<strong>dirname,</strong>filename, require，module,exports等。 nodejs会将js文件进行包裹，类似下面这种。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports, require, module, __dirname, __filename,...</span>) </span>&#123;</span><br><span class="line">    exports.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'say'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>包装函数如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wraper</span>(<span class="params">functionStr</span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`function(exports, require, module, __dirname, __filename) &#123;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;functionStr&#125;</span></span></span><br><span class="line"><span class="string">    &#125;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> moduleFunction = wraper<span class="string">`</span></span><br><span class="line"><span class="string">    export.say = function() &#123;</span></span><br><span class="line"><span class="string">        console.log('say')</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">runInThisContext(moduleFunction)(exports, <span class="built_in">require</span>, <span class="built_in">module</span>, __dirname, __filename)</span><br></pre></td></tr></table></figure></p><p>runInThisContext 相当于eval或者new Function。实现动态申明函数的功能。读取文件内容 =&gt; 添加包裹 =&gt; eval生成函数 =&gt; 添加相应参数 =&gt; 执行，require整个流程。</p><p>在代码中可以打印require和module，查看具体详情。</p><h4 id="require加载流程"><a href="#require加载流程" class="headerlink" title="require加载流程"></a>require加载流程</h4><p>require加载模块有3类</p><ul><li>nodejs底层核心模块</li><li>工程中代码</li><li>npm 中的第三方代码</li></ul><p>require标志符指require时的参数，按照以下方式解析</p><ul><li>如果标识符是核心模块，加载核心模块。</li><li>如果标志符以<code>./</code> <code>/</code> <code>../</code>开头，视为项目代码，会解析成绝对路径，作为module标志</li><li>如果不满足上面，则认为是第三方模块。</li></ul><p>解析第三方模块规则如下</p><ul><li>从当前__dirname 开始，寻找是否存在node_modules, 在node_module 中查找标识符目录，如果查询到，检查package.json 中是否存在main字段，如果有根据main字段指向的js作为module入口，如果没有使用index.js ，index.json ，index.node。</li><li>如果未找到node_modules, 在父级目录查找，直到根目录。重复执行上述流程。</li></ul><p>!()[]</p><p>require 解析是按照深度优先的原则，按照代码执行顺序解析require。</p><h4 id="require-简单源码"><a href="#require-简单源码" class="headerlink" title="require 简单源码"></a>require 简单源码</h4><p>commomjs 将所有文件视为一个module，module包括文件解析相关信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> cacheModule = Module._cache[id]</span><br><span class="line">    <span class="keyword">if</span>(cacheModule) &#123;</span><br><span class="line">         <span class="keyword">return</span> cacheModule.exports</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">        exports: &#123;&#125;,</span><br><span class="line">        loaded: <span class="literal">false</span>,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fileContent = getFileContent(id);</span><br><span class="line"></span><br><span class="line">    Module._cache[id] = <span class="built_in">module</span>;</span><br><span class="line"></span><br><span class="line">    runInThisContext(warper(fileContent))(<span class="built_in">module</span>, <span class="built_in">module</span>.exports, <span class="built_in">require</span>, __filename, __dirname)</span><br><span class="line">    <span class="built_in">module</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上所示，相同标识符下，require只会加载一次，避免了循环引用问题。 delete require.cache[moduleName];  具体参考 <a href="https://www.cnblogs.com/cangqinglang/p/9528815.html" target="_blank" rel="noopener">commonjs 详解</a></p><h3 id="umd"><a href="#umd" class="headerlink" title="umd"></a>umd</h3><p>umd是兼容amd和commonjs的规范，对代码做相应包括可实现。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">context, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'是commonjs模块规范，nodejs环境'</span>)</span><br><span class="line">        <span class="built_in">module</span>.exports = factory();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'是AMD模块规范，如require.js'</span>)</span><br><span class="line">        define(factory)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.cmd) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'是CMD模块规范，如sea.js'</span>)</span><br><span class="line">        define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = factory()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没有模块环境，直接挂载在全局对象上'</span>)</span><br><span class="line">        root.umdModule = factory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// js 代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;amd&quot;&gt;&lt;a href=&quot;#amd&quot; class=&quot;headerlink&quot; title=&quot;amd&quot;&gt;&lt;/a&gt;amd&lt;/h3&gt;&lt;p&gt;amd Asynchronous Module Definition 异步模块化定义, requirejs实现了这套规范，思想是前置
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vercel白嫖教程</title>
    <link href="https://blog.xunserver.cn/archives/f79d6af9.html"/>
    <id>https://blog.xunserver.cn/archives/f79d6af9.html</id>
    <published>2021-09-07T09:00:02.000Z</published>
    <updated>2021-09-07T09:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>vercel 可以托管静态资源，ssr，和serverless 函数。官网地址 <a href="https://vercel.com，首次使用需要邮箱注册，建议绑定github" target="_blank" rel="noopener">https://vercel.com，首次使用需要邮箱注册，建议绑定github</a> 账号，方便登录。</p><h4 id="托管vue项目"><a href="#托管vue项目" class="headerlink" title="托管vue项目"></a>托管vue项目</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;vercel 可以托管静态资源，ssr，和serverless 函数。官网地址 &lt;a href=&quot;https://vercel.com，首次
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vuex-db设计</title>
    <link href="https://blog.xunserver.cn/archives/a8ae78e0.html"/>
    <id>https://blog.xunserver.cn/archives/a8ae78e0.html</id>
    <published>2021-08-25T06:04:28.000Z</published>
    <updated>2021-08-25T06:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>系统存储，普通数据存储，用户数据存储，页面数据存储，页面用户数据存储，路由快照和路由用户快照。</p><h3 id="系统存储"><a href="#系统存储" class="headerlink" title="系统存储"></a>系统存储</h3><p>用于存储用户打开的标签页，是否展开侧边栏，页面大小，主题等数据，</p><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> low <span class="keyword">from</span> <span class="string">'lowdb'</span>;</span><br><span class="line"><span class="keyword">import</span> LocalStorage <span class="keyword">from</span> <span class="string">'lowdb/adapters/LocalStorage'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> LocalStorage(<span class="string">'db'</span>);   <span class="comment">// localstorage 名称</span></span><br><span class="line"><span class="keyword">const</span> db = low(adapter);</span><br><span class="line"></span><br><span class="line">db.defaults(&#123;</span><br><span class="line">    posts: []</span><br><span class="line">&#125;).write()</span><br><span class="line"></span><br><span class="line">db.get(<span class="string">'posts'</span>).push(&#123; title: <span class="string">'vue解密'</span> &#125;).write()</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.db.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> low <span class="keyword">from</span> <span class="string">'lowdb'</span>;</span><br><span class="line"><span class="keyword">import</span> LocalStorage <span class="keyword">from</span> <span class="string">'lowdb/adapters/LocalStorage'</span>;</span><br><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">'@/utils'</span></span><br><span class="line"></span><br><span class="line">db</span><br><span class="line">    .defaults(&#123;</span><br><span class="line">        sys: &#123;&#125;,</span><br><span class="line">        database: &#123;&#125; </span><br><span class="line">    &#125;)</span><br><span class="line">    .write()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> db</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化路径, 如果提供了默认值，会将默认值写入。如果已经存在值并且值校验出错，重新写入默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pathInit</span>(<span class="params">&#123; dbName = <span class="string">'database'</span>, path = <span class="string">''</span> , user = user, validator = (</span>) =&gt; <span class="title">true</span>, <span class="title">defaultValue</span> = '' &#125;) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> uuid = utils.cookies.get(<span class="string">'uuid'</span>) || <span class="string">'ghost-uuid'</span>;</span><br><span class="line">    <span class="keyword">const</span> userPath = user ? <span class="string">`user.`</span>$&#123;uuid&#125; : <span class="string">'public'</span>;</span><br><span class="line">    <span class="keyword">const</span> keyPath = path ? <span class="string">`.<span class="subst">$&#123;path&#125;</span>`</span> : <span class="string">''</span></span><br><span class="line">    <span class="keyword">const</span> finalPath = <span class="string">`<span class="subst">$&#123;dbName&#125;</span>.<span class="subst">$&#123;userPath&#125;</span><span class="subst">$&#123;keyPath&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> value = db.get(finalPath).value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value === <span class="literal">undefined</span> || !validator(value) ) &#123;</span><br><span class="line">        db.set(finalPath, defaultValue).write()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> finalPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dbSet</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    dbName = <span class="string">'database'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    path = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    user = true,</span></span></span><br><span class="line"><span class="function"><span class="params">    value = <span class="string">''</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    db.set(pathInit(&#123;</span><br><span class="line">        dbName,</span><br><span class="line">        path,</span><br><span class="line">        user,</span><br><span class="line">    &#125;), value)</span><br><span class="line">    .write()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取db值，如果没有值，设置一个默认值并返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dbGet</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    dbName = <span class="string">'database'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    path = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    user = true,</span></span></span><br><span class="line"><span class="function"><span class="params">    defaultValue = <span class="string">''</span></span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cloneDeep(db.get(pathInit(&#123;</span><br><span class="line">        dbName,</span><br><span class="line">        path,</span><br><span class="line">        user,</span><br><span class="line">        defaultValue</span><br><span class="line">    &#125;)).value())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取一个db对象，可以执行set, write操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">database</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    dbName = <span class="string">'database'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    path = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    user = true,</span></span></span><br><span class="line"><span class="function"><span class="params">    defaultValue = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    validator = (</span>) =&gt; <span class="title">true</span></span></span><br><span class="line"><span class="function">&#125;) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> db.get(pathInit(&#123;</span><br><span class="line">        dbName,</span><br><span class="line">        path,</span><br><span class="line">        user,</span><br><span class="line">        defaultValue,</span><br><span class="line">        validator</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/module/db.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> &#123; database <span class="keyword">as</span> getDatabase, dbGet, dbSet &#125; <span class="keyword">from</span> <span class="string">'@/utils/util.db.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespace: <span class="literal">true</span>,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="keyword">set</span>(ctx, &#123;</span><br><span class="line">            dbName,</span><br><span class="line">            path,</span><br><span class="line">            value,</span><br><span class="line">            user = <span class="literal">false</span></span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            <span class="keyword">return</span> dbSet(&#123; dbName, path, value, user &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span>(ctx, &#123;</span><br><span class="line">            dbName,</span><br><span class="line">            path,</span><br><span class="line">            defaultValue,</span><br><span class="line">            user = <span class="literal">false</span></span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            <span class="keyword">return</span> dbGet(&#123; dbName, path, defaultValue, user &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        database(ctx, &#123; user = <span class="literal">false</span>, defaultValue = &#123;&#125; &#125;) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDatabase(&#123; user, defaultValue &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        databaseClear(ctx, &#123; user = <span class="literal">false</span> &#125;) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDatabase(&#123;user, <span class="attr">validator</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">false</span>, <span class="attr">defaultValue</span>: &#123;&#125;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        databasePage(ctx, &#123; user = <span class="literal">false</span>, basis = <span class="string">'fullpath'</span>&#125;) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDatabase(&#123;</span><br><span class="line">                path: <span class="string">`page.<span class="subst">$&#123;router.app.$route[basis]&#125;</span>`</span>,</span><br><span class="line">                user,</span><br><span class="line">                defaultValue: &#123;&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        databasePageClear(&#123;</span><br><span class="line">            user = <span class="literal">false</span>,</span><br><span class="line">            basis = <span class="string">'fullpath'</span>,</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDatabase(&#123; </span><br><span class="line">                path: <span class="string">`page.<span class="subst">$&#123;router.app.$route[basis]&#125;</span>`</span>,</span><br><span class="line">                user, <span class="attr">validator</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">false</span>,</span><br><span class="line">                defaultValue: &#123;&#125; </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;系统存储，普通数据存储，用户数据存储，页面数据存储，页面用户数据存储，路由快照和路由用户快照。&lt;/p&gt;
&lt;h3 id=&quot;系统存储&quot;&gt;&lt;a h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack-library</title>
    <link href="https://blog.xunserver.cn/archives/23360043.html"/>
    <id>https://blog.xunserver.cn/archives/23360043.html</id>
    <published>2021-08-20T06:16:39.000Z</published>
    <updated>2021-08-20T06:16:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;### &lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js编码规范</title>
    <link href="https://blog.xunserver.cn/archives/e960579a.html"/>
    <id>https://blog.xunserver.cn/archives/e960579a.html</id>
    <published>2021-08-13T09:29:12.000Z</published>
    <updated>2021-08-13T09:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-编码规范"><a href="#Javascript-编码规范" class="headerlink" title="Javascript 编码规范"></a>Javascript 编码规范</h1><p>[TOC]</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>原则: 必须坚持的指导思想</li><li>建议: 需要加以考虑的约定</li><li>不好示例: 反面教材，里面的都是错误示范</li><li>推荐示例: 正面教程，可以按照里面示例类推</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="建议-不使用index文件实现逻辑，index用于聚合导出。"><a href="#建议-不使用index文件实现逻辑，index用于聚合导出。" class="headerlink" title="建议: 不使用index文件实现逻辑，index用于聚合导出。"></a>建议: 不使用index文件实现逻辑，index用于聚合导出。</h4><p>避免<code>componentA/index.js</code>，然后在index.js 写component的逻辑，正确的写法是 <code>componentA/componentA.js</code>。 <code>componentA/index.js</code> 仅作导出。当你在浏览器resource查找文件就知道了-__-。</p><h3 id="命名原则"><a href="#命名原则" class="headerlink" title="命名原则"></a>命名原则</h3><h4 id="原则-源文件编码格式（包括注释）必须是UTF-8"><a href="#原则-源文件编码格式（包括注释）必须是UTF-8" class="headerlink" title="原则: 源文件编码格式（包括注释）必须是UTF-8"></a>原则: 源文件编码格式（包括注释）必须是UTF-8</h4><p>大家一定被乱码的解释折磨过….</p><h4 id="原则-方法、变量需要一个好名字"><a href="#原则-方法、变量需要一个好名字" class="headerlink" title="原则: 方法、变量需要一个好名字"></a>原则: 方法、变量需要一个好名字</h4><p>好的名字有包括不局限以下特征:</p><ol><li>清晰表达意图：使用有描述性的型单词，避免使用单个字母，或者自创缩写来表达，比如 let lastDay 比 let ld 要好</li><li>必须使用英文单词，不允许出现中文拼音（约定熟成除外）。中文拼音在多音字表现上会有歧义，而且不太利于团队以后成成长</li><li>避免误导性命名，有误导的命名比表达不清晰还要危险，比如 let nameArray 不是一个array类型，而是一个字符串。</li><li>能区分出意思，建议不要在变量后面加上data，info，object等一般意思的词。比如productInfo和productData有什么区别。</li></ol><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="原则-构造函数、类命名都是用大驼峰"><a href="#原则-构造函数、类命名都是用大驼峰" class="headerlink" title="原则: 构造函数、类命名都是用大驼峰"></a>原则: 构造函数、类命名都是用大驼峰</h4><p>推荐示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kind</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>() </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>不好示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kind</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>() </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="原则-方法命名使用动词、动宾结构，并遵守驼峰原则"><a href="#原则-方法命名使用动词、动宾结构，并遵守驼峰原则" class="headerlink" title="原则: 方法命名使用动词、动宾结构，并遵守驼峰原则"></a>原则: 方法命名使用动词、动宾结构，并遵守驼峰原则</h4><p>格式如下</p><ol><li>get + 非布尔属性名</li><li>is + 布尔属性名</li><li>set + 属性名</li><li>has + 名字\形容词</li><li>动词</li><li>动词 + 宾语<br>不好的示例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Finished</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visible</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DRAW</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyListener</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>推荐示例:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFinished</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setVisible</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addKeyListener</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="原则-方法名不能过长影响可读性"><a href="#原则-方法名不能过长影响可读性" class="headerlink" title="原则: 方法名不能过长影响可读性"></a>原则: 方法名不能过长影响可读性</h4><p>方法名不能超过15个字符，可以采用去掉元音字符或者业界约定的缩写来表示。<br>比如 <code>function getCustomerInfomation() {}</code> 可以改成 <code>function getCustomerInfo() {}</code></p><h4 id="建议-私有属性或者方法，-建议以下划线-开头"><a href="#建议-私有属性或者方法，-建议以下划线-开头" class="headerlink" title="建议: 私有属性或者方法， 建议以下划线_开头"></a>建议: 私有属性或者方法， 建议以下划线_开头</h4><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="原则-变量名遵循驼峰风格-首字母大写，后续每个单词小写"><a href="#原则-变量名遵循驼峰风格-首字母大写，后续每个单词小写" class="headerlink" title="原则: 变量名遵循驼峰风格, 首字母大写，后续每个单词小写"></a>原则: 变量名遵循驼峰风格, 首字母大写，后续每个单词小写</h4><h4 id="建议-避免使用否定的布尔变量名"><a href="#建议-避免使用否定的布尔变量名" class="headerlink" title="建议: 避免使用否定的布尔变量名"></a>建议: 避免使用否定的布尔变量名</h4><p>对于否定的布尔变量名，当使用逻辑非运算符时，会出现双重否定，对阅读造成阻碍，比如<code>!isNotError</code>。</p><p>不好示例:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNotError = <span class="literal">true</span>;  <span class="comment">// 到底有没有错</span></span><br><span class="line"><span class="keyword">const</span> inNotFinished = <span class="literal">false</span>; <span class="comment">// 结束没有</span></span><br></pre></td></tr></table></figure></p><p>推荐示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isError = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> inNotFinished = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><h4 id="建议-缩写词应该全部大写或者小写，不要混搭。"><a href="#建议-缩写词应该全部大写或者小写，不要混搭。" class="headerlink" title="建议: 缩写词应该全部大写或者小写，不要混搭。"></a>建议: 缩写词应该全部大写或者小写，不要混搭。</h4><h4 id="原则-不要用保留字作为键名或者变量名，使用同义词。"><a href="#原则-不要用保留字作为键名或者变量名，使用同义词。" class="headerlink" title="原则: 不要用保留字作为键名或者变量名，使用同义词。"></a>原则: 不要用保留字作为键名或者变量名，使用同义词。</h4><p>为了兼容未来，虽然在语法上使用保留字作为键名是可以允许的。可以这样改<code>class =&gt; klass</code>， <code>default =&gt; defaults</code>，<code>private =&gt; hidden</code></p><h4 id="原则-常量使用全部大写并且用下划线-分隔"><a href="#原则-常量使用全部大写并且用下划线-分隔" class="headerlink" title="原则: 常量使用全部大写并且用下划线_分隔"></a>原则: 常量使用全部大写并且用下划线_分隔</h4><ol><li>不要魔鬼数字，比如错误码 <code>response.code === &quot;0000&quot; || response.code === 5</code>, 这种代码，不熟悉的人需要花时间去理解 <code>5</code> 是什么，<code>&quot;0000&quot;</code> 又是什么。</li><li>不要魔鬼常量，比如<code>const NUM_FOUR = 4</code>这种脱了裤子放屁行为;<br>推荐示例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SUCCESS_CODE = <span class="string">'0000'</span>;</span><br><span class="line"><span class="keyword">if</span> (response.code === SUCCESS_CODE) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MAX_GOODS_NUM = <span class="number">4</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="注释原则"><a href="#注释原则" class="headerlink" title="注释原则"></a>注释原则</h3><h4 id="最好的注释就是没有注释"><a href="#最好的注释就是没有注释" class="headerlink" title="最好的注释就是没有注释"></a>最好的注释就是没有注释</h4><p>注释的作用是解释代码。如果变量命令足够清晰，代码结构好就不需要注释。举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大于65岁并且是职工，或者性别是女可以领福利</span></span><br><span class="line"><span class="keyword">if</span> ((person.flag === <span class="number">0</span> &amp;&amp; person.age &gt; <span class="number">65</span>) || person.sex === <span class="number">1</span>) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>别人审阅读代码时需要看注释才能知道if语句中含义。可以换成如下写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isBenefits(person)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接通过阅读代码就可以理解到意思，如果需要深读判断逻辑，同时隔离的函数也方便阅读。</p><h4 id="原则-注释的作用是帮助理解代码，而不是误解代码"><a href="#原则-注释的作用是帮助理解代码，而不是误解代码" class="headerlink" title="原则: 注释的作用是帮助理解代码，而不是误解代码"></a>原则: 注释的作用是帮助理解代码，而不是误解代码</h4><p>无用的注释，过期的注释及时清理掉。如果一个注释和代码实现不一致，那么enummmm….。</p><h4 id="原则-不要出现todo代码，todo代码自己在个人备忘录记录。"><a href="#原则-不要出现todo代码，todo代码自己在个人备忘录记录。" class="headerlink" title="原则: 不要出现todo代码，todo代码自己在个人备忘录记录。"></a>原则: 不要出现todo代码，todo代码自己在个人备忘录记录。</h4><p>大家习惯把部分代码标记上todo，然后推到公共分支。如果某一天你不接手这个项目了，后面的人看到你写的todo，他到底需不要todo，这是个问题。</p><h4 id="建议-不要临时注释屏蔽代码，直接删除。"><a href="#建议-不要临时注释屏蔽代码，直接删除。" class="headerlink" title="建议: 不要临时注释屏蔽代码，直接删除。"></a>建议: 不要临时注释屏蔽代码，直接删除。</h4><p>临时注释屏蔽部分代码是大部分人常见的操作，可以直接删除。如果后续需要找回，git来帮忙。否则后面的人接手一看，这个代码屏蔽注释了，不知道啥原因，不敢动，久而久之，x山。</p><h4 id="原则-不要用注释记录文件修改信息"><a href="#原则-不要用注释记录文件修改信息" class="headerlink" title="原则: 不要用注释记录文件修改信息"></a>原则: 不要用注释记录文件修改信息</h4><p>都用git了， 不要在文件开头去记录xxx多久修改了啥。git信息里面都有。</p><h3 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h3><h4 id="原则-单行注释使用-多行注释-文件注释用"><a href="#原则-单行注释使用-多行注释-文件注释用" class="headerlink" title="原则: 单行注释使用 //, 多行注释 /** */, 文件注释用 / \/"></a>原则: 单行注释使用 //, 多行注释 /** */, 文件注释用 /<em> \</em>/</h4><p>推荐大家使用jsDoc风格的注释规范</p><h4 id="原则-注释和描述的代码相邻，放在代码上方，并且和代码的缩进一致。"><a href="#原则-注释和描述的代码相邻，放在代码上方，并且和代码的缩进一致。" class="headerlink" title="原则: 注释和描述的代码相邻，放在代码上方，并且和代码的缩进一致。"></a>原则: 注释和描述的代码相邻，放在代码上方，并且和代码的缩进一致。</h4><h4 id="原则-注释要和上方的代码块有间隔，间隔一行。-后空两格。"><a href="#原则-注释要和上方的代码块有间隔，间隔一行。-后空两格。" class="headerlink" title="原则: 注释要和上方的代码块有间隔，间隔一行。 // 后空两格。"></a>原则: 注释要和上方的代码块有间隔，间隔一行。 // 后空两格。</h4><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h3><p>排版可以从下面的维度出发，给出每个维度的建议项和原由，各团队可以自行商议。</p><h4 id="建议-团队内风格应该保持一致，大家商量，抛弃个人喜好"><a href="#建议-团队内风格应该保持一致，大家商量，抛弃个人喜好" class="headerlink" title="建议: 团队内风格应该保持一致，大家商量，抛弃个人喜好"></a>建议: 团队内风格应该保持一致，大家商量，抛弃个人喜好</h4><h4 id="建议-团队内将风格固化到IDE中，通过eslint，stylelint-editorConfig等来保证一致性。"><a href="#建议-团队内将风格固化到IDE中，通过eslint，stylelint-editorConfig等来保证一致性。" class="headerlink" title="建议: 团队内将风格固化到IDE中，通过eslint，stylelint, editorConfig等来保证一致性。"></a>建议: 团队内将风格固化到IDE中，通过eslint，stylelint, editorConfig等来保证一致性。</h4><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><h4 id="原则-禁止使用制表符作为缩进"><a href="#原则-禁止使用制表符作为缩进" class="headerlink" title="原则: 禁止使用制表符作为缩进"></a>原则: 禁止使用制表符作为缩进</h4><p>制表符在不同IDE或者代码阅读器上面表现的风格不一致，有可能产生对齐错乱的问题。空格在不会有这样的问题。我们在开发中常使用tab键实现缩进，需要把tab设置为缩进空格。</p><h4 id="建议-缩进使用2个空格缩进。"><a href="#建议-缩进使用2个空格缩进。" class="headerlink" title="建议: 缩进使用2个空格缩进。"></a>建议: 缩进使用2个空格缩进。</h4><p>缩进过大，在嵌套过深的情况，需要拖动横向滚动条条才能阅读代码，不方便阅读。</p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><h4 id="建议-超长代码需要换行，换行时操作符放在前面"><a href="#建议-超长代码需要换行，换行时操作符放在前面" class="headerlink" title="建议: 超长代码需要换行，换行时操作符放在前面"></a>建议: 超长代码需要换行，换行时操作符放在前面</h4><p>推荐示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resultA = xxx </span><br><span class="line">                ? <span class="string">'a'</span> : <span class="string">'b'</span>;</span><br><span class="line"><span class="keyword">const</span> resultB = xxxxxxxxxxxxA</span><br><span class="line">                &amp;&amp; xxxxxxxxxxB</span><br><span class="line">                &amp;&amp; xxxxxxxxxxC</span><br></pre></td></tr></table></figure></p><h4 id="建议-函数参数尽量在同一行，对于超长的场景每个参数独占一行。"><a href="#建议-函数参数尽量在同一行，对于超长的场景每个参数独占一行。" class="headerlink" title="建议: 函数参数尽量在同一行，对于超长的场景每个参数独占一行。"></a>建议: 函数参数尽量在同一行，对于超长的场景每个参数独占一行。</h4><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params">arg1, arg2, arg3, arg4</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someLongerFunction</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    xxxxxxxxxxA,</span></span></span><br><span class="line"><span class="function"><span class="params">    xxxxxxxxxxB,</span></span></span><br><span class="line"><span class="function"><span class="params">    xxxxxxxxxxC,</span></span></span><br><span class="line"><span class="function"><span class="params">    xxxxxxxxxxD</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="建议-对象字面量超过4个，都应该换行"><a href="#建议-对象字面量超过4个，都应该换行" class="headerlink" title="建议: 对象字面量超过4个，都应该换行"></a>建议: 对象字面量超过4个，都应该换行</h4><p>不好的示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> airticle = &#123; <span class="attr">title</span>: <span class="string">'中国之声'</span>, <span class="attr">author</span>: <span class="string">'some people'</span>, <span class="attr">date</span>: <span class="string">'2012-02-01'</span>, <span class="attr">preview</span>: <span class="number">999</span>, <span class="attr">total</span>: <span class="number">334343</span> &#125;;</span><br></pre></td></tr></table></figure></p><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> airticle = &#123; </span><br><span class="line">    title: <span class="string">'中国之声'</span>, </span><br><span class="line">    author: <span class="string">'some people'</span>,</span><br><span class="line">    date: <span class="string">'2012-02-01'</span>,</span><br><span class="line">    preview: <span class="number">999</span>,</span><br><span class="line">    total: <span class="number">334343</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="建议-链式调用对象时，一行最好不超过4个调用，可以改成每个独占一行。"><a href="#建议-链式调用对象时，一行最好不超过4个调用，可以改成每个独占一行。" class="headerlink" title="建议: 链式调用对象时，一行最好不超过4个调用，可以改成每个独占一行。"></a>建议: 链式调用对象时，一行最好不超过4个调用，可以改成每个独占一行。</h4><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someInstance.queryAll().find(<span class="string">'classA'</span>).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> handle(item)).map(<span class="function"><span class="params">item</span> =&gt;</span> item.name).end()</span><br></pre></td></tr></table></figure></p><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">someInstance</span><br><span class="line">    .queryAll()</span><br><span class="line">    .find(<span class="string">'classA'</span>)</span><br><span class="line">    .forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> handle(item))</span><br><span class="line">    .map(<span class="function"><span class="params">item</span> =&gt;</span> item.name)</span><br><span class="line">    .end()</span><br></pre></td></tr></table></figure></p><h4 id="建议-else-和-if尾括号放在同一行，else-if同理"><a href="#建议-else-和-if尾括号放在同一行，else-if同理" class="headerlink" title="建议: else 和 if尾括号放在同一行，else if同理"></a>建议: else 和 if尾括号放在同一行，else if同理</h4><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> () &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="建议-设置每行的最大长度，超过最大行数需要换行。"><a href="#建议-设置每行的最大长度，超过最大行数需要换行。" class="headerlink" title="建议: 设置每行的最大长度，超过最大行数需要换行。"></a>建议: 设置每行的最大长度，超过最大行数需要换行。</h4><p>阅读代码最喜欢时从上到下阅读，不喜欢横向滚动条。推荐每行最大长度不超过180</p><h4 id="建议-条件语句过长的，可以将每个条件都放入当都一行，操作符放在开头"><a href="#建议-条件语句过长的，可以将每个条件都放入当都一行，操作符放在开头" class="headerlink" title="建议: 条件语句过长的，可以将每个条件都放入当都一行，操作符放在开头"></a>建议: 条件语句过长的，可以将每个条件都放入当都一行，操作符放在开头</h4><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><h4 id="原则-不同的逻辑块之间空一行"><a href="#原则-不同的逻辑块之间空一行" class="headerlink" title="原则: 不同的逻辑块之间空一行"></a>原则: 不同的逻辑块之间空一行</h4><p>相对独立的代码块之间考虑换行（一般这个时候你需要提炼函数了-_-）。</p><h4 id="建议-class中，方法和方法之间需要换行。不同逻辑区间的属性之间换行。"><a href="#建议-class中，方法和方法之间需要换行。不同逻辑区间的属性之间换行。" class="headerlink" title="建议: class中，方法和方法之间需要换行。不同逻辑区间的属性之间换行。"></a>建议: class中，方法和方法之间需要换行。不同逻辑区间的属性之间换行。</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> People &#123;</span><br><span class="line">    age: <span class="number">36</span>,</span><br><span class="line">    sex: <span class="string">'male'</span>,</span><br><span class="line">    career: <span class="string">'teacher'</span>,</span><br><span class="line"></span><br><span class="line">    isFlag: <span class="literal">false</span>,</span><br><span class="line">    isRegisted: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    children: [],</span><br><span class="line">    parent: &#123;&#125;</span><br><span class="line"></span><br><span class="line">    checkValid() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleError() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原则-方法体、块语句、类的开始或者末尾不要有空行。"><a href="#原则-方法体、块语句、类的开始或者末尾不要有空行。" class="headerlink" title="原则: 方法体、块语句、类的开始或者末尾不要有空行。"></a>原则: 方法体、块语句、类的开始或者末尾不要有空行。</h4><h4 id="建议-一般情况下，不要使用连续空行。"><a href="#建议-一般情况下，不要使用连续空行。" class="headerlink" title="建议: 一般情况下，不要使用连续空行。"></a>建议: 一般情况下，不要使用连续空行。</h4><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><h4 id="建议-关键字周围空格一致性"><a href="#建议-关键字周围空格一致性" class="headerlink" title="建议: 关键字周围空格一致性"></a>建议: 关键字周围空格一致性</h4><ol><li>在保留字(if, for while) 和左括号( 之间添加一个空格</li><li>else catch 与 关闭花括号 } 之间添加一个空格</li><li><p>在任何打开花括号前添加一个空格, (函数参数和<code></code>模板中去除外)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这三种情况除外</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">too</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">[ name ]</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`#<span class="subst">$&#123;s&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></li><li><p>在任何三元或者二元操作符的两侧增加一个空格</p></li><li>数组和函数参数逗号, 后面添加一个空格，前面不要增加空格。</li><li>; 前面不要空格</li><li><p>单行 {} 内侧需要一个空格</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objA = &#123; name: <span class="string">'xxx'</span>, total: <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>数组[]内侧不要有空格 [a, b, c]，不要[ a, b ]。</p></li><li>禁止出现多个空格，除注释和缩进外。</li></ol><h3 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h3><h4 id="建议-总是给代码执行体添加"><a href="#建议-总是给代码执行体添加" class="headerlink" title="建议: 总是给代码执行体添加{}"></a>建议: 总是给代码执行体添加{}</h4><p>while, if, for, do，即使执行语句只有一行。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (result) foo++;</span><br></pre></td></tr></table></figure></p><p>上面这种看着很酷，如果需要多写一个语句，就需要三行的改动，如果我们事先添加好花括号。改动只有一行，出错的机率大幅度减低。血的教训——__——。</p><h4 id="建议-花括号要和语句在一行"><a href="#建议-花括号要和语句在一行" class="headerlink" title="建议: 花括号要和语句在一行"></a>建议: 花括号要和语句在一行</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Xxx &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Xxx </span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="建议-对象字面量和数组中使用拖尾逗号"><a href="#建议-对象字面量和数组中使用拖尾逗号" class="headerlink" title="建议: 对象字面量和数组中使用拖尾逗号,"></a>建议: 对象字面量和数组中使用拖尾逗号,</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    keyA: <span class="string">'xxx'</span>,</span><br><span class="line">    keyB: <span class="string">'xxx'</span>,  <span class="comment">// 拖尾逗号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> someArray = [<span class="string">'xxxA'</span>, <span class="string">'xxxB'</span>,]</span><br></pre></td></tr></table></figure><h4 id="建议-每行代码句后添加分号。"><a href="#建议-每行代码句后添加分号。" class="headerlink" title="建议: 每行代码句后添加分号。"></a>建议: 每行代码句后添加分号。</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个代码会被解析 some = 'xxx'; 而不是 some = getSome;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSome</span>(<span class="params">arg1</span>) </span>&#123; <span class="keyword">return</span> arg1; &#125;</span><br><span class="line"><span class="keyword">const</span> some = getSome</span><br><span class="line">(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'xxx'</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个代码会被解析成 return; &#123; .... &#125;;</span></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建议-单文件长度最好不要超过1500行，尽可能的考虑拆分"><a href="#建议-单文件长度最好不要超过1500行，尽可能的考虑拆分" class="headerlink" title="建议: 单文件长度最好不要超过1500行，尽可能的考虑拆分"></a>建议: 单文件长度最好不要超过1500行，尽可能的考虑拆分</h4><h4 id="建议-单个方法长度不要超过50行"><a href="#建议-单个方法长度不要超过50行" class="headerlink" title="建议: 单个方法长度不要超过50行"></a>建议: 单个方法长度不要超过50行</h4><h4 id="建议-圈复杂度不要超过20"><a href="#建议-圈复杂度不要超过20" class="headerlink" title="建议: 圈复杂度不要超过20"></a>建议: 圈复杂度不要超过20</h4><h4 id="建议-块嵌套深度不超过4层。if语句判断等"><a href="#建议-块嵌套深度不超过4层。if语句判断等" class="headerlink" title="建议: 块嵌套深度不超过4层。if语句判断等"></a>建议: 块嵌套深度不超过4层。if语句判断等</h4><h4 id="建议-回调深读不超过4层。"><a href="#建议-回调深读不超过4层。" class="headerlink" title="建议: 回调深读不超过4层。"></a>建议: 回调深读不超过4层。</h4><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><h4 id="原则-优先使用const，其次let。非特殊场景不使用var"><a href="#原则-优先使用const，其次let。非特殊场景不使用var" class="headerlink" title="原则: 优先使用const，其次let。非特殊场景不使用var"></a>原则: 优先使用const，其次let。非特殊场景不使用var</h4><h4 id="原则-在使用地方申明变量，且尽快初始化"><a href="#原则-在使用地方申明变量，且尽快初始化" class="headerlink" title="原则: 在使用地方申明变量，且尽快初始化"></a>原则: 在使用地方申明变量，且尽快初始化</h4><h4 id="原则-每行申明一个变量，结构和for循环除外"><a href="#原则-每行申明一个变量，结构和for循环除外" class="headerlink" title="原则: 每行申明一个变量，结构和for循环除外"></a>原则: 每行申明一个变量，结构和for循环除外</h4><ol><li>方便阅读</li><li>在debug模式下，可以按行阅读。单行代码无法优美的查看（大雾）。<br>不好示例<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> varA = <span class="string">'nb'</span>, B = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li></ol><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> varA = <span class="string">'nb'</span>;</span><br><span class="line"><span class="keyword">const</span> varB = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [varA, varB] = [<span class="string">'nb'</span>, <span class="number">123</span>]</span><br></pre></td></tr></table></figure></p><h4 id="建议-申明阶段禁止连续赋值"><a href="#建议-申明阶段禁止连续赋值" class="headerlink" title="建议: 申明阶段禁止连续赋值"></a>建议: 申明阶段禁止连续赋值</h4><h4 id="建议-变量不需要使用undefined来初始化"><a href="#建议-变量不需要使用undefined来初始化" class="headerlink" title="建议: 变量不需要使用undefined来初始化"></a>建议: 变量不需要使用undefined来初始化</h4><p>未赋值的变量会默认有一个undefined的初始值(????)</p><h4 id="建议-非特殊情况一般使用基础类型的字面量来初始化，而不是封装类型。"><a href="#建议-非特殊情况一般使用基础类型的字面量来初始化，而不是封装类型。" class="headerlink" title="建议: 非特殊情况一般使用基础类型的字面量来初始化，而不是封装类型。"></a>建议: 非特殊情况一般使用基础类型的字面量来初始化，而不是封装类型。</h4><p>不好的示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stringA = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'A'</span>);</span><br><span class="line"><span class="keyword">const</span> numberB = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numberB + <span class="number">1</span>) <span class="comment">//  124;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会有语义上的不明确</span></span><br><span class="line"><span class="keyword">const</span> arrA = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// [3, 4, 5]</span></span><br><span class="line"><span class="keyword">const</span> arrA = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)  <span class="comment">// [empty * 4]   语义不明确</span></span><br><span class="line"><span class="keyword">const</span> arrC = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'4'</span>)  <span class="comment">// ['4']  // 语义不明确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑可读性和冗余性，对象也是</span></span><br><span class="line"><span class="keyword">const</span> objA = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">    keyA: <span class="string">'longfor'</span>,</span><br><span class="line">    keyB: <span class="number">123</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="建议-内部作用域变量不要覆盖外部作用域变量"><a href="#建议-内部作用域变量不要覆盖外部作用域变量" class="headerlink" title="建议: 内部作用域变量不要覆盖外部作用域变量"></a>建议: 内部作用域变量不要覆盖外部作用域变量</h4><p>会导致更深层次的代码无法获取到想要的变量，在后续变更操作中，增加出错风险。</p><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> aa = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> aa = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 如果c函数需要知道a函数中aa咋办???????</span></span><br><span class="line">            <span class="built_in">console</span>.log(aa)</span><br><span class="line">        &#125;</span><br><span class="line">        c()</span><br><span class="line">    &#125;</span><br><span class="line">    b()</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br></pre></td></tr></table></figure></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="建议-方法的参数不超过5个"><a href="#建议-方法的参数不超过5个" class="headerlink" title="建议: 方法的参数不超过5个"></a>建议: 方法的参数不超过5个</h4><p>超过5个的参数，将逻辑关联的参数放入对一个对象中。</p><h4 id="建议-函数参数指定默认参数，不是使用-指定默认参数"><a href="#建议-函数参数指定默认参数，不是使用-指定默认参数" class="headerlink" title="建议: 函数参数指定默认参数，不是使用 || 指定默认参数"></a>建议: 函数参数指定默认参数，不是使用 || 指定默认参数</h4><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 a = false 或 a = ''；enummmmm.....</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a = a || <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="建议-永远不要改变参数的值。"><a href="#建议-永远不要改变参数的值。" class="headerlink" title="建议: 永远不要改变参数的值。"></a>建议: 永远不要改变参数的值。</h4><ol><li>如果函数中新增加一个功能，需要用到参数的原始值，想要一下需要改动的地方有多少。</li><li>如果参数是引用传参，改变参数的属性会导致修改传入外部，造成一些不必要的问题。<h4 id="建议-默认参数放在最后面"><a href="#建议-默认参数放在最后面" class="headerlink" title="建议: 默认参数放在最后面"></a>建议: 默认参数放在最后面</h4>默认参数放在前面，需要写undefined来占位，放在后面可以不用。<br>不好示例<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">argA = &#123;&#125;, argB</span>) </span>&#123;&#125;</span><br><span class="line">test(<span class="literal">undefined</span>, <span class="string">'test'</span>);</span><br></pre></td></tr></table></figure></li></ol><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">argB, argA = &#123;&#125;</span>) </span>&#123;&#125;</span><br><span class="line">test(<span class="string">'test'</span>);  <span class="comment">// cool....。</span></span><br></pre></td></tr></table></figure></p><h4 id="建议-es6不要使用arguments-请rest替代"><a href="#建议-es6不要使用arguments-请rest替代" class="headerlink" title="建议: es6不要使用arguments, 请rest替代"></a>建议: es6不要使用arguments, 请rest替代</h4><ol><li>箭头函数不存在arguments</li><li>arguments只是类数组，操作不方便</li></ol><h4 id="建议-对于外部API，始终对参数进行校验。"><a href="#建议-对于外部API，始终对参数进行校验。" class="headerlink" title="建议: 对于外部API，始终对参数进行校验。"></a>建议: 对于外部API，始终对参数进行校验。</h4><p>为了保证健壮性，防御性编程不可少(大雾)</p><h4 id="建议-优先使用参数结构"><a href="#建议-优先使用参数结构" class="headerlink" title="建议: 优先使用参数结构"></a>建议: 优先使用参数结构</h4><h3 id="申明与实现"><a href="#申明与实现" class="headerlink" title="申明与实现"></a>申明与实现</h3><h4 id="原则-函数申明一致性"><a href="#原则-函数申明一致性" class="headerlink" title="原则: 函数申明一致性"></a>原则: 函数申明一致性</h4><p>函数有表达式声明和function申明。有如下区别</p><ol><li>function申明会将申明提升到作用域顶级，可以在申明前调用</li><li>表达式申明不会提升，在申请前使用会出错(not a function)<br>团队应该选择统一的风格来实现，推荐使用表达式申明。</li></ol><h4 id="建议-匿名函数优先使用箭头函数"><a href="#建议-匿名函数优先使用箭头函数" class="headerlink" title="建议: 匿名函数优先使用箭头函数"></a>建议: 匿名函数优先使用箭头函数</h4><p>普通函数和箭头函数性能和开销没有太大差别，但是匿名函数没有this的困扰(^-^)。</p><h4 id="原则-箭头函数参数风格一致性"><a href="#原则-箭头函数参数风格一致性" class="headerlink" title="原则: 箭头函数参数风格一致性"></a>原则: 箭头函数参数风格一致性</h4><p>有下面有两种风格</p><ol><li><p>只有一个参数的情况下去参数括号。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="params">argA</span> =&gt;</span> argA * <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>总是添加参数括号</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="function">(<span class="params">argA</span>) =&gt;</span> argA * <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ol><p>推荐第二种方式，没有花括号的方式会有阅读上的停顿。</p><h4 id="原则-箭头函数return风格一致性"><a href="#原则-箭头函数return风格一致性" class="headerlink" title="原则: 箭头函数return风格一致性"></a>原则: 箭头函数return风格一致性</h4><p>同上，方法体只有一个return 语句，是不是需要添加花括号。推荐总是添加花括号，丑一点但是方便断点调试。</p><h4 id="建议-函数有多个返回参数时使用对象解构"><a href="#建议-函数有多个返回参数时使用对象解构" class="headerlink" title="建议: 函数有多个返回参数时使用对象解构"></a>建议: 函数有多个返回参数时使用对象解构</h4><p>优先使用对象结构而不是数组解构。不然冷不丁出现这种<code>const [a,,b,,c] = [1,1,1,1,1,1]</code></p><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><h4 id="建议-优先采用class定义类"><a href="#建议-优先采用class定义类" class="headerlink" title="建议: 优先采用class定义类"></a>建议: 优先采用class定义类</h4><ol><li>class关键字定义类简洁，而且逻辑更易于阅读。</li><li>不仅仅时语法糖，class的构造函数有特殊的内部属性<code>[[IsClassConstructor]]: true</code>, 可以防止被作为普通函数使用。</li><li><code>String(SomeClass)</code> 会得到什么?   – class SomeClass {}</li></ol><h4 id="建议-使用extends来实现继承。"><a href="#建议-使用extends来实现继承。" class="headerlink" title="建议: 使用extends来实现继承。"></a>建议: 使用extends来实现继承。</h4><h4 id="原则-构造函数中禁止在super-前调用this或者super-xx"><a href="#原则-构造函数中禁止在super-前调用this或者super-xx" class="headerlink" title="原则: 构造函数中禁止在super() 前调用this或者super.xx"></a>原则: 构造函数中禁止在super() 前调用this或者super.xx</h4><h4 id="建议-在构造函数中申明所有的属性和方法。"><a href="#建议-在构造函数中申明所有的属性和方法。" class="headerlink" title="建议: 在构造函数中申明所有的属性和方法。"></a>建议: 在构造函数中申明所有的属性和方法。</h4><p>不要在类实例化后再动态添加属性, 如果一个属性实在执行时被赋值的，也需要先申明，方便VM优化。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="建议-优先使用单引号"><a href="#建议-优先使用单引号" class="headerlink" title="建议: 优先使用单引号"></a>建议: 优先使用单引号</h4><p>当你创建一个包含html代码时候就知道了</p><h4 id="建议-字符串使用模板字符串"><a href="#建议-字符串使用模板字符串" class="headerlink" title="建议: 字符串使用模板字符串"></a>建议: 字符串使用模板字符串</h4><p>可阅读性，一堆 + 很难阅读，特别时字符串中带有 + 时。</p><h4 id="原则-不使用-字符串行连续符号。"><a href="#原则-不使用-字符串行连续符号。" class="headerlink" title="原则: 不使用\字符串行连续符号。"></a>原则: 不使用\字符串行连续符号。</h4><p>当你在\ 后面加个空格时，找代码会找的你怀疑人生。 直接写在一行，大部分IED会处理用多行来显示一行。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="建议-添加元素使用数组的push方法，而不是索引赋值"><a href="#建议-添加元素使用数组的push方法，而不是索引赋值" class="headerlink" title="建议: 添加元素使用数组的push方法，而不是索引赋值"></a>建议: 添加元素使用数组的push方法，而不是索引赋值</h4><p>数组的length有长度限制，push会检查并抛错，赋值没有。极限情况下出现length不更新问题。</p><h4 id="建议-不在数组定义非数字索引"><a href="#建议-不在数组定义非数字索引" class="headerlink" title="建议: 不在数组定义非数字索引"></a>建议: 不在数组定义非数字索引</h4><p>有特殊场景需要添加，建议替换成map或者set。</p><h4 id="建议-数组遍历优先使用数组上方法"><a href="#建议-数组遍历优先使用数组上方法" class="headerlink" title="建议: 数组遍历优先使用数组上方法"></a>建议: 数组遍历优先使用数组上方法</h4><h4 id="建议-除特殊场景，-不要使用for-in遍历数组。"><a href="#建议-除特殊场景，-不要使用for-in遍历数组。" class="headerlink" title="建议: 除特殊场景， 不要使用for in遍历数组。"></a>建议: 除特殊场景， 不要使用for in遍历数组。</h4><h4 id="建议-forEach中不要对数组进行增加删除操作"><a href="#建议-forEach中不要对数组进行增加删除操作" class="headerlink" title="建议: forEach中不要对数组进行增加删除操作"></a>建议: forEach中不要对数组进行增加删除操作</h4><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="建议-对象字面量属性名统一风格，不加引号。"><a href="#建议-对象字面量属性名统一风格，不加引号。" class="headerlink" title="建议: 对象字面量属性名统一风格，不加引号。"></a>建议: 对象字面量属性名统一风格，不加引号。</h4><p>非特殊场景不使用混搭风格<br>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objA = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'AAA'</span>,</span><br><span class="line">    title: <span class="string">'welcome to AAA'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特殊情况</span></span><br><span class="line">    <span class="string">'some-one'</span>: <span class="string">'123'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="建议-尽量在申明时将所有属性申明好，少动态添加。"><a href="#建议-尽量在申明时将所有属性申明好，少动态添加。" class="headerlink" title="建议: 尽量在申明时将所有属性申明好，少动态添加。"></a>建议: 尽量在申明时将所有属性申明好，少动态添加。</h4><h4 id="建议-对象字面量中，方法使用简写。"><a href="#建议-对象字面量中，方法使用简写。" class="headerlink" title="建议: 对象字面量中，方法使用简写。"></a>建议: 对象字面量中，方法使用简写。</h4><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objA = &#123;</span><br><span class="line">    key: <span class="string">'a'</span>,</span><br><span class="line">    getKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objA = &#123;</span><br><span class="line">    key: <span class="string">'a'</span>,</span><br><span class="line">    getKey: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="建议-推荐使用对象字面量中使用简写属性"><a href="#建议-推荐使用对象字面量中使用简写属性" class="headerlink" title="建议: 推荐使用对象字面量中使用简写属性"></a>建议: 推荐使用对象字面量中使用简写属性</h4><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">const</span> objA = &#123;</span><br><span class="line">    key,</span><br><span class="line">    getKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">const</span> objA = &#123;</span><br><span class="line">    key: key,</span><br><span class="line">    getKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="建议-使用-号来访问属性方法，只有动态情况或者数字索引下采用-访问"><a href="#建议-使用-号来访问属性方法，只有动态情况或者数字索引下采用-访问" class="headerlink" title="建议: 使用.号来访问属性方法，只有动态情况或者数字索引下采用[]访问"></a>建议: 使用.号来访问属性方法，只有动态情况或者数字索引下采用[]访问</h4><h4 id="原则-get-和-set-必须成对出现，否则没有意义。"><a href="#原则-get-和-set-必须成对出现，否则没有意义。" class="headerlink" title="原则: get 和 set 必须成对出现，否则没有意义。"></a>原则: get 和 set 必须成对出现，否则没有意义。</h4><p>如果只有get，表示该属性只可读，不可写。<br>如果只有set，表示该属性只可写，不可读。</p><h4 id="原则-禁止在对象上使用Object-proptotype-的内置属性，用call代替"><a href="#原则-禁止在对象上使用Object-proptotype-的内置属性，用call代替" class="headerlink" title="原则: 禁止在对象上使用Object.proptotype 的内置属性，用call代替"></a>原则: 禁止在对象上使用Object.proptotype 的内置属性，用call代替</h4><p>如果一个来自外部的JSON <code>resData = { hasOwnProperty: 1 }</code>; 如果调用<code>resData.hasOwnProperty()</code> 就会出现安全风险。用<code>Object.proptotype.hasOwnProperty.call(resData)</code> 则不会。</p><h4 id="建议-for-in循环对象需要约束"><a href="#建议-for-in循环对象需要约束" class="headerlink" title="建议: for in循环对象需要约束"></a>建议: for in循环对象需要约束</h4><p>for in 会将原型链上的属性包括进来，建议使用Object.prototype.hasOwnProperty() 过滤，或者直接使用Object.keys转成数组循环。</p><h4 id="建议-严禁对内置的类型添加修改属性方法。"><a href="#建议-严禁对内置的类型添加修改属性方法。" class="headerlink" title="建议: 严禁对内置的类型添加修改属性方法。"></a>建议: 严禁对内置的类型添加修改属性方法。</h4><p>常见在String.prototype 上面添加方法等。</p><h2 id="运算和表达式"><a href="#运算和表达式" class="headerlink" title="运算和表达式"></a>运算和表达式</h2><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><h4 id="建议-条件表达式中，变量在先，表达式在后。"><a href="#建议-条件表达式中，变量在先，表达式在后。" class="headerlink" title="建议: 条件表达式中，变量在先，表达式在后。"></a>建议: 条件表达式中，变量在先，表达式在后。</h4><p>有种观点时变量在后面，为了防止 <code>if (a = 1) {}</code>这种低级错误出现。不过为了可阅读性，我们推荐变量的在前面，配合现在IDE，可以避免这种错误。</p><h4 id="建议-总使用-和-，-不使用-和"><a href="#建议-总使用-和-，-不使用-和" class="headerlink" title="建议: 总使用 === 和 !==， 不使用 == 和 !="></a>建议: 总使用 === 和 !==， 不使用 == 和 !=</h4><p>==和!=对于新人来说难以掌握，而且也不利于阅读。所有 == 和 != 的场景都可以用 === 和 !== 表示出来。</p><h4 id="建议-条件语句尽量简单"><a href="#建议-条件语句尽量简单" class="headerlink" title="建议: 条件语句尽量简单"></a>建议: 条件语句尽量简单</h4><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isValid === <span class="literal">true</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> isFinished = condition ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p><h4 id="建议-不要在一个复杂的条件表达式最前面添加否定"><a href="#建议-不要在一个复杂的条件表达式最前面添加否定" class="headerlink" title="建议: 不要在一个复杂的条件表达式最前面添加否定!"></a>建议: 不要在一个复杂的条件表达式最前面添加否定!</h4><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!((person.flag === <span class="number">0</span> &amp;&amp; person.age &gt; <span class="number">65</span>) || person.sex === <span class="number">1</span>)) &#123;  <span class="comment">// 来读读这个是啥意思</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要否定的地方，用数学知识处理一下，解开括号。原则是 AND-OR互换，!抵消。括号加在 OR 中，从左到右依赖删除括号。对<code>!(!conditionA || !conditionB &amp;&amp; conditionC)</code> 举例。</p><ol><li>AND-OR互换:  <code>!!conditionA &amp;&amp; !!conditionB || !conditionC</code></li><li>! 抵消: <code>conditionA &amp;&amp; conditionB || !conditionC</code></li><li>括号加在 OR 中 <code>conditionA &amp;&amp; (conditionB || !conditionC)</code></li><li>观察是否能够消除括号，这个例子不能消除括号。<h4 id="建议-非特殊场景，if-else-条件判断不要否定在前"><a href="#建议-非特殊场景，if-else-条件判断不要否定在前" class="headerlink" title="建议: 非特殊场景，if else 条件判断不要否定在前"></a>建议: 非特殊场景，if else 条件判断不要否定在前</h4></li></ol><h4 id="建议-禁止使用嵌套的三元表达式"><a href="#建议-禁止使用嵌套的三元表达式" class="headerlink" title="建议: 禁止使用嵌套的三元表达式"></a>建议: 禁止使用嵌套的三元表达式</h4><p>嵌套的三元表示式需要用栈的思维来阅读。建议多写几个if替代。</p><h4 id="建议-混合条件表示式，使用括号来标记运算顺序。"><a href="#建议-混合条件表示式，使用括号来标记运算顺序。" class="headerlink" title="建议: 混合条件表示式，使用括号来标记运算顺序。"></a>建议: 混合条件表示式，使用括号来标记运算顺序。</h4><h4 id="建议-每个switch语句总是有default，即使default里面为空"><a href="#建议-每个switch语句总是有default，即使default里面为空" class="headerlink" title="建议: 每个switch语句总是有default，即使default里面为空"></a>建议: 每个switch语句总是有default，即使default里面为空</h4><p>防御性编程意识不可少，当定义了default，就会想switch的错误场景。</p><h4 id="建议-非特殊场景，总是给每个case添加break"><a href="#建议-非特殊场景，总是给每个case添加break" class="headerlink" title="建议: 非特殊场景，总是给每个case添加break"></a>建议: 非特殊场景，总是给每个case添加break</h4><h4 id="建议-总是给每个case的执行体添加花括号"><a href="#建议-总是给每个case的执行体添加花括号" class="headerlink" title="建议: 总是给每个case的执行体添加花括号{}"></a>建议: 总是给每个case的执行体添加花括号{}</h4><p>switch中，每个case都在switch代码块，作用域共享。为了防止出错，建议给每个case添加花括号形成块作用域。</p><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line">    <span class="keyword">case</span>: <span class="string">'0000'</span>: &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><h4 id="原则-正则表达式中不要出现连续空格"><a href="#原则-正则表达式中不要出现连续空格" class="headerlink" title="原则: 正则表达式中不要出现连续空格"></a>原则: 正则表达式中不要出现连续空格</h4><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testReg = <span class="regexp">/test    test/</span>;  <span class="comment">// 你能直接知道是几个空格吗</span></span><br></pre></td></tr></table></figure></p><p>推荐示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testReg = <span class="regexp">/test &#123;4&#125;test/</span></span><br></pre></td></tr></table></figure></p><h4 id="建议-总是使用具名捕获组"><a href="#建议-总是使用具名捕获组" class="headerlink" title="建议: 总是使用具名捕获组"></a>建议: 总是使用具名捕获组</h4><p>比如 <code>&#39;web-doc&#39;.match(/-(?&lt;customName&gt;\w)/).groups</code>，可以得到 <code>{ customName: &#39;d&#39; }</code></p><h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="建议-不要在顶层作用域申明函数变量"><a href="#建议-不要在顶层作用域申明函数变量" class="headerlink" title="建议: 不要在顶层作用域申明函数变量"></a>建议: 不要在顶层作用域申明函数变量</h4><p>一般情况下，大部分人会忘记顶层作用域就是全局作用域。如果要申明，应该显示的申明到windows或者global上。</p><h4 id="建议-谨慎添加window上属性。"><a href="#建议-谨慎添加window上属性。" class="headerlink" title="建议: 谨慎添加window上属性。"></a>建议: 谨慎添加window上属性。</h4><p>尽可能用命名空间实现，给windows挂载一个特殊的属性，剩下的挂在在这个属性下面。参考jquery 或者underscore</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="建议-禁止省略小数点前后的0"><a href="#建议-禁止省略小数点前后的0" class="headerlink" title="建议: 禁止省略小数点前后的0"></a>建议: 禁止省略小数点前后的0</h4><p>好好写嘛</p><p>不好示例<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numA = <span class="number">.5</span>;</span><br><span class="line"><span class="keyword">const</span> numB = <span class="number">2.</span>;</span><br><span class="line"><span class="keyword">const</span> numC = <span class="number">-.9</span>;</span><br></pre></td></tr></table></figure></p><h4 id="原则-使用isNaN-来检查NaN"><a href="#原则-使用isNaN-来检查NaN" class="headerlink" title="原则: 使用isNaN() 来检查NaN"></a>原则: 使用isNaN() 来检查NaN</h4><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="建议-异常的原则"><a href="#建议-异常的原则" class="headerlink" title="建议: 异常的原则"></a>建议: 异常的原则</h4><ol><li>异常总是Error子类或者Error</li><li>优先考虑内置异常， 不满足情况下使用自定义异常</li><li>捕获的异常不处理需要注释说明</li></ol><h4 id="建议-promise中reject总是返回异常，而不是其他"><a href="#建议-promise中reject总是返回异常，而不是其他" class="headerlink" title="建议: promise中reject总是返回异常，而不是其他;"></a>建议: promise中reject总是返回异常，而不是其他;</h4><p>Promise rejct 返回 Error可以看到错误栈，方便调试，断点神器。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><h4 id="原则-不要-return-await写法"><a href="#原则-不要-return-await写法" class="headerlink" title="原则: 不要 return await写法"></a>原则: 不要 return await写法</h4><p>直接return，async 本身会返回Promise对象。</p><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><h4 id="建议-一般不使用eval，如果需要，务必需要多人评审。"><a href="#建议-一般不使用eval，如果需要，务必需要多人评审。" class="headerlink" title="建议: 一般不使用eval，如果需要，务必需要多人评审。"></a>建议: 一般不使用eval，如果需要，务必需要多人评审。</h4><h4 id="原则-防止出现隐形eval"><a href="#原则-防止出现隐形eval" class="headerlink" title="原则: 防止出现隐形eval"></a>原则: 防止出现隐形eval</h4><p>setTimeout 和 setInterval第一个参数为字符串时，和eval一样。不过大部分浏览器会拦截这个漏洞。</p><h4 id="原则-非特殊场景不用with"><a href="#原则-非特殊场景不用with" class="headerlink" title="原则: 非特殊场景不用with"></a>原则: 非特殊场景不用with</h4><p>with可以提升性能，如果掌握不好会有一定的安全风险，比如在语义不明的情况，开发可能错误的执行了某个对象上的方法。建议团队评估后使用。</p><h4 id="建议-类型转换都用显示的方法处理，不要短符号实现。"><a href="#建议-类型转换都用显示的方法处理，不要短符号实现。" class="headerlink" title="建议: 类型转换都用显示的方法处理，不要短符号实现。"></a>建议: 类型转换都用显示的方法处理，不要短符号实现。</h4><ol><li>布尔类型: 用 <code>Boolean(numA)</code> 代替 <code>!!numA</code></li><li>数字类型: 用 <code>Number(strA)</code> 代替 <code>+strA</code></li><li>其余类推</li></ol><h4 id="原则-DOM卸载时，务必移除事件绑定。"><a href="#原则-DOM卸载时，务必移除事件绑定。" class="headerlink" title="原则: DOM卸载时，务必移除事件绑定。"></a>原则: DOM卸载时，务必移除事件绑定。</h4><p>不然哪天内存泄漏都找不到原因，引用计数GC的浏览器有这个问题。</p><h4 id="原则-及时清理定时器和延时器"><a href="#原则-及时清理定时器和延时器" class="headerlink" title="原则: 及时清理定时器和延时器"></a>原则: 及时清理定时器和延时器</h4><p>同样会导致内存泄漏，还要</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Javascript-编码规范&quot;&gt;&lt;a href=&quot;#Javascript-编码规范&quot; class=&quot;headerlink&quot; title=&quot;Javascript 编码规范&quot;&gt;&lt;/a&gt;Javascript 编码规范&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github-action</title>
    <link href="https://blog.xunserver.cn/archives/355afdd9.html"/>
    <id>https://blog.xunserver.cn/archives/355afdd9.html</id>
    <published>2021-08-12T10:24:09.000Z</published>
    <updated>2021-08-12T10:24:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>workflow: 一次持续集成</p><p>job: 一次workflow包含一个或者多个job，在没有依赖的情况下，多个job异步执行</p><p>step: 每个job 由多个step组成，同步执行</p><p>action: 每个step可以执行一个或者多个action</p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">github</span> <span class="string">pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build-deploy:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">build</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        node-version:</span> <span class="string">'10.x'</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string">        npm run hexo g </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">    - name:</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">peaceiris/actions-gh-pages@v2.5.0</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="attr">        ACTIONS_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        EXTERNAL_REPOSITORY:</span> <span class="string">xunserver/xunserver.github.io</span></span><br><span class="line"><span class="attr">        PUBLISH_BRANCH:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">        PUBLISH_DIR:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h2&gt;&lt;p&gt;workflow: 一次持续集成&lt;/p&gt;
&lt;p&gt;job: 一次workflow包含一个或者多个job，在没有依赖的情况下，多个job异步执行
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue查漏补缺</title>
    <link href="https://blog.xunserver.cn/archives/98f4c1bc.html"/>
    <id>https://blog.xunserver.cn/archives/98f4c1bc.html</id>
    <published>2021-08-06T08:13:04.000Z</published>
    <updated>2021-08-06T08:13:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动态编译-Vue-compile-str"><a href="#动态编译-Vue-compile-str" class="headerlink" title="动态编译 Vue.compile(str)"></a>动态编译 Vue.compile(str)</h3><p>完整版情况可以将模板加载成render函数，实现远程加载功能</p><h3 id="阉割版的响应数据-Vue-observable-obj"><a href="#阉割版的响应数据-Vue-observable-obj" class="headerlink" title="阉割版的响应数据 Vue.observable(obj)"></a>阉割版的响应数据 Vue.observable(obj)</h3><p>创建一个可响应对象，目前我们的可以响应对象在data，watch,computed 中， 这个阉割版的可以响应对象用于渲染函数和计算属性中</p><h3 id="watch可以监听一个数组，也可以是一个方法"><a href="#watch可以监听一个数组，也可以是一个方法" class="headerlink" title="watch可以监听一个数组，也可以是一个方法"></a>watch可以监听一个数组，也可以是一个方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    a: <span class="string">'someMethod'</span>  <span class="comment">// vm实例中方法,</span></span><br><span class="line">    b: [</span><br><span class="line">        &#123;</span><br><span class="line">            handler: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">            deep: <span class="literal">true</span>,</span><br><span class="line">            immediate: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">        <span class="string">'someMethod'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插槽新功能-v-slot"><a href="#插槽新功能-v-slot" class="headerlink" title="插槽新功能 v-slot"></a>插槽新功能 v-slot</h3><ol><li>v-slot:slotName 指定具名插槽</li><li>v-slot在单个插槽的情况下可以绑定非template<em>，其余必</em>须绑定到组件上</li><li>v-slot可以简写为#, 认插槽需要#default<h3 id="v-bind-支持对象绑定-动态绑定"><a href="#v-bind-支持对象绑定-动态绑定" class="headerlink" title="v-bind 支持对象绑定, 动态绑定"></a>v-bind 支持对象绑定, 动态绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定一个 attribute --&gt;</span><br><span class="line">&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态 attribute 名 (2.6.0+) --&gt;</span><br><span class="line">&lt;button v-bind:[key]=&quot;value&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src=&quot;imageSrc&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span><br><span class="line">&lt;button :[key]=&quot;value&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联字符串拼接 --&gt;</span><br><span class="line">&lt;img :src=&quot;&apos;/path/to/images/&apos; + fileName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- class 绑定 --&gt;</span><br><span class="line">&lt;div :class=&quot;&#123; red: isRed &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :class=&quot;[classA, classB]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :class=&quot;[classA, &#123; classB: isB, classC: isC &#125;]&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style 绑定 --&gt;</span><br><span class="line">&lt;div :style=&quot;&#123; fontSize: size + &apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=&quot;[styleObjectA, styleObjectB]&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span><br><span class="line">&lt;div v-bind=&quot;&#123; id: someProp, &apos;other-attr&apos;: otherProp &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 prop 修饰符绑定 DOM attribute --&gt;</span><br><span class="line">&lt;div v-bind:text-content.prop=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span><br><span class="line">&lt;my-component :prop=&quot;someThing&quot;&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span><br><span class="line">&lt;child-component v-bind=&quot;$props&quot;&gt;&lt;/child-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- XLink --&gt;</span><br><span class="line">&lt;svg&gt;&lt;a :xlink:special=&quot;foo&quot;&gt;&lt;/a&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="v-pre-手动指定这个元素和其子元素不需要编译。直接展示原始标签"><a href="#v-pre-手动指定这个元素和其子元素不需要编译。直接展示原始标签" class="headerlink" title="v-pre 手动指定这个元素和其子元素不需要编译。直接展示原始标签"></a>v-pre 手动指定这个元素和其子元素不需要编译。直接展示原始标签</h3><h3 id="不需要响应式的数据记得冻结，比如表格数据"><a href="#不需要响应式的数据记得冻结，比如表格数据" class="headerlink" title="不需要响应式的数据记得冻结，比如表格数据"></a>不需要响应式的数据记得冻结，比如表格数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export  default  &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      retur: &#123;</span><br><span class="line">        data: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    async beforeMounted() &#123;</span><br><span class="line">      this.data = await this.getData()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      async getData() &#123;</span><br><span class="line">        return Object.freeze(someData)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="静态内容尽量使用template模板渲染，-不使用jsx或者render函数。提高性能"><a href="#静态内容尽量使用template模板渲染，-不使用jsx或者render函数。提高性能" class="headerlink" title="静态内容尽量使用template模板渲染， 不使用jsx或者render函数。提高性能"></a>静态内容尽量使用template模板渲染， 不使用jsx或者render函数。提高性能</h3><p>complie 会优化render 函数，直接写没有优化过程。</p><h3 id="组件会在每个生命周期触发事件，比如’hook-mounted’-这种。"><a href="#组件会在每个生命周期触发事件，比如’hook-mounted’-这种。" class="headerlink" title="组件会在每个生命周期触发事件，比如’hook:mounted’ 这种。"></a>组件会在每个生命周期触发事件，比如’hook:mounted’ 这种。</h3><h3 id="尽量使用受控组件，优先选择函数组件。"><a href="#尽量使用受控组件，优先选择函数组件。" class="headerlink" title="尽量使用受控组件，优先选择函数组件。"></a>尽量使用受控组件，优先选择函数组件。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;动态编译-Vue-compile-str&quot;&gt;&lt;a href=&quot;#动态编译-Vue-compile-str&quot; class=&quot;headerlink&quot; title=&quot;动态编译 Vue.compile(str)&quot;&gt;&lt;/a&gt;动态编译 Vue.compile(str)&lt;/h3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>filerun搭建和配置</title>
    <link href="https://blog.xunserver.cn/archives/cecf9a65.html"/>
    <id>https://blog.xunserver.cn/archives/cecf9a65.html</id>
    <published>2021-04-07T14:57:23.000Z</published>
    <updated>2021-04-07T14:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>参考<a href="https://vuepress.mirror.docker-practice.com/install/" target="_blank" rel="noopener">docker安装和配置</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL get.docker.com -o get-docker.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sh get-docker.sh --mirror Aliyun</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> docker <span class="comment">#开机启动</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker <span class="comment"># 打开服务</span></span></span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo curl -L https://download.fastgit.org/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod u+x /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br></pre></td></tr></table></figure><h2 id="修改docker-compose-yml-配置"><a href="#修改docker-compose-yml-配置" class="headerlink" title="修改docker-compose.yml 配置"></a>修改docker-compose.yml 配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mariadb:10.1</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>  <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/filerun/db:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">afian/filerun</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      FR_DB_HOST:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">      FR_DB_PORT:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">      FR_DB_NAME:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      FR_DB_USER:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      FR_DB_PASS:</span> <span class="string">filerun</span> <span class="comment"># 替换</span></span><br><span class="line"><span class="attr">      APACHE_RUN_USER:</span> <span class="string">www-data</span></span><br><span class="line"><span class="attr">      APACHE_RUN_USER_ID:</span> <span class="number">33</span></span><br><span class="line"><span class="attr">      APACHE_RUN_GROUP:</span> <span class="string">www-data</span></span><br><span class="line"><span class="attr">      APACHE_RUN_GROUP_ID:</span> <span class="number">33</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - db:</span><span class="string">db</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/filerun/html:/var/www/html</span> <span class="comment"># 挂载到宿主的目录 </span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/filerun/user-files:/user-files</span> <span class="comment"># 网盘文件，需要将CIFS挂载到此目录</span></span><br></pre></td></tr></table></figure><h2 id="挂载CIFS硬盘"><a href="#挂载CIFS硬盘" class="headerlink" title="挂载CIFS硬盘"></a>挂载CIFS硬盘</h2><p>选择CIFS共享，不是NFS，NFS权限难搞。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mount -t cifs -o username=share,password=share,gid=tape,uid=33 //bijiben1.home/share  /root/filerun/user-files</span></span><br></pre></td></tr></table></figure></p><p>修改/etc/fstab 实现开机自动挂载<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>bijiben1.home<span class="regexp">/share /</span>root<span class="regexp">/filerun/u</span>ser-files cifs username=share,password=share,gid=tape,uid=<span class="number">33</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h2 id="启动docker-compose"><a href="#启动docker-compose" class="headerlink" title="启动docker-compose"></a>启动docker-compose</h2><blockquote><p>docker-compose up -d </p></blockquote><h2 id="配置filerun"><a href="#配置filerun" class="headerlink" title="配置filerun"></a>配置filerun</h2><ol><li>初始化用户密码是superuser/superuser</li><li>中文界面需要自行下载语言包上传。 <a href="https://github.com/filerun/translations" target="_blank" rel="noopener">语言包</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://vuepress.mirror.docker-prac
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>let-encrypt 域名证书申请</title>
    <link href="https://blog.xunserver.cn/archives/63bb46e5.html"/>
    <id>https://blog.xunserver.cn/archives/63bb46e5.html</id>
    <published>2020-12-13T09:04:51.000Z</published>
    <updated>2020-12-13T09:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载certbot-auto"><a href="#下载certbot-auto" class="headerlink" title="下载certbot-auto"></a>下载certbot-auto</h2><pre><code>wget https://dl.eff.org/certbot-autochmod a+x ./certbot-auto</code></pre><h3 id="单域名证书申请"><a href="#单域名证书申请" class="headerlink" title="单域名证书申请"></a>单域名证书申请</h3><h4 id="新建nginx-配置"><a href="#新建nginx-配置" class="headerlink" title="新建nginx 配置"></a>新建nginx 配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> cloud.jiaxuan.site;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span> /opt/www/cloud.jiaxuan.site;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/cloud.jiaxuan.site_access.log;</span><br><span class="line">    <span class="attribute">error_log</span>  /var/log/nginx/cloud.jiaxuan.site_error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="申请单域名证书"><a href="#申请单域名证书" class="headerlink" title="申请单域名证书"></a>申请单域名证书</h4><blockquote><p>./certbot-auto certonly –email <a href="mailto:1358925129@qq.com" target="_blank" rel="noopener">1358925129@qq.com</a> –domains cloud.jiaxuan.site</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载certbot-auto&quot;&gt;&lt;a href=&quot;#下载certbot-auto&quot; class=&quot;headerlink&quot; title=&quot;下载certbot-auto&quot;&gt;&lt;/a&gt;下载certbot-auto&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;wget https://d
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hyper-v</title>
    <link href="https://blog.xunserver.cn/archives/320b54d3.html"/>
    <id>https://blog.xunserver.cn/archives/320b54d3.html</id>
    <published>2020-11-22T13:20:03.000Z</published>
    <updated>2020-11-22T13:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载固件"><a href="#下载固件" class="headerlink" title="下载固件"></a>下载固件</h2><p>下载<a href="https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/" target="_blank" rel="noopener">lede 虚拟机专用固件</a>, 下载名称为<code>generic-squashfs-combined-efi.vmdk</code>的固件。</p><h2 id="转盘"><a href="#转盘" class="headerlink" title="转盘"></a>转盘</h2><p>使用转盘工具 <a href="http://www.pc6.com/softview/SoftView_809076.html" target="_blank" rel="noopener">StarWind Software V2V Image Converter</a>。转盘工具可以转换<code>.img</code> <code>.vmdk</code> <code>.vhd</code> <code>.vhdx</code>格式，将固件转换成 vhdx 格式镜像，或者并且支持动态动态扩展大小的格式。</p><h2 id="虚拟交换机配置"><a href="#虚拟交换机配置" class="headerlink" title="虚拟交换机配置"></a>虚拟交换机配置</h2><h3 id="配置-Wan"><a href="#配置-Wan" class="headerlink" title="配置 Wan"></a>配置 Wan</h3><p>新建虚拟交换机 =&gt; 外部网络 =&gt; 选择需要绑定的网卡 =&gt; 取消允许管理操作系统共享此网络适配器</p><p>如果取消允许管理操作系统共享此网络适配器，宿主机不能通过此网卡上网，必须要通过内部 <code>lan =&gt; 软路由 =&gt; wan</code> , 共享情况下是直接 <code>=&gt; wan</code></p><p>如果需要多拨的，重复上述步骤</p><h2 id="配置-lan-x"><a href="#配置-lan-x" class="headerlink" title="配置 lan-x"></a>配置 lan-x</h2><p>新建虚拟交换机 =&gt; 外部网络 =&gt; 选择需要绑定的网卡 =&gt; 取消允许管理操作系统共享此网络适配器</p><p>重复上述步骤添加其余 lan</p><h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><ol><li>虚拟机存储位置指的是虚拟机相关的配置保存路径，不是磁盘路径</li><li>虚拟机代数，已知 lede 可以用二代；高恪，爱快二代显示镜像未找到，暂无方法，只能用第一代，第二代可以用 efi 镜像</li><li>第一代第二代磁盘使用不一致，第二代只能用 scsi 控制器添加硬盘驱动器。</li><li>硬盘驱动器第一代选择 IDE 控制器 1</li><li>虚拟磁盘选择转盘后的文件，使用文件前，先扩容到 2G。虚拟磁盘理解成一个隔离的真实磁盘</li><li>网卡配置按照 内部网络 =&gt; lan =&gt; wan 口的形式配置。外部网络需要在高级设置中启动 mac 地址欺骗</li><li>取消安全性检查</li><li>bios 启动顺序，使用硬盘优先</li><li>最好禁用检查点</li></ol><h2 id="启动设备"><a href="#启动设备" class="headerlink" title="启动设备"></a>启动设备</h2><p>使用 192.168.1.1 访问软路由管理界面。因为添加了内部 lan，否则只能设置外部 lan 网卡的网关到 192.168.1.1</p><h2 id="直通教程"><a href="#直通教程" class="headerlink" title="直通教程"></a>直通教程</h2><ol><li>查看所有设备<blockquote><p>Get-PnpDevice </p></blockquote></li><li><p>获取 InstanceId</p><blockquote><p>Get-PnpDevice -FriendlyName “设备名称”| select InstanceId</p></blockquote></li><li><p>禁用设备</p><blockquote><p>Disable-PnpDevice -InstanceId “设备 InstanceId”</p></blockquote></li><li><p>获取设备 LocationPaths</p><blockquote><p>Get-PnpDeviceProperty -InstanceId “设备 InstanceId” -KeyName DEVPKEY_Device_LocationPaths </p></blockquote></li><li><p>通过 LocationPaths 下线设备</p><blockquote><p>Dismount-VMHostAssignableDevice -Force -LocationPath “设备 LocationPaths” </p></blockquote></li><li><p>查看被下线的设备</p><blockquote><p>Get-VMHostAssignableDevice </p></blockquote></li><li><p>通过 LocationPaths 添加设备到虚拟机</p><blockquote><p>Add-VMAssignableDevice -VMName “虚拟机名称” -LocationPath “设备 LocationPaths”</p></blockquote></li></ol><p>可以直接通过 设备管理器 =&gt; 设备 =&gt; 设备详细信息查看 <code>InstanceId</code> 和 <code>LocationPaths</code>。LocationPaths=位置路径 InstanceId=设备实例路径</p><h2 id="踩坑事项"><a href="#踩坑事项" class="headerlink" title="踩坑事项"></a>踩坑事项</h2><ul><li>外部网络不能并用，所以不能同一个外部网络不能分配到两个虚拟机上。</li><li>外部网络设备互斥，不能讲同一个设备分配到两个外部网络上。</li><li>出现 boot loader 加载失败，原因是没有禁用安全性启动</li><li>出现镜像未找到原因是，部分固件不支持二代虚拟机，需要用第一代的形式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载固件&quot;&gt;&lt;a href=&quot;#下载固件&quot; class=&quot;headerlink&quot; title=&quot;下载固件&quot;&gt;&lt;/a&gt;下载固件&lt;/h2&gt;&lt;p&gt;下载&lt;a href=&quot;https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react和vue的生命周期</title>
    <link href="https://blog.xunserver.cn/archives/27ee65e3.html"/>
    <id>https://blog.xunserver.cn/archives/27ee65e3.html</id>
    <published>2020-04-02T09:33:50.000Z</published>
    <updated>2020-04-02T09:33:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><ol><li>beforeCreate （ &lt;=初始化事件和生命周期）</li><li>created （&lt;= prop 注入完成）</li><li>beforeMount 编译 template 模板或者 render， 并收集依赖</li><li>mouted （挂载到 dom 上面）</li><li>beforeUpdate =&gt; 不能在里面更新 data =&gt; 开始 diff render</li><li>beforeDestory =&gt; 解除绑定，解除事件，销毁子组件。</li><li>destoryed =&gt; 删除完回调</li></ol><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><ol><li>defaultProp =&gt; prop</li><li>initState</li><li>componentWillMount</li><li>render</li><li>componentDidMount</li></ol><h3 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h3><p>react 的变化需要自己手动更新，包括 props 和 state 的变化</p><ol><li>props 变化通过 componentWillReceiveProps 获得，</li><li>state 的变化通过 setState 方法来实现</li></ol><p>均会触发 shouldComponentUpdate 钩子，如果钩子返回 false 表示不更新。<br>然后会触发 componentWillUpdate 构造<br>重新调用 render 函数， 渲染界面<br>触发 componentDidUpdate 钩子，</p><p>销毁钩子 componentWillUnmount</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;beforeCreate （ &amp;lt;=初始化事件和生命周期）&lt;/li&gt;
&lt;li&gt;created （&amp;lt;= prop
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react开发采坑之路</title>
    <link href="https://blog.xunserver.cn/archives/5bca6e8e.html"/>
    <id>https://blog.xunserver.cn/archives/5bca6e8e.html</id>
    <published>2020-03-31T07:48:38.000Z</published>
    <updated>2020-03-31T07:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父组件给子组件设置-className-也需要通过-props-传递"><a href="#父组件给子组件设置-className-也需要通过-props-传递" class="headerlink" title="父组件给子组件设置 className 也需要通过 props 传递"></a>父组件给子组件设置 className 也需要通过 props 传递</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;`$&#123;this.props.className&#125;  otherClassName`&#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="jsx-属性命名原则"><a href="#jsx-属性命名原则" class="headerlink" title="jsx 属性命名原则"></a>jsx 属性命名原则</h2><p>React DOM 使用 camelCase（小驼峰命名）来定义属性的名称</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;父组件给子组件设置-className-也需要通过-props-传递&quot;&gt;&lt;a href=&quot;#父组件给子组件设置-className-也需要通过-props-传递&quot; class=&quot;headerlink&quot; title=&quot;父组件给子组件设置 className 也需要通
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>英语学习</title>
    <link href="https://blog.xunserver.cn/archives/3f43dc72.html"/>
    <id>https://blog.xunserver.cn/archives/3f43dc72.html</id>
    <published>2020-03-30T23:56:36.000Z</published>
    <updated>2020-03-30T23:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I come across below behavior</p></blockquote><p>我遇到了下面这些问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;I come across below behavior&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我遇到了下面这些问题&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ts+react环境搭建</title>
    <link href="https://blog.xunserver.cn/archives/3a1fbb86.html"/>
    <id>https://blog.xunserver.cn/archives/3a1fbb86.html</id>
    <published>2020-03-30T09:38:25.000Z</published>
    <updated>2020-03-30T09:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="package-json-初始化"><a href="#package-json-初始化" class="headerlink" title="package.json 初始化"></a>package.json 初始化</h2><blockquote><p>npm init</p></blockquote><h2 id="webpack-安装配置"><a href="#webpack-安装配置" class="headerlink" title="webpack 安装配置"></a>webpack 安装配置</h2><h3 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h3><blockquote><p>npm i -D webpack webpack-cli</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol><li>新建<code>config/base.config.js</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: path.resolve(__dirname, <span class="string">"../src/main.tsx"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>),</span><br><span class="line">    filename: <span class="string">"[name]-[hash].js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\./</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;package-json-初始化&quot;&gt;&lt;a href=&quot;#package-json-初始化&quot; class=&quot;headerlink&quot; title=&quot;package.json 初始化&quot;&gt;&lt;/a&gt;package.json 初始化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;n
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习scss</title>
    <link href="https://blog.xunserver.cn/archives/f800a64.html"/>
    <id>https://blog.xunserver.cn/archives/f800a64.html</id>
    <published>2020-03-29T23:56:02.000Z</published>
    <updated>2020-03-29T23:56:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol><li>用于定义<code>属性值</code>（不能是属性名）</li><li>美元符<code>$</code>开头，具有块级作用域</li><li>可以引用其他变量 <code>$light-border: 1px solid \$ligth-color</code></li><li>变量中命令不区分 下划线和中横线，一般统一风格就行</li></ol><h2 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    // 冒号隔开</span><br><span class="line">    width: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>:  width: <span class="number">1px</span> solid &#123;</span><br><span class="line">    // 冒号隔开</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h2><p>导入文件中定义的变量和混合器, 如果在这个文件中重新定义变量会影响后面所有的变量值</p><p>如果 a.scss 定义了\$a, b 引入 a.scss 并重写了， 后面再次引用 a.scss 的文件均是 b 重写过的</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>使用默认值定义 \$width: 400px !default（这样不会覆盖）</li><li>使用嵌套引入，将引入的作为局部变量 div {@import “”}</li></ol><h2 id="mixin"><a href="#mixin" class="headerlink" title="@mixin"></a>@mixin</h2><p>将片段 复用，理解成讲这个片段完整拷贝到@include 位置</p><p><code>@mixin name {xxxxx}</code> 定义 <code>@include name;</code> 使用</p><ol><li>可以使用 &amp;</li><li>可以包含块</li><li>可以带参数 <code>@mixin name($arg1, $arg2)</code>, <code>@include name(red,blue)</code></li><li><p>具名参数 <code>@mixin name($arg1, $arg2)</code>, <code>@include name({$arg2: blue, $arg1: red)</code></p></li><li><p>默认参数 <code>@mixin name($arg1: red, $arg2: \$agr1)</code> 可以对形参进行引用</p></li></ol><h2 id="extends"><a href="#extends" class="headerlink" title="@extends"></a>@extends</h2><p>继承其他选择器的属性, 仅是那个选择器， 不会包括选择器子元素那些</p><p>继承在 BEM 中实战</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: steelblue;</span><br><span class="line">  &amp;__container &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;__item &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    &amp;--active &#123;</span><br><span class="line">      @<span class="keyword">extend</span> .nav__item;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以在html中直接 .nav__item--active 而不需要使用  .nav__item .nav__item--active</span></span><br></pre></td></tr></table></figure><h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><p>修正之前变量的错误认识</p><ol><li>数字，1, 2, 13, 10px</li><li>字符串，有引号字符串与无引号字符串，”foo”, ‘bar’, baz</li><li>颜色，blue, #04a3f9, rgba(255,0,0,0.5)</li><li>布尔型，true, false</li><li>空值，null</li><li>数组 (list)，用空格或逗号作分隔符，1.5em 1em 0 2em, Helvetica, Arial, sans-serif，同时包含（空格 ，）时分解为子数组</li><li>maps, 相当于 JavaScript 的 object，(key1: value1, key2: value2)</li></ol><h2 id="插值语句"><a href="#插值语句" class="headerlink" title="#{}插值语句"></a>#{}插值语句</h2><p>可以避免运算，直接编译</p><h2 id="amp-的理解"><a href="#amp-的理解" class="headerlink" title="&amp;的理解"></a>&amp;的理解</h2><p>理解成一个特殊的变量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> does-parent-exist &#123;</span><br><span class="line">  @<span class="keyword">if</span> &amp; &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$light-theme</span>: (</span><br><span class="line">  border-color: <span class="number">#eceeef</span>,</span><br><span class="line">  font-color: <span class="number">#323232</span>,</span><br><span class="line">  font-secondary: <span class="number">#c2c6d0</span>,</span><br><span class="line">  background-color: <span class="number">#fff</span>,</span><br><span class="line">  bg-title: <span class="number">#d3e6fb</span>,</span><br><span class="line">  bg-oddList: <span class="number">#f3f3f3</span>,</span><br><span class="line">  bg-listHover: <span class="number">#c5dffe</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//深色主题</span></span><br><span class="line"><span class="variable">$dark-theme</span>: (</span><br><span class="line">  border-color: <span class="number">#000</span>,</span><br><span class="line">  font-color: <span class="number">#c2c6d0</span>,</span><br><span class="line">  font-secondary: <span class="number">#aaa</span>,</span><br><span class="line">  background-color: <span class="number">#131925</span>,</span><br><span class="line">  bg-title: <span class="number">#293248</span>,</span><br><span class="line">  bg-oddList: <span class="number">#171e2c</span>,</span><br><span class="line">  bg-listHover: <span class="number">#0d3a70</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义映射集合</span></span><br><span class="line"><span class="variable">$themes</span>: (</span><br><span class="line">  light: <span class="variable">$light-theme</span>,</span><br><span class="line">  dark: <span class="variable">$dark-theme</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> themify(<span class="variable">$themes</span>: <span class="variable">$themes</span>) &#123;</span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$theme-name</span>, <span class="variable">$map</span> in <span class="variable">$themes</span> &#123;</span><br><span class="line">    <span class="selector-class">.theme-</span>#&#123;<span class="variable">$theme-name</span>&#125; &amp; &#123;</span><br><span class="line">      <span class="variable">$theme-map</span>: () !global;</span><br><span class="line">      @<span class="keyword">each</span> <span class="variable">$key</span>, <span class="variable">$value</span> in <span class="variable">$map</span> &#123;</span><br><span class="line">        <span class="variable">$theme-map</span>: map-merge(</span><br><span class="line">          <span class="variable">$theme-map</span>,</span><br><span class="line">          (</span><br><span class="line">            <span class="variable">$key</span>: <span class="variable">$value</span></span><br><span class="line">          )</span><br><span class="line">        ) !global;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @<span class="keyword">content</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$theme-map</span>: null !global;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@function themed(<span class="variable">$key</span>) &#123;</span><br><span class="line">  @return map-get(<span class="variable">$theme-map</span>, <span class="variable">$key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Avenir"</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-<span class="attribute">font</span>-smoothing: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font</span>-smoothing: grayscale;</span><br><span class="line">  @<span class="keyword">include</span> themify(<span class="variable">$themes</span>) &#123;</span><br><span class="line">    <span class="attribute">background</span>: themed(<span class="string">"background-color"</span>);</span><br><span class="line">    <span class="attribute">color</span>: themed(<span class="string">"font-color"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">each</span> <span class="variable">$item</span>, <span class="variable">$index</span> in <span class="variable">$list</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用于定义&lt;code&gt;属性值&lt;/code&gt;（不能是属性名）&lt;/li&gt;
&lt;li&gt;美元符&lt;code&gt;$&lt;/code&gt;开头，具有块级作用
      
    
    </summary>
    
    
  </entry>
  
</feed>
