<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bang</title>
  
  <subtitle>生活总会有惊喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xunserver.cn/"/>
  <updated>2022-04-11T17:27:45.000Z</updated>
  <id>https://blog.xunserver.cn/</id>
  
  <author>
    <name>yangmanman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ts-type-practice</title>
    <link href="https://blog.xunserver.cn/archives/e961b2fe.html"/>
    <id>https://blog.xunserver.cn/archives/e961b2fe.html</id>
    <published>2022-04-11T17:27:45.000Z</published>
    <updated>2022-04-11T17:27:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新坑，TS类型编程学习</p><h2 id="知识记录"><a href="#知识记录" class="headerlink" title="知识记录"></a>知识记录</h2><h3 id="any-和-unknown区别"><a href="#any-和-unknown区别" class="headerlink" title="any 和 unknown区别"></a>any 和 unknown区别</h3><p>any可以接受任何值，也可以赋值</p><h3 id="keyof-用于把索引类型变成联合类型"><a href="#keyof-用于把索引类型变成联合类型" class="headerlink" title="keyof 用于把索引类型变成联合类型"></a>keyof 用于把索引类型变成联合类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Test = keyof Person <span class="comment">// "name" | "age"</span></span><br><span class="line"><span class="keyword">type</span> Test1 = <span class="string">"name"</span> <span class="keyword">extends</span> keyof Person ? <span class="literal">true</span> : <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> a: Test = <span class="string">"name"</span></span><br></pre></td></tr></table></figure><h3 id="extends-详解"><a href="#extends-详解" class="headerlink" title="extends 详解"></a>extends 详解</h3><p>满足下面条件，判断为true</p><ol><li>两边类型都是常量时，常量需要相同</li><li>两边都是基础类型时，类型需要相同</li><li>索引类型，需要操作符左边包含操作符右边</li><li>联合类型，满足其中一个即可。</li><li>交叉类型需要全部满足<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Pig &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">'pig'</span>,</span><br><span class="line">    weight: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = Pig <span class="keyword">extends</span> Animal ? <span class="literal">true</span> : <span class="literal">false</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="联合类型和交叉类型"><a href="#联合类型和交叉类型" class="headerlink" title="联合类型和交叉类型"></a>联合类型和交叉类型</h3><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><ol><li>针对基础类型时，表示的是几个类型任意一个。</li><li>联合类型只能调用共同方法</li></ol><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><ol><li><p>针对基础类型和常量类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> &amp; <span class="built_in">boolean</span> <span class="comment">// never</span></span><br><span class="line"><span class="built_in">string</span> &amp; <span class="built_in">string</span> <span class="comment">// string</span></span><br><span class="line"><span class="built_in">string</span> &amp; (<span class="built_in">string</span> | <span class="built_in">boolean</span>) <span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li><p>针对索引类型, 表示的索引合集，需要同时满足所有。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = A &amp; B; <span class="comment">// A需要同时具有name 和 age属性</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="提取元组的第一个数组类型"><a href="#提取元组的第一个数组类型" class="headerlink" title="提取元组的第一个数组类型"></a>提取元组的第一个数组类型</h3><p><a href="GetCupleFirstType">在线查看</a><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetCupleFirstType&lt;T <span class="keyword">extends</span> unknown[]&gt; = T <span class="keyword">extends</span> [infer FirstType, ...unknown[]] ? FirstType : never;</span><br><span class="line"><span class="keyword">type</span> Test = GetCupleFirstType&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, symbol]&gt;  <span class="comment">// Test = string</span></span><br></pre></td></tr></table></figure></p><h3 id="提取元组的最后一个类型"><a href="#提取元组的最后一个类型" class="headerlink" title="提取元组的最后一个类型"></a>提取元组的最后一个类型</h3><p><a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBA4hwBkCGBnYBhArmANhAKuBADz5QQAewEAdgCYpSY0DWNA9gO40DaAugD4oAXihlK1eox4A6OczZdefADRQAljQBmEAE5RkaPlAD8B1MCgAuKDQgA3PQChQkMRDQjY8Qxmx5CSGIeNF1NAHM1GkwAWwAjPTUUEHj2HEEoKAB6LPdPUWTUnCA" target="_blank" rel="noopener">在线查看</a><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetLastCupleType&lt;T <span class="keyword">extends</span> unknown[]&gt; = T <span class="keyword">extends</span> [...unknown[], infer Last] ? Last : never</span><br><span class="line"><span class="keyword">type</span> Test = GetLastCupleType&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>, symbol]&gt;  <span class="comment">// Test = symbol</span></span><br></pre></td></tr></table></figure></p><h3 id="数组Pop"><a href="#数组Pop" class="headerlink" title="数组Pop"></a>数组Pop</h3><p><a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBACg9mAPAFShAHsCA7AJgZygFdsBrbOAd2wG0BdAPigF4pUMs9CaA6PgS2wAzCACcoAJQj5gAGmJkK1OlAD8k6cCgAuKNggA3MQG4AUKEhtNLWAkQ0ZowQHN5AIzhwANhACG2eXwQAFsPL0YoKAB6KKgHYCdsVygPbz9sOiA" target="_blank" rel="noopener">在线查看</a><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pop&lt;T <span class="keyword">extends</span> unknown[]&gt; = T <span class="keyword">extends</span> [...infer Rest, unknown] ? Rest : never;</span><br><span class="line"><span class="keyword">type</span> Test = Pop&lt;[<span class="built_in">string</span>, <span class="built_in">boolean</span>, symbol]&gt;  <span class="comment">// [string, boolean]</span></span><br></pre></td></tr></table></figure></p><h3 id="数组Push"><a href="#数组Push" class="headerlink" title="数组Push"></a>数组Push</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Push&lt;T <span class="keyword">extends</span> unknown[], S&gt; = [...T, S]</span><br><span class="line"><span class="keyword">type</span> Test = Push&lt;[<span class="built_in">boolean</span>], <span class="built_in">string</span>&gt; <span class="comment">// [boolean, string]</span></span><br></pre></td></tr></table></figure><h3 id="数组Shift"><a href="#数组Shift" class="headerlink" title="数组Shift"></a>数组Shift</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Shift&lt;T <span class="keyword">extends</span> unknown[]&gt; = T <span class="keyword">extends</span> [<span class="built_in">any</span>, ...infer Rest] ? Rest : never</span><br><span class="line"><span class="keyword">type</span> Test = Shift&lt;[unknown, <span class="built_in">boolean</span>, <span class="string">'1'</span>]&gt;  <span class="comment">// [boolean, '1']</span></span><br></pre></td></tr></table></figure><h3 id="数组Unshift"><a href="#数组Unshift" class="headerlink" title="数组Unshift"></a>数组Unshift</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Unshift&lt;T <span class="keyword">extends</span> unknown[], S&gt; = [S, ...T]</span><br><span class="line"><span class="keyword">type</span> Test = Unshift&lt;[<span class="built_in">boolean</span>], <span class="built_in">string</span>&gt; <span class="comment">// [string, boolean]</span></span><br></pre></td></tr></table></figure><h3 id="数组concat"><a href="#数组concat" class="headerlink" title="数组concat"></a>数组concat</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Concat&lt;T <span class="keyword">extends</span> unknown[], S <span class="keyword">extends</span> unknown[]&gt; = [...T, ...S]</span><br><span class="line"><span class="keyword">type</span> Test = Concat&lt;[<span class="built_in">boolean</span>, <span class="built_in">string</span>], [<span class="string">'1'</span>, <span class="string">'2'</span>]&gt; <span class="comment">// [boolean, string, '1', '2']</span></span><br></pre></td></tr></table></figure><h3 id="数组zip"><a href="#数组zip" class="headerlink" title="数组zip"></a>数组zip</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Zip&lt;One <span class="keyword">extends</span> [unknown, unknown], Other <span class="keyword">extends</span> [unknown, unknown]&gt; = One <span class="keyword">extends</span> [infer OneFirst, infer OneAnother] ? Other <span class="keyword">extends</span> [infer OtherFirst, infer OtherAnother] ? [[OneFirst, OtherFirst], [OneAnother, OtherAnother]]: [] : []</span><br><span class="line"><span class="keyword">type</span> Test = Zip&lt;[<span class="string">'1'</span>, <span class="string">'2'</span>], [<span class="string">'3'</span>, <span class="string">'4'</span>]&gt;  <span class="comment">// [['1', '3'], ['2', '4']]</span></span><br></pre></td></tr></table></figure><h3 id="任意长度数组合并-zip2"><a href="#任意长度数组合并-zip2" class="headerlink" title="任意长度数组合并 zip2"></a>任意长度数组合并 zip2</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Zip2&lt;One <span class="keyword">extends</span> unknown[], Second <span class="keyword">extends</span> unknown[]&gt; = One <span class="keyword">extends</span> [infer OneFirst, ...infer OneRest] ? Second <span class="keyword">extends</span> [infer SecondFirst, ...infer SecondRest] ? [[OneFirst, SecondFirst], ...Zip2&lt;OneRest, SecondRest&gt;] : [[OneFirst], ...Zip2&lt;OneRest, []&gt;] : Second <span class="keyword">extends</span> [infer SecondFirst, ...infer SecondRest] ? [SecondFirst, ...Zip2&lt;SecondRest, []&gt;] : []</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = Zip2&lt;[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"4"</span>], [<span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span> ,<span class="string">"1"</span>]&gt;</span><br></pre></td></tr></table></figure><h3 id="数组flat"><a href="#数组flat" class="headerlink" title="数组flat"></a>数组flat</h3><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串-startWith"><a href="#字符串-startWith" class="headerlink" title="字符串 startWith"></a>字符串 startWith</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StartWith&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;S&#125;</span><span class="subst">$&#123;string&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>  <span class="comment">// ts只有字符串，没char，所以用string匹配</span></span><br><span class="line"><span class="keyword">type</span> Test = StartWith&lt;<span class="string">"123"</span>, <span class="string">"1"</span>&gt; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="字符串EndWith"><a href="#字符串EndWith" class="headerlink" title="字符串EndWith"></a>字符串EndWith</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EndWith&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>, T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;string&#125;</span><span class="subst">$&#123;T&#125;</span>`</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">type</span> Test = EndWith&lt;<span class="string">"123"</span>, <span class="string">"3"</span>&gt; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">type</span> Test1 = EndWith&lt;<span class="string">"123"</span>, <span class="string">"4"</span>&gt; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="字符串首位字符串"><a href="#字符串首位字符串" class="headerlink" title="字符串首位字符串"></a>字符串首位字符串</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetFirstString&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer First&#125;</span><span class="subst">$&#123;string&#125;</span>`</span> ? First : never <span class="comment">// infer 定义的变量只能在true里面使用</span></span><br><span class="line"><span class="keyword">type</span> Test = GetFirstString&lt;<span class="string">"123"</span>&gt; <span class="comment">// "1"</span></span><br></pre></td></tr></table></figure><h3 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Replace&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>, T <span class="keyword">extends</span> <span class="built_in">string</span>, R <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Prev&#125;</span><span class="subst">$&#123;T&#125;</span><span class="subst">$&#123;infer After&#125;</span>`</span> ? <span class="string">`<span class="subst">$&#123;Prev&#125;</span><span class="subst">$&#123;R&#125;</span><span class="subst">$&#123;After&#125;</span>`</span> : S</span><br><span class="line"><span class="keyword">type</span> Test = Replace&lt;<span class="string">"123"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&gt; <span class="comment">// "133"</span></span><br><span class="line"><span class="keyword">type</span> Test1 = Replace&lt;<span class="string">"123"</span>, <span class="string">"3"</span>, <span class="string">"2"</span>&gt; <span class="comment">// "133"</span></span><br></pre></td></tr></table></figure><h3 id="创建指定长度的字符串"><a href="#创建指定长度的字符串" class="headerlink" title="创建指定长度的字符串"></a>创建指定长度的字符串</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符串Trim"><a href="#字符串Trim" class="headerlink" title="字符串Trim"></a>字符串Trim</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Space = <span class="string">'\n'</span> | <span class="string">' '</span> | <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">type</span> TrimLeft&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;Space&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span> ? TrimLeft&lt;Rest&gt; : S</span><br><span class="line"><span class="keyword">type</span> TrimRight&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Rest&#125;</span><span class="subst">$&#123;Space&#125;</span>`</span> ? TrimRight&lt;Rest&gt; : S</span><br><span class="line"><span class="keyword">type</span> Trim&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = TrimLeft&lt;TrimRight&lt;S&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = Trim&lt;<span class="string">"  123\n\t"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="首字母转大写"><a href="#首字母转大写" class="headerlink" title="首字母转大写"></a>首字母转大写</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UpcaseFirst&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer First&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span> ? <span class="string">`<span class="subst">$&#123;Uppercase&lt;First&gt;&#125;</span><span class="subst">$&#123;Rest&#125;</span>`</span> : S;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = UpcaseFirst&lt;<span class="string">'ceshi'</span>&gt; <span class="comment">// "Ceshi"</span></span><br></pre></td></tr></table></figure><h3 id="转小驼峰"><a href="#转小驼峰" class="headerlink" title="转小驼峰"></a>转小驼峰</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CamelCase&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Prev&#125;</span>_<span class="subst">$&#123;infer AfterFirst&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span> ? <span class="string">`<span class="subst">$&#123;Prev&#125;</span><span class="subst">$&#123;Uppercase&lt;AfterFirst&gt;&#125;</span><span class="subst">$&#123;CamelCase&lt;Rest&gt;&#125;</span>`</span> : S</span><br><span class="line"><span class="keyword">type</span> A = CamelCase&lt;<span class="string">'dong_test_liu'</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="删除指定字符串"><a href="#删除指定字符串" class="headerlink" title="删除指定字符串"></a>删除指定字符串</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DropStr&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>, T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = S <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Prefix&#125;</span><span class="subst">$&#123;T&#125;</span><span class="subst">$&#123;infer Suffix&#125;</span>`</span> ? DropStr&lt;<span class="string">`<span class="subst">$&#123;Prefix&#125;</span><span class="subst">$&#123;Suffix&#125;</span>`</span>, T&gt; : S</span><br><span class="line"><span class="keyword">type</span> Test = DropStr&lt;<span class="string">'123'</span>, <span class="string">'1'</span>&gt; <span class="comment">// '23'</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="获取函数参数类型"><a href="#获取函数参数类型" class="headerlink" title="获取函数参数类型"></a>获取函数参数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetParamsType&lt;F <span class="keyword">extends</span> <span class="built_in">Function</span>&gt; = F <span class="keyword">extends</span> (...args: infer Args) =&gt; <span class="built_in">any</span> ? Args : []</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test= GetParamsType&lt;<span class="function">(<span class="params">a?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>&gt; <span class="comment">// [a?: string]</span></span><br></pre></td></tr></table></figure><h3 id="获取函数返回参数类型"><a href="#获取函数返回参数类型" class="headerlink" title="获取函数返回参数类型"></a>获取函数返回参数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetReturnType&lt;F <span class="keyword">extends</span> <span class="built_in">Function</span>&gt; = F <span class="keyword">extends</span> (...args: <span class="built_in">any</span>[]) =&gt; infer Return ? Return : never   <span class="comment">// args中需要设置any，不能是unknow</span></span><br><span class="line"><span class="keyword">type</span> Test = GetReturnType&lt;<span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span>&gt; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h3 id="添加函数参数"><a href="#添加函数参数" class="headerlink" title="添加函数参数"></a>添加函数参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetParamsType&lt;F <span class="keyword">extends</span> <span class="built_in">Function</span>&gt; = F <span class="keyword">extends</span> (...args: infer Args) =&gt; <span class="built_in">any</span> ? Args : [];</span><br><span class="line"><span class="keyword">type</span> GetReturnType&lt;F <span class="keyword">extends</span> <span class="built_in">Function</span>&gt; = F <span class="keyword">extends</span> (...args: <span class="built_in">any</span>[]) =&gt; infer Return ? Return : never;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddFunctionParams&lt;F <span class="keyword">extends</span> (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>, T&gt; = <span class="function">(<span class="params">...args: [...GetParamsType&lt;F&gt;, T]</span>) =&gt;</span> GetReturnType&lt;F&gt;;</span><br><span class="line"><span class="keyword">type</span> AddFunctionParams1&lt;F <span class="keyword">extends</span> (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>, T&gt; = F <span class="keyword">extends</span> (...args: infer Args) =&gt; infer ReturnType ? <span class="function">(<span class="params">...args: [...Args, T]</span>) =&gt;</span> ReturnType : F</span><br><span class="line"><span class="keyword">type</span> Test = AddFunctionParams1&lt;<span class="function">(<span class="params">a: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="设置函数中this的类型"><a href="#设置函数中this的类型" class="headerlink" title="设置函数中this的类型"></a>设置函数中this的类型</h3><p>通过函数参数中第一个参数this定义类型<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    say(name: <span class="built_in">string</span>): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SayName &#123;</span><br><span class="line">    (<span class="keyword">this</span>: Person): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: SayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.say(<span class="string">'name is yang'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'yang'</span>,</span><br><span class="line">    say(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">a() <span class="comment">// Error</span></span><br><span class="line">a.call(person)</span><br><span class="line"><span class="keyword">const</span> b = a.bind(person)</span><br><span class="line">b()</span><br></pre></td></tr></table></figure></p><h3 id="获取函数中this指向的类型。"><a href="#获取函数中this指向的类型。" class="headerlink" title="获取函数中this指向的类型。"></a>获取函数中this指向的类型。</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetThisType&lt;T <span class="keyword">extends</span> <span class="built_in">Function</span>&gt; = T <span class="keyword">extends</span> (<span class="keyword">this</span>: infer ThisType, ...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span> ? ThisType : never <span class="comment">// 注意，函数参数要用 any[] 接受</span></span><br><span class="line"><span class="keyword">type</span> Test = GetThisType&lt;<span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">string</span>, name: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">boolean</span>&gt; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h3 id="构造器和类实例"><a href="#构造器和类实例" class="headerlink" title="构造器和类实例"></a>构造器和类实例</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PersonCtor &#123;</span><br><span class="line">    <span class="keyword">new</span> (name: <span class="built_in">string</span>): Person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createPerson: Person = <span class="function"><span class="keyword">function</span>(<span class="params">ctor: PersonCtor</span>)  </span>&#123;</span><br><span class="line">    ctor() <span class="comment">// 禁止 非构造函数调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(<span class="string">'name'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取构造器的实例类型"><a href="#获取构造器的实例类型" class="headerlink" title="获取构造器的实例类型"></a>获取构造器的实例类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取构造函数的函数实列</span></span><br><span class="line"><span class="keyword">type</span> GetInstanceType&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span> &gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]) =&gt; infer InstanceType ? InstanceType : unknown </span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PersonCtor &#123;</span><br><span class="line">    <span class="keyword">new</span> (): Person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = GetInstanceType&lt;PersonCtor&gt;  <span class="comment">// Person</span></span><br></pre></td></tr></table></figure><h3 id="获取函数构造器参数"><a href="#获取函数构造器参数" class="headerlink" title="获取函数构造器参数"></a>获取函数构造器参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取构造函数的参数类型</span></span><br><span class="line"><span class="keyword">type</span> GetInstanceType&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span> &gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...args: infer ParamsType) =&gt; <span class="built_in">any</span> ? ParamsType : unknown </span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> PersonCtor &#123;</span><br><span class="line">    <span class="keyword">new</span> (name: <span class="built_in">boolean</span>): Person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = GetInstanceType&lt;PersonCtor&gt;  <span class="comment">// [name: boolean]</span></span><br></pre></td></tr></table></figure><h3 id="获取索引类型中指定值的类型"><a href="#获取索引类型中指定值的类型" class="headerlink" title="获取索引类型中指定值的类型"></a>获取索引类型中指定值的类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">boolean</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GetPropNameType&lt;T&gt; = <span class="string">'name'</span> <span class="keyword">extends</span> keyof T ? T <span class="keyword">extends</span> &#123; name: infer NameType &#125; ? NameType : never : never</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = GetPropNameType&lt;Person&gt; <span class="comment">// boolean</span></span><br></pre></td></tr></table></figure><h3 id="索引类型值修改"><a href="#索引类型值修改" class="headerlink" title="索引类型值修改"></a>索引类型值修改</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChangeValue&lt;T&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof T]: [T[K]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = ChangeValue&lt;Person&gt;</span><br></pre></td></tr></table></figure><h3 id="索引类型索引修改"><a href="#索引类型索引修改" class="headerlink" title="索引类型索引修改"></a>索引类型索引修改</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChangeIndex&lt;T&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof T <span class="keyword">as</span> Uppercase&lt;K &amp; <span class="built_in">string</span>&gt;]: [T[K]] <span class="comment">// 只过滤 string类型， 交叉类型在针对普通类型时需要严格相同， 同时never索引默认不会展示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">    <span class="number">1</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = ChangeIndex&lt;Person&gt; <span class="comment">// &#123;NAME: string, age: number&#125;  无 1: number</span></span><br></pre></td></tr></table></figure><h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyRecord&lt;S <span class="keyword">extends</span>  <span class="built_in">string</span> | <span class="built_in">number</span> | symbol, T&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> S ]: T</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A =  MyRecord&lt;<span class="built_in">string</span> | <span class="number">1</span>, <span class="built_in">number</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="取出值为指定类型的索引"><a href="#取出值为指定类型的索引" class="headerlink" title="取出值为指定类型的索引"></a>取出值为指定类型的索引</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mypick&lt;Obj, T&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof Obj <span class="keyword">as</span> Obj[k] <span class="keyword">extends</span> T ? K : never] : Obj[K]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">    sex: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Test = Mypick&lt;&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    sex: A</span><br><span class="line">&#125;, A | <span class="built_in">string</span>&gt;   <span class="comment">// &#123; name: string; sex: A &#125;</span></span><br></pre></td></tr></table></figure><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyReadOnly&lt;T&gt; = &#123;</span><br><span class="line">    readonly [K <span class="keyword">in</span> keyof T]: T[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = MyReadOnly&lt;&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="ToPartial-全部可选"><a href="#ToPartial-全部可选" class="headerlink" title="ToPartial 全部可选"></a>ToPartial 全部可选</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ToPartial&lt;T&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof T]?: T[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = ToPartial&lt;&#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="去掉readonly"><a href="#去掉readonly" class="headerlink" title="去掉readonly"></a>去掉readonly</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DropReadOnly&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt; = &#123;</span><br><span class="line">    -readonly [K <span class="keyword">in</span> keyof T]: T[K] </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Test = DropReadOnly&lt;&#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="去掉可选"><a href="#去掉可选" class="headerlink" title="去掉可选"></a>去掉可选</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DropOptional&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof T]-?: T[K]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Test = DropOptional&lt;&#123;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="获取指定索引类型的子集"><a href="#获取指定索引类型的子集" class="headerlink" title="获取指定索引类型的子集"></a>获取指定索引类型的子集</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FilterByIndexType&lt;Obj <span class="keyword">extends</span> <span class="built_in">Object</span>, T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span> | symbol&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof Obj <span class="keyword">as</span> K &amp; T]: Obj[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = FilterByIndexType&lt;&#123;</span><br><span class="line">    [x: symbol]: <span class="built_in">number</span></span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    <span class="number">1</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="number">2</span>: <span class="built_in">number</span></span><br><span class="line">&#125;,  symbol | <span class="number">1</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="number">1</span> &amp; (<span class="built_in">number</span> | <span class="built_in">string</span>)</span><br></pre></td></tr></table></figure><h3 id="获取指定指针类型的子集"><a href="#获取指定指针类型的子集" class="headerlink" title="获取指定指针类型的子集"></a>获取指定指针类型的子集</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FilterValueType&lt;Obj <span class="keyword">extends</span> <span class="built_in">Object</span>, T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span> | symbol&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof Obj <span class="keyword">as</span> Obj[K] <span class="keyword">extends</span> T ? K :never]: Obj[K]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Test = FilterValueType&lt;&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;, <span class="built_in">number</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="递归获取promise返回值类型"><a href="#递归获取promise返回值类型" class="headerlink" title="递归获取promise返回值类型"></a>递归获取promise返回值类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DeepPromiseTypeHelper&lt;P&gt; = P <span class="keyword">extends</span> <span class="built_in">Promise</span>&lt;infer ValueType&gt; ?  DeepPromiseTypeHelper&lt;ValueType&gt; : P</span><br><span class="line"><span class="keyword">type</span> DeepPromiseType&lt;P <span class="keyword">extends</span> <span class="built_in">Promise</span>&lt;unknown&gt;&gt; = DeepPromiseTypeHelper&lt;P&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test = DeepPromiseType&lt;<span class="built_in">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;新坑，TS类型编程学习&lt;/p&gt;
&lt;h2 id=&quot;知识记录&quot;&gt;&lt;a href=&quot;#知识记录&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue查漏补缺（二）双向绑定原理</title>
    <link href="https://blog.xunserver.cn/archives/61b757b4.html"/>
    <id>https://blog.xunserver.cn/archives/61b757b4.html</id>
    <published>2022-03-24T06:05:48.000Z</published>
    <updated>2022-03-24T06:05:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化对象"><a href="#初始化对象" class="headerlink" title="初始化对象"></a>初始化对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">    cont</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始化对象&quot;&gt;&lt;a href=&quot;#初始化对象&quot; class=&quot;headerlink&quot; title=&quot;初始化对象&quot;&gt;&lt;/a&gt;初始化对象&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue查漏补缺（一）生命周期</title>
    <link href="https://blog.xunserver.cn/archives/69b5cd9a.html"/>
    <id>https://blog.xunserver.cn/archives/69b5cd9a.html</id>
    <published>2022-03-24T00:03:10.000Z</published>
    <updated>2022-03-24T00:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命周期解释"><a href="#生命周期解释" class="headerlink" title="生命周期解释"></a>生命周期解释</h3><p>生命周期函数是一个hook，类似于好莱坞的设计模式，hook是同步调用，在Vue执行的各个时间点被调用，能获取到对应时间点VM的状态</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol><li>赋值_self, vm=this</li><li>合并extend和mixin选型</li><li>初始化proxy拦截器</li><li>初始化render生成函数</li><li>初始化组件上的事件监听器</li></ol><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><ol><li>injection</li><li>prop</li><li>method</li><li>data</li><li>computed</li><li>watch</li><li>provider<h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3></li><li>编辑模板生成render函数</li><li>vm.$el 赋值（但是还未替换dom）<h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3></li><li>执行render函数，生成vnode</li><li>挂载vnode到dom中<h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生命周期解释&quot;&gt;&lt;a href=&quot;#生命周期解释&quot; class=&quot;headerlink&quot; title=&quot;生命周期解释&quot;&gt;&lt;/a&gt;生命周期解释&lt;/h3&gt;&lt;p&gt;生命周期函数是一个hook，类似于好莱坞的设计模式，hook是同步调用，在Vue执行的各个时间点被调用，能获
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>json-schema-json</title>
    <link href="https://blog.xunserver.cn/archives/e6d11dd8.html"/>
    <id>https://blog.xunserver.cn/archives/e6d11dd8.html</id>
    <published>2022-03-15T06:42:52.000Z</published>
    <updated>2022-03-15T06:42:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>form表单渲染schemaField</li><li>schemaField中根据type渲染不同Field。</li><li>ObjectFiled，需要渲染容器</li><li>如果是其他类型，渲染由widget包裹的组件</li><li>widget是一个el-form-item</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;form表单渲染schemaField&lt;/li&gt;
&lt;li&gt;schemaField中根据type渲染不同Field。&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http查漏补缺</title>
    <link href="https://blog.xunserver.cn/archives/756fdee8.html"/>
    <id>https://blog.xunserver.cn/archives/756fdee8.html</id>
    <published>2022-03-03T09:43:40.000Z</published>
    <updated>2022-03-03T09:43:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="https-加密流程"><a href="#https-加密流程" class="headerlink" title="https 加密流程"></a>https 加密流程</h3><ol><li>服务端使用第三方机构（ca）的私钥加密，获得一个公钥证书发给浏览器</li><li>浏览器调用三芳芳机构公钥解密，获得服务端的公钥。浏览器使用服务端公钥生成一个对称密钥，发给服务端</li><li>服务端使用自己的私钥解密，获取到对称的密钥</li></ol><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS使用UDP， 递归查询是指域名服务帮忙查询下一级，迭代查询是指客户端自己查询下一级</p><h3 id="常见服务端口"><a href="#常见服务端口" class="headerlink" title="常见服务端口"></a>常见服务端口</h3><p>20 ftp数据口<br>21 ftp控制口<br>22 ssh<br>23 telnet<br>80 http<br>443 https<br>3306 mysql<br>6379 redis   </p><h3 id="localStorage-和-sessionStorage。"><a href="#localStorage-和-sessionStorage。" class="headerlink" title="localStorage 和 sessionStorage。"></a>localStorage 和 sessionStorage。</h3><p>localStorage在存储系统中按照同源策略保存，sessionStorage按照同源同时加上tabId保存，当页面tab被关闭时清空，而不是等到浏览器关闭时清空，而且不同tab页面不共享。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;https-加密流程&quot;&gt;&lt;a href=&quot;#https-加密流程&quot; class=&quot;headerlink&quot; title=&quot;https 加密流程&quot;&gt;&lt;/a&gt;https 加密流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;服务端使用第三方机构（ca）的私钥加密，获得一个公钥证书发给浏览
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浏览器解析</title>
    <link href="https://blog.xunserver.cn/archives/50c7c64b.html"/>
    <id>https://blog.xunserver.cn/archives/50c7c64b.html</id>
    <published>2022-03-01T07:35:42.000Z</published>
    <updated>2022-03-01T07:35:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器渲染进程包含的线程"><a href="#浏览器渲染进程包含的线程" class="headerlink" title="浏览器渲染进程包含的线程"></a>浏览器渲染进程包含的线程</h3><ol><li>GUI 渲染线程，负责解析HTML，CSS，构建DOM、CSSOM和render tree, 布局和绘制。当页面回流时。</li><li>js引擎线程，一个渲染进程只有一个js引擎线程，负责解析执行js代码</li><li>事件线程，当事件触发时，会添加到队尾，等待js引擎执行</li><li>定时器线程，触发后放在队尾</li><li>htto请求线程，请求后放在队尾</li></ol><h3 id="简略版xuanran"><a href="#简略版xuanran" class="headerlink" title="简略版xuanran"></a>简略版xuanran</h3><ol><li>解析html，构建dom树</li><li>解析css,构建css树</li><li>cssom和dom合并成渲染树</li><li>根据渲染树计算节点位置，布局</li><li>调用GUI绘图，上色，合成图层，并渲染到界面上</li></ol><h3 id="html、css和js解析构建顺序"><a href="#html、css和js解析构建顺序" class="headerlink" title="html、css和js解析构建顺序"></a>html、css和js解析构建顺序</h3><ol><li>html解析从上到下解析文档，依次构建DOM</li><li>如果碰到link或者style，异步的进行cssom构建</li><li>如果碰到js脚本，会先等到前面的cssom构建完成，才会解析js脚本（可以先下载）。js脚本解析执行期间，html会停止解析</li><li>初始的html解析完成后，会触发documentContentLoad 事件。此时图片资源可能还未下载完成</li><li>load 事件表示初始html以及资源全部load</li></ol><h3 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h3><p>一个普通的文档流被视为一个图层，包括浮动和非（fixed）定位。对于频繁的渲染需要生成一个新的图层来操作。</p><ol><li>3D转换</li><li>fixed</li><li>动画</li></ol><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><p>重绘不涉及布局和几何变化，比如改下颜色。<br>回流是指布局和几何外观的改变，需要渲染整个图层。<br>所有重绘和回流都只争对当前元素</p><h3 id="避免回流"><a href="#避免回流" class="headerlink" title="避免回流"></a>避免回流</h3><ol><li>translate 替换 top</li><li>选择器从右到左，避免dom查找过深</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浏览器渲染进程包含的线程&quot;&gt;&lt;a href=&quot;#浏览器渲染进程包含的线程&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染进程包含的线程&quot;&gt;&lt;/a&gt;浏览器渲染进程包含的线程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;GUI 渲染线程，负责解析HTML，CSS，构建
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浏览器网络</title>
    <link href="https://blog.xunserver.cn/archives/31643d6c.html"/>
    <id>https://blog.xunserver.cn/archives/31643d6c.html</id>
    <published>2022-03-01T02:40:51.000Z</published>
    <updated>2022-03-01T02:40:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器进程"><a href="#浏览器进程" class="headerlink" title="浏览器进程"></a>浏览器进程</h3><ol><li>主进程</li><li>网络进程</li><li>GUI进程</li><li>多个插件进程</li><li>多个渲染进程（一个页面一个，多个同源界面共用一个，所以页面崩溃时可能影响其他多个页面，一个tab页因为iframe可能存在多个渲染进程）</li></ol><p>渲染进程是放在sanbox中的，不讲整个浏览器放在sanbox原因是其他进程需要用到沙箱外的服务。渲染进程需要保证安全。</p><h3 id="输入url到页面展示页面流程"><a href="#输入url到页面展示页面流程" class="headerlink" title="输入url到页面展示页面流程"></a>输入url到页面展示页面流程</h3><ol><li>构建请求行 GET /index.html http1.1 （没有host和协议）</li><li>浏览器根据请求url判断是否走缓存，如果是get请求，根据查询强缓存（硬盘缓存和内存缓存）查询是否有，有直接返回。没有缓存走下一步。</li><li>准备ip或者端口，如果是url是域名形式的，需要根据DNS查询ip，DNS查询也有多级缓存，查询的流程有递归和迭代查询，前者是从根域名服务器查询，根域名服务器往下查询。后者由下往上查询。如果url中没有端口，端口根据协议自动推导</li><li>准备请求投，根据发起请求添加header，部分请求头浏览器默认准备，cookie会自动根据当前domain和path，添加父域名和父path的cookie。host（domain + port）, referer根据请求发起的位置添加（<a href="http://xxxx.com/123），不包含hash。还有origin，格式同referer" target="_blank" rel="noopener">http://xxxx.com/123），不包含hash。还有origin，格式同referer</a></li><li>建立TCP连接，三次握手，发送请求，谷歌tcp连接最多6条，所以在控制台中有等待的请求</li><li><p>服务处理请求，发送响应，响应包括响应头，响应行，响应体。<br>响应行包括协议、状态码(HTTP/1.1 304)，常见的状态码如下<br>1xx: 请求未传输完成，继续传输<br>200: 请求接受成功，正常处理<br>301: 资源永久重定向, 根据响应头中的location请求新地址<br>302: 资源临时重定向，location处理<br>304：资源未被修改，使用本地缓存文件。同时根据响应头更新本地资源。<br>400: 服务器无法理解当前请求<br>401：未鉴权<br>403: 已登录无权限<br>404: 资源未找到<br>405: 请求的方法错误<br>5xx: 服务器出错了。</p></li><li><p>浏览器解析文档，从上到下依次解析html，计息dom和cssom，组成渲染树，然后渲染到页面。</p></li></ol><h3 id="浏览器缓存概述"><a href="#浏览器缓存概述" class="headerlink" title="浏览器缓存概述"></a>浏览器缓存概述</h3><ol><li>查询是否存在强缓存（cache-control, expire）。如果不存在直接请求</li><li>检查强缓存是否有效（先检查cache-control）,如果没有过期，使用缓存</li><li>如果过期，使用协商缓存，先检查是否有etag,如果有etag，发送请求（携带if-none-match:etag），服务端接收到请求后，如果当前缓存有效，返回304和新的etag，浏览器使用本地缓存同时更新etag或者新的cache-control。如果当前服务检查缓存无效，则会返回新的资源和etag等</li><li>如果不存在etag，存在last-modified。则发送if-modified-since, 服务端检查后同etag处理流程一致。</li><li>如果都不存在，则发送新请求。</li></ol><h3 id="浏览器解析文档"><a href="#浏览器解析文档" class="headerlink" title="浏览器解析文档"></a>浏览器解析文档</h3><ol><li>浏览器根据content-type判断是交给文档解析器还是下载管理器，一般content-type 是字节流会交给下载管理器作为下载文件</li><li>如果是文档，会交给渲染进程，渲染进程接受到后发挥出确认提交给浏览器主进程，主进程会更新浏览器导航栏，地址栏等信息。这个时候页面时空白，然后开始解析文档，渲染界面</li></ol><h3 id="defer-和-async"><a href="#defer-和-async" class="headerlink" title="defer 和 async"></a>defer 和 async</h3><p>defer是延迟，表示资源下载完后，在文档解析完成后依次执行<br>async 是异步，表示资源下载不阻塞，资源下载后立马执行，阻塞渲染进程解析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浏览器进程&quot;&gt;&lt;a href=&quot;#浏览器进程&quot; class=&quot;headerlink&quot; title=&quot;浏览器进程&quot;&gt;&lt;/a&gt;浏览器进程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;主进程&lt;/li&gt;
&lt;li&gt;网络进程&lt;/li&gt;
&lt;li&gt;GUI进程&lt;/li&gt;
&lt;li&gt;多个插件进程&lt;/li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cookie</title>
    <link href="https://blog.xunserver.cn/archives/8ae0ba66.html"/>
    <id>https://blog.xunserver.cn/archives/8ae0ba66.html</id>
    <published>2022-02-24T22:40:45.000Z</published>
    <updated>2022-02-24T22:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在公司碰到了内嵌的iframe始终提示未登录的问题，查询到时接口请求时未自动携带cookie，排查过程中一直没搞懂cookie携带的机制。将排查后学习到总计一下。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>先来几个问题</p><ol><li>cookie是怎么设置到浏览器中，设置cookie有什么限制</li><li>什么样的请求能携带cookie，能携带哪些cookie</li><li>cookie存储方式是什么</li><li>cookie 和 storeage 区别</li><li>跨域和跨站</li></ol><h2 id="跨域和跨站"><a href="#跨域和跨站" class="headerlink" title="跨域和跨站"></a>跨域和跨站</h2><p>同域: 协议、域名、端口相同，反之是跨域<br>同站: eTLD + 1, 顶级域名 + 1 相同则是同站，反之是跨站</p><h2 id="请求的场景"><a href="#请求的场景" class="headerlink" title="请求的场景"></a>请求的场景</h2><p>假设当前网站是xunserver.cn, 页面地址是<a href="http://cloud.xunserver.cn/file。这个页面发出的请求有以下几种" target="_blank" rel="noopener">http://cloud.xunserver.cn/file。这个页面发出的请求有以下几种</a></p><ol><li>同域请求，<a href="http://cloud.xunserver.cn/patha" target="_blank" rel="noopener">http://cloud.xunserver.cn/patha</a></li><li>跨域请求不跨站  <a href="https://cloud.xunserver.cn/patha" target="_blank" rel="noopener">https://cloud.xunserver.cn/patha</a> 和 <a href="http://cloud.xunserver.cn:8088/patha" target="_blank" rel="noopener">http://cloud.xunserver.cn:8088/patha</a></li><li>子域名请求 <a href="http://nps.cloud.xunserver.cn/patha" target="_blank" rel="noopener">http://nps.cloud.xunserver.cn/patha</a></li><li>跨域同时跨站 <a href="http://docker.xunserver.com/patha" target="_blank" rel="noopener">http://docker.xunserver.com/patha</a></li><li>上级域名请求 <a href="http://xunserver.cn" target="_blank" rel="noopener">http://xunserver.cn</a></li></ol><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="cookie组成"><a href="#cookie组成" class="headerlink" title="cookie组成"></a>cookie组成</h3><p>cookie 包括name, value, domain, path, expire, httpOnly, secure, samesite。</p><h3 id="cookie-如何被设置"><a href="#cookie-如何被设置" class="headerlink" title="cookie 如何被设置"></a>cookie 如何被设置</h3><p>有两种设置cookie的方法</p><ol><li>请求响应头中set-cookie</li><li>前端JS代码document.cookie。</li></ol><p>通过响应设置cookie时， domian默认是当前请求的eTLD + 1， 路径默认是/。可以设置上级域名和上级路径的cookie，如果设置子域名或者子路径，cookie设置会无效，而且会被抛弃。</p><p>document.cookie 设置和set cookie类似，前者被限制于当前文档的地址（浏览器地址栏）,而且不能设置httpOnly和secure 属性。</p><h3 id="cookie-如何被携带"><a href="#cookie-如何被携带" class="headerlink" title="cookie 如何被携带"></a>cookie 如何被携带</h3><p>当浏览器发送请求时，根据请求的场景携带cookie不同。</p><ol><li>同域请求， 自动携带当前请求所有的子域名和父路径, 会携带path=/patha、path=/ 和 domain=cloud.xunserver.cn、xunserver.cn的cookie</li><li>cookie不区分端口和协议，所以同上一致</li><li>会携带domain=nps.cloud.xunserver.cn 以及上级域名</li><li>携带domian=docker.xunserver.cn</li><li>携带domain=xunsrever.cn 不会携带cloud.xunserver.cn 域名</li></ol><h4 id="samesite-是啥"><a href="#samesite-是啥" class="headerlink" title="samesite 是啥"></a>samesite 是啥</h4><p>用户在银行登录了系统，这个时候浏览器嵌入了cookie，如果恶意网站中有一个form表单，提交地址是银行的链接，用户在点击链接后就会触发接口，因为请求携带了cookie，所以银行会判断为正常用户，从而带来不安全。或者恶意网站嵌套i银行frame，诱导用户点击，实际点击到了银行网站的接口。<br>samesite有三个值,strict, lax 和none<br>strict 表示只有请求在同站的情况下，才会携带cookie。<br>lax 表示除了a标签、预加载、get表单能cookie外，其余场景都不能携带，包括iframe<br>none 表示不限制    </p><p>samesite 如何设置，浏览器默认是lax, 匿名浏览器如果关闭第三方共享是strict。如果设置none，需要同时secure，同时在https下设置</p><h3 id="跨域如何携带cookie"><a href="#跨域如何携带cookie" class="headerlink" title="跨域如何携带cookie"></a>跨域如何携带cookie</h3><h4 id="哪些些请求能跨域"><a href="#哪些些请求能跨域" class="headerlink" title="哪些些请求能跨域"></a>哪些些请求能跨域</h4><p>link、img、script 标签支持跨域，但是new Image不支持。跨域能发送请求，但是不能解析响应。<br>其余的通过axios或者fetch发送跨域请求，<br>axios 需要添加withCredentials: true支持跨域携带cookie<br>fetch 需要添加withCredentials: include属性</p><h4 id="fetch-withCredentials解析"><a href="#fetch-withCredentials解析" class="headerlink" title="fetch withCredentials解析"></a>fetch withCredentials解析</h4><p>omit 跨域不打送cookie<br>include 总是发送<br>same-origin 同站才发送</p><h3 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h3><p>localstorage 和 sessionStorage 严格按照同源原则。</p><h3 id="document-domain-用来干嘛"><a href="#document-domain-用来干嘛" class="headerlink" title="document.domain 用来干嘛"></a>document.domain 用来干嘛</h3><p>可以把父页面和iframe的domain设置成一个（都需要设置，因为document.domain调用后端口会被设置为null），父页面可以拿到iframe的window对象，从而调用iframe中的方法实现跨域。设置document.domain 仅设置自身或者上级域名，不能设置为其他或者子域名。</p><p>也可以通过window.open 获取引用</p><h3 id="如何检查浏览器同时打开多个相同页面"><a href="#如何检查浏览器同时打开多个相同页面" class="headerlink" title="如何检查浏览器同时打开多个相同页面"></a>如何检查浏览器同时打开多个相同页面</h3><p>循环检查localStorage</p><h3 id="host、referer和origin"><a href="#host、referer和origin" class="headerlink" title="host、referer和origin"></a>host、referer和origin</h3><p>host: 指向请求的host和端口号，任何请求都有<br>referer: 当前请求发起的来源，一个页面跳转到另一个页面指向的是之前的页面，页面内发起的资源请求，指向当前文档的地址，不包含hash<br>origin: 跨域请求中常见 ，指向原始</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在公司碰到了内嵌的iframe始终提示未登录的问题，查询到时接口请求时未自动携带cookie，排查过程中一直没搞懂cookie携带的机制
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>network</title>
    <link href="https://blog.xunserver.cn/archives/608487bc.html"/>
    <id>https://blog.xunserver.cn/archives/608487bc.html</id>
    <published>2022-01-26T21:55:20.000Z</published>
    <updated>2022-01-26T21:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="console-线"><a href="#console-线" class="headerlink" title="console 线"></a>console 线</h4><p>一头网线，一头usb线的线，通过串口控制设备 一般是9600 8 0 配置</p><h4 id="盒式设备、框式设备"><a href="#盒式设备、框式设备" class="headerlink" title="盒式设备、框式设备"></a>盒式设备、框式设备</h4><p>盒式设备高度按照u来分区，一般一排网口的是半U，两排是1U。框式设备是一整块机柜，包含电源主从，控制主从等。</p><h4 id="MGT端口"><a href="#MGT端口" class="headerlink" title="MGT端口"></a>MGT端口</h4><p>通过两头网线控制，笔记和管理端口同网段即可</p><h4 id="mini-console"><a href="#mini-console" class="headerlink" title="mini-console"></a>mini-console</h4><p>一头usb，另一个mini-console接口，用于控制设备</p><h4 id="telnet和ssh"><a href="#telnet和ssh" class="headerlink" title="telnet和ssh"></a>telnet和ssh</h4><p>通过应用层协议连接</p><h4 id="rs232"><a href="#rs232" class="headerlink" title="rs232"></a>rs232</h4><p>9针口，现在的都集成变成usb</p><h4 id="telnet、ssh-端口"><a href="#telnet、ssh-端口" class="headerlink" title="telnet、ssh 端口"></a>telnet、ssh 端口</h4><p>telnet 23 ssh 22</p><h4 id="ISO，OSI"><a href="#ISO，OSI" class="headerlink" title="ISO，OSI"></a>ISO，OSI</h4><p>ISO 国际标准化组织<br>OSI 开放系统互联互通模型</p><h4 id="OSI-7层模型介绍"><a href="#OSI-7层模型介绍" class="headerlink" title="OSI 7层模型介绍"></a>OSI 7层模型介绍</h4><h5 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h5><p>物理层层面的0，1转换传输。以太帧</p><h5 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h5><p>物理上点到点的传输， Mac</p><h5 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h5><p>节点和节点的传输。IP</p><h5 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h5><p>端口到端口的传输</p><h4 id="命令行权限和用户权限"><a href="#命令行权限和用户权限" class="headerlink" title="命令行权限和用户权限"></a>命令行权限和用户权限</h4><p>命令权限有0-3级， 分别是观察级、监控级、配置级和管理级<br>用户权限有0-15级  前面和命令行对应。每一级可以使用前面所有等级命令</p><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>用户视图  \&lt;host> 默认登录上的视图</p><p>系统视图 [host] 用户视图输入system-view 后进入</p><p>命令视图 系统视图下输入命令的视图</p><h4 id="配置ip地址"><a href="#配置ip地址" class="headerlink" title="配置ip地址"></a>配置ip地址</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system-view <span class="comment"># 系统视图</span></span><br><span class="line">interface Ethernet 0/0/8 <span class="comment"># 接口视图</span></span><br><span class="line">ip address 192.168.1.2 24 <span class="comment"># 设置ip</span></span><br></pre></td></tr></table></figure><h4 id="开启telnet-登录"><a href="#开启telnet-登录" class="headerlink" title="开启telnet 登录"></a>开启telnet 登录</h4><h5 id="1-新建用户"><a href="#1-新建用户" class="headerlink" title="1. 新建用户"></a>1. 新建用户</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system-view </span><br><span class="line">aaa <span class="comment"># 进入aa模式</span></span><br><span class="line"><span class="built_in">local</span>-user <span class="built_in">test</span> password cipher <span class="built_in">test</span> <span class="comment"># 设置用户名密码</span></span><br><span class="line"><span class="built_in">local</span>-user <span class="built_in">test</span> service-type telnet <span class="comment"># 指定用户登录模式</span></span><br></pre></td></tr></table></figure><h5 id="2-分配vty"><a href="#2-分配vty" class="headerlink" title="2. 分配vty"></a>2. 分配vty</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要指定用户登录的vty</span></span><br><span class="line">system-view </span><br><span class="line">user-interface vty 0 3 <span class="comment"># vty配置模式</span></span><br><span class="line">user privil level 3 <span class="comment"># vty 用户最大权限</span></span><br><span class="line">authentication-mode aaa <span class="comment"># 设置认证方式为aaa</span></span><br></pre></td></tr></table></figure><h5 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h5><p>CU: 控制单元<br>OB: 输出缓存<br>LC: 线路编码器<br>TX: 发射器   </p><p>RX: 接收器<br>LD: 线路解码器<br>IB: 输入缓冲<br>CU从网络层获取到packet，在CU封装成frame帧，帧传递到OB，OB会按照帧的接受顺序排列成队列，依次传递到LC。LC把一个一个的帧编码成 0 1物理电平传递给TX, TX将物理的电平增加功率，发送出去双绞线。</p><p>同理，RX,LD,OB也相同。</p><p>交换机的网卡和主机网卡在CU处理方面不同，交换机接收到帧做泛洪，舍弃，点对点转发。主机网卡接收到帧后，会解开帧后转交给上层的网络层处理。</p><h5 id="mac地址"><a href="#mac地址" class="headerlink" title="mac地址"></a>mac地址</h5><p>MAC 地址有48位，区分为单播MAC（首字节末尾是0），组播MAC（首字节末尾是1），广播MAC（全是1，所以是一种特殊组播），网卡的MAC又称BIA地址，前24位是厂商向IEEE申请，后24位厂商自行分配。前24位是OUI地址。</p><h5 id="以太帧"><a href="#以太帧" class="headerlink" title="以太帧"></a>以太帧</h5><p>目前使用的以太帧有IEEE 802.3 和 Ethernet II 两种格式。Ethernet II格式简单使用广泛，IEEE 802.3用于某些特殊协议。</p><p>Ethernet II由以下组成，目的MAC，源MAC，2字节表示类型，载荷，和CRC校验和结尾。</p><h5 id="2的次方速记"><a href="#2的次方速记" class="headerlink" title="2的次方速记"></a>2的次方速记</h5><p>一个字节8位，两个16进制计数。<br>2 ^ 8 = 65536;2 ^ 16 = 16777216 </p><h5 id="帧的流转"><a href="#帧的流转" class="headerlink" title="帧的流转"></a>帧的流转</h5><p>帧在交换机端口中进入时，会查找MAC表中是否存在映射，不存在时执行泛洪，并保存将帧的源MAC和端口保存更新到MAC表中。MAC和端口是多对一的关系。主机MAC在接收到单播帧时，会检查BIA地址和目的MAC是否一致，如果不一致则会丢弃帧。接收到广播帧时，CU会传递到上层模块</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;console-线&quot;&gt;&lt;a href=&quot;#console-线&quot; class=&quot;headerlink&quot; title=&quot;console 线&quot;&gt;&lt;/a&gt;console 线&lt;/h4&gt;&lt;p&gt;一头网线，一头usb线的线，通过串口控制设备 一般是9600 8 0 配置&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hcna</title>
    <link href="https://blog.xunserver.cn/archives/548c626e.html"/>
    <id>https://blog.xunserver.cn/archives/548c626e.html</id>
    <published>2022-01-26T21:35:23.000Z</published>
    <updated>2022-01-26T21:35:23.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dhcp</title>
    <link href="https://blog.xunserver.cn/archives/cd116c88.html"/>
    <id>https://blog.xunserver.cn/archives/cd116c88.html</id>
    <published>2022-01-11T19:42:04.000Z</published>
    <updated>2022-01-11T19:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>DHCP（dynamic host configuration protocol）动态主机配置协议。是一个应用层协议，用于给dhcp客户端配置ip，网关，dns等。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="首次DHCP"><a href="#首次DHCP" class="headerlink" title="首次DHCP"></a>首次DHCP</h4><ol><li>客户端广播DISCOVER，要求当前广播域中的服务器提供可用的IP。</li><li>服务端广播OFFER，提供可选的IP。</li><li>客户端选择一个可用的IP，广播REQUEST，提示服务端已经选择某个OFFER。</li><li>服务端收到REQUEST后，记录已经分配的IP，并广播ACK。</li><li>客户端收到ACK后，设置IP。</li></ol><h4 id="释放IP"><a href="#释放IP" class="headerlink" title="释放IP"></a>释放IP</h4><ol><li>客户端单播发送RELEASE，目标地址时DHCP服务端</li><li>服务收到，释放IP</li></ol><h4 id="续租"><a href="#续租" class="headerlink" title="续租"></a>续租</h4><ol><li>租期50%时（T1），客户端会单播发送REQUEST，服务端单播ACK，续租成功。如果服务端单播回复NAK，会重新走DISCOVER流程请求新的IP</li><li>如果T1时发送的包REQUEST未得到回应，会在87.5%时，发送第二次RESQUEST，流程同第一次</li><li>如果租期到了，REQUEST还未得到回应，走DISCOVER流程</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>配置默认网关</li><li>配置主备DNS服务器</li><li>配置开始的IP池，结束IP池</li></ul><h3 id="从DHCP服务器"><a href="#从DHCP服务器" class="headerlink" title="从DHCP服务器"></a>从DHCP服务器</h3><p>同一个广播域中可以存在多个DHCP服务器，所以DHCP流程有4步，不是2步。OFFER就相当于保价并保留短暂时间，如果客户端发起的REQUEST相当于通知其他DHCP没选择他们的OFFER</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;DHCP（dynamic host configuration protocol）动态主机配置协议。是一个应用层协议，用于给dhcp客户端配
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>esxi入门玩法</title>
    <link href="https://blog.xunserver.cn/archives/61a1a8d1.html"/>
    <id>https://blog.xunserver.cn/archives/61a1a8d1.html</id>
    <published>2022-01-10T00:16:56.000Z</published>
    <updated>2022-01-10T00:16:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ol><li><a href="https://customerconnect.vmware.com/downloads/#all_products" target="_blank" rel="noopener">vm下载页面</a>，搜索<code>VMware vSphere</code>下载，当前最新版本<a href="https://customerconnect.vmware.com/downloads/info/slug/datacenter_cloud_infrastructure/vmware_vsphere/7_0" target="_blank" rel="noopener">7.0</a>，下载<a href="https://customerconnect.vmware.com/en/group/vmware/evalcenter?p=free-esxi7" target="_blank" rel="noopener">Standard版本</a></li><li>使用软碟通刷入U盘，选择硬盘镜像</li><li>主板uefi下引导，安装。</li></ol><h3 id="安装黑群晖"><a href="#安装黑群晖" class="headerlink" title="安装黑群晖"></a>安装黑群晖</h3><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://customerconnect.vmware.com/downloads/#a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="https://blog.xunserver.cn/archives/f85ddf3d.html"/>
    <id>https://blog.xunserver.cn/archives/f85ddf3d.html</id>
    <published>2021-12-20T03:49:30.000Z</published>
    <updated>2021-12-20T03:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="防抖debounce"><a href="#防抖debounce" class="headerlink" title="防抖debounce"></a>防抖debounce</h3><p>事件发生后，规定时间内只执行一次回调, 如果重复触发，会重置计时器和事件。</p><p>有立即执行和延迟执行两种方式，应用场景不同。</p><ul><li>立即执行，触发事件 -&gt; 执行回调 -&gt; 延迟。常用在输入框远程搜索。</li><li>延迟执行，触发事件 -&gt; 延时 -&gt; 执行回调。用在防止按钮重复点击</li></ul><p>实现方式如下</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>规定时间段内，只会发生一次事件，重复事件会被舍弃掉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;防抖debounce&quot;&gt;&lt;a href=&quot;#防抖debounce&quot; class=&quot;headerlink&quot; title=&quot;防抖debounce&quot;&gt;&lt;/a&gt;防抖debounce&lt;/h3&gt;&lt;p&gt;事件发生后，规定时间内只执行一次回调, 如果重复触发，会重置计时器和事件。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>access-control</title>
    <link href="https://blog.xunserver.cn/archives/cb8b60b3.html"/>
    <id>https://blog.xunserver.cn/archives/cb8b60b3.html</id>
    <published>2021-12-17T03:39:57.000Z</published>
    <updated>2021-12-17T03:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>必须满足下列所有条件</p><ul><li>请求方法是 GET POST HEAD(只请求资源首部)</li><li>首部只能包含下面字段<ul><li>accept</li><li>accept-language</li><li>content-language</li><li>content-type</li></ul></li><li>content-type 的值只能是<ul><li><code>application/x-www-form-urlencode</code></li><li><code>multipart/form-data</code></li><li><code>text/plain</code></li></ul></li></ul><h3 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h3><p>不满足简单请求的都是复杂请求, 常见的复杂请求包括 content-type: applcation/json</p><h3 id="cors-cross-origin-resource-sharing-跨域资源共享"><a href="#cors-cross-origin-resource-sharing-跨域资源共享" class="headerlink" title="cors cross-origin resource sharing  跨域资源共享"></a>cors cross-origin resource sharing  跨域资源共享</h3><h4 id="简单请求-1"><a href="#简单请求-1" class="headerlink" title="简单请求"></a>简单请求</h4><p>针对简单请求，浏览器发现是跨域，会在请求中添加origin字段，如果服务端允许跨域，会返回access-control-allow-origin 字段，浏览器检测返回字段是否和当前域匹配，决定是否舍弃当前请求。</p><p>响应会返回下面3个首部字段</p><ul><li>access-control-allow-origin, 指定允许的域。只能是origin 字段或者*</li><li>access-control-allow-credentials，决定下次请求是否可以携带cookies</li><li>access-control-allow-headers, 允许浏览器额外获取的首部字段</li></ul><h4 id="复杂请求-1"><a href="#复杂请求-1" class="headerlink" title="复杂请求"></a>复杂请求</h4><p>针对复杂请求浏览器会先发送预检请求(options)，检查当前请求能否跨域，允许的字段等。<br>浏览器发送预检查请求，包括Origin,access-control-request-method（表示当前请求的方法）,access-control-allow-Headers(表示当前请求额外的首部字段)</p><p>服务端根据预检请求，会返回origin，access-control-allow-methods（表示允许的方法），用逗号分隔access-control-allow-headers(表示允许的首部字段)（逗号分隔），浏览器会检查，如果和当前匹配，则会发送正式请求。</p><p>为了避免浏览器每次需要预检请求，还会同时返回access-control-max-age(秒), 表示有效期内不用发送预检请求。如果一个请求背、被预检通过，会走简单请求的流程，如果这个时候被简单请求拦截， 也不会成功</p><h4 id="nginx-配置cors"><a href="#nginx-配置cors" class="headerlink" title="nginx 配置cors"></a>nginx 配置cors</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">'POST,DELETE,OPTIONS'</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Max-Age: <span class="number">7200</span></span><br><span class="line">    add_header Aceess-Contorl-Allow-Headers <span class="string">'Cache-Control,Keep-Alive,If-Modified-Since,Content-Type,Authorization'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者单独对options 请求配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    if($request_method = 'OPTIONS) &#123;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">'GET,POST,PUT,DELETE,OPTIONS'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Header <span class="string">'Cache-control,If-Modified-Since,If-None-Matched,Authorization,Content-Type'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简单请求&quot;&gt;&lt;a href=&quot;#简单请求&quot; class=&quot;headerlink&quot; title=&quot;简单请求&quot;&gt;&lt;/a&gt;简单请求&lt;/h3&gt;&lt;p&gt;必须满足下列所有条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方法是 GET POST HEAD(只请求资源首部)&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx之location</title>
    <link href="https://blog.xunserver.cn/archives/e22c93eb.html"/>
    <id>https://blog.xunserver.cn/archives/e22c93eb.html</id>
    <published>2021-12-15T14:31:27.000Z</published>
    <updated>2021-12-15T14:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h3><p>windows 直接下载官方二进制包，添加到环境变量</p><h3 id="其他版本安装"><a href="#其他版本安装" class="headerlink" title="其他版本安装"></a>其他版本安装</h3><p>官网download下面有个平台的快捷安装方法</p><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><p>需要注意的是配置转发的时候不是127.0.0.1（因为指向的是nginx容器本身）</p><h2 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h2><p>指定配置文件运行</p><blockquote><p>nginx -f xxx.conf </p></blockquote><p>检查配置</p><blockquote><p>nginx -t 检查配置文件<br>nginx -T 检查并输出配置文件</p></blockquote><p>重启、停止</p><blockquote><p>nginx -s restart<br>nginx -s stop </p></blockquote><p>systemctl 管理</p><blockquote><p>systemctl start nginx<br>systemctl stop nginx<br>systemctl restart nginx</p></blockquote><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="server-name"><a href="#server-name" class="headerlink" title="server_name"></a>server_name</h4><p>server_name 支持精准匹配、通配符，正则匹配（^）开头。</p><h3 id="location-语法"><a href="#location-语法" class="headerlink" title="location 语法"></a>location 语法</h3><p>location [= | ^~ | ~* | ~ ] xxx</p><ul><li>= 精准匹配优先级最高。</li><li>^~ 前缀匹配, 按照最长的前缀匹配，如果命中，则会阻止正则，但不会组织普通路径</li><li>~ 区分大小写的正则匹配，正则匹配只要命中就生效。</li><li>~* 不区分大小写的正则匹配</li><li>不加符号，表示前缀匹配, 采用最长匹配</li><li>/ 兜底匹配<br>按照 上述顺序匹配</li></ul><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /test_1 &#123;</span><br><span class="line">    return 400;</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /test &#123;</span><br><span class="line">    return 401;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上如果path为/test_1，返回的是400，说明^~优先级并不比普通匹配高</p><p>例子2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /test_1 &#123;</span><br><span class="line">    return 400;</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /test &#123;</span><br><span class="line">    return 401;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /test &#123;</span><br><span class="line">    return 402;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>会返回 402, 因为会先命中 400 ，然后不会阻止正则</p><h3 id="静态服务器root、alias"><a href="#静态服务器root、alias" class="headerlink" title="静态服务器root、alias"></a>静态服务器root、alias</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /img/ &#123;</span><br><span class="line">    root some/path; # /img/image/1  =&gt; some/path/img/image/1 会将整个路径添加到 root 路径中</span><br><span class="line">    index index.html index.htm;   =&gt; # /user/image/1  =&gt; some/path/user/image/1 或者1.html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">localtion /img/ &#123;</span><br><span class="line">    alias some/path; # /img/image/1  =&gt; some/path/image/1 会舍弃命中部分，所以要求location 和alias上级目录一致，所以location一定是一个目录，一定需要在末尾添加 / </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proxy-pass-解析"><a href="#proxy-pass-解析" class="headerlink" title="proxy_pass 解析"></a>proxy_pass 解析</h3><p>目标地址后不带/，表示将请求的path拼接在target之后，如果带，表示将请求命中之外的拼接在target后</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;windows-安装&quot;&gt;&lt;a href=&quot;#windows-安装&quot; class=&quot;headerlink&quot; title=&quot;windo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>call,apply,bind实现</title>
    <link href="https://blog.xunserver.cn/archives/8b2df16f.html"/>
    <id>https://blog.xunserver.cn/archives/8b2df16f.html</id>
    <published>2021-12-07T07:22:56.000Z</published>
    <updated>2021-12-07T07:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>模拟this调用</li><li>解析剩余参数</li><li>参数如何传到函数中</li><li>context为null时处理</li><li>处理函数非法的情况</li><li>删除额外新增的变量，最好采用symbol<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getFunctionArgs = <span class="function">(<span class="params">funcArgs, startIndex = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = startIndex, len = funcArgs.length; i &lt; len; i++) &#123;</span><br><span class="line">        result.push(funcArgs[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkFunction = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> fn === <span class="string">'function'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(checkFunction(<span class="keyword">this</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not function'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> restArgs = getFunctionArgs(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    context = context || globalThis;</span><br><span class="line">    context.__fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">`context.__fn(<span class="subst">$&#123;restArgs&#125;</span>)`</span>)</span><br><span class="line">    <span class="keyword">delete</span> context.__fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context, args = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!checkFunction(<span class="keyword">this</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not function'</span>);</span><br><span class="line">    context = context || globalThis;</span><br><span class="line">    context.__fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">`context.__fn(<span class="subst">$&#123;args&#125;</span>)`</span>)</span><br><span class="line">    <span class="keyword">delete</span> context.__fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context, ...initArgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!checkFunction(<span class="keyword">this</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'not function'</span>);</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> temp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    temp.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fbind = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.myCall(<span class="keyword">this</span> <span class="keyword">instanceof</span> fn ? <span class="keyword">this</span> : context, ...initArgs, ...args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fbind.prototype = <span class="keyword">new</span> temp()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fbind</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newFn</span>(<span class="params">constructor, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    obj.__proto__ = <span class="keyword">constructor</span>.prototype;</span><br><span class="line">    <span class="keyword">constructor</span>.myApply(obj, args)</span><br><span class="line"></span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;模拟this调用&lt;/li&gt;
&lt;li&gt;解析剩余参数&lt;/li&gt;
&lt;li&gt;参数如何传到函数中&lt;/li&gt;
&lt;li&gt;context为nul
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>whistle跨平台代理调试工具</title>
    <link href="https://blog.xunserver.cn/archives/5258564a.html"/>
    <id>https://blog.xunserver.cn/archives/5258564a.html</id>
    <published>2021-11-22T09:14:22.000Z</published>
    <updated>2021-11-22T09:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>whistle用于代理http,https,websocket请求，监听修改报文，实现调式功能。语法简单，对前端友好。</p><h3 id="安装和命令行"><a href="#安装和命令行" class="headerlink" title="安装和命令行"></a>安装和命令行</h3><p>通过npm全局安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm i -g whistle</span><br><span class="line"><span class="comment"># 前台启动</span></span><br><span class="line">w2 run </span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">w2 start</span><br><span class="line"><span class="comment"># 后台停止</span></span><br><span class="line">w2 stop</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">w2 restart</span><br><span class="line"><span class="comment"># 查看帮助信息</span></span><br><span class="line">w2 <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><p>其余请求参数</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h4><p>whistle所有的操作都是通过下面范式配置， 匹配模式   操作协议+操作值</p><pre><code>pattern       operatorURI   |                |请求url表达式    对应的操作：操作协议和操作值</code></pre><h4 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h4><p>匹配模式分为域名、路径、正则、精准匹配和，通配符匹配</p><h5 id="域名匹配"><a href="#域名匹配" class="headerlink" title="域名匹配"></a>域名匹配</h5><p>通过域名、协议和端口号进行匹配，会匹配命中的所有请求<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不区分协议</span></span><br><span class="line">www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区分协议， 注意尾部添加/ 不是域名匹配</span></span><br><span class="line">https://www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带端口的形式</span></span><br><span class="line">www.baiu.com:9000</span><br></pre></td></tr></table></figure></p><h5 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h5><p>匹配uri路径及其子路径，uri是由域名和路径组成<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com/xxx    <span class="comment"># 匹配 www.baidu.com/xxx 以及 www.baidu.com/xxx/xxx1/xxxx.index.html, 但是不匹配 www.baidu.com/xxx1</span></span><br></pre></td></tr></table></figure></p><p>如果想实现任何域名的路径匹配，使用通配符模式 **/xxx</p><h5 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h5><p>支持子匹配，i模式，不支持g模式。子匹配可用在operatorURI中,同时支持非匹配 <code>!/xxx/</code></p><h5 id="精准匹配"><a href="#精准匹配" class="headerlink" title="精准匹配"></a>精准匹配</h5><p>在路径匹配前添加$，同时支持非匹配， 表示不精准匹配某条。<code>!\$uri</code></p><h5 id="通配符匹配"><a href="#通配符匹配" class="headerlink" title="通配符匹配"></a>通配符匹配</h5><p>使用<code>^</code>开始，可选的<code>$</code>作为结尾</p><ul><li>*.com 匹配 xx.com 但是不能匹配 a.xx.com</li><li>**.com 可以匹配 a.xx.com</li><li>*/xx  可以匹配</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;whistle用于代理http,https,websocket请求，监听修改报文，实现调式功能。语法简单，对前端友好。&lt;/p&gt;
&lt;h3 id
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用软件合集</title>
    <link href="https://blog.xunserver.cn/archives/f11219d6.html"/>
    <id>https://blog.xunserver.cn/archives/f11219d6.html</id>
    <published>2021-11-19T02:02:16.000Z</published>
    <updated>2021-11-19T02:02:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li><a href="https://code.visualstudio.com/#alt-downloads" target="_blank" rel="noopener">vscode</a></li><li><a href="https://sublimetextcn.com/3/" target="_blank" rel="noopener">subline</a></li><li><a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">notepad++</a>，<a href="http://cdn.xunserver.cn/npp.8.1.9.1.Installer.exe" target="_blank" rel="noopener">国内下载</a></li></ul><h3 id="数据库GUI"><a href="#数据库GUI" class="headerlink" title="数据库GUI"></a>数据库GUI</h3><ul><li>mysql <a href="https://dbeaver.io/download/" target="_blank" rel="noopener">dbeaver</a>，<a href="http://cdn.xunserver.cn/dbeaver-ce-21.2.5-x86_64-setup.exe" target="_blank" rel="noopener">国内下载</a></li><li>redis <a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases" target="_blank" rel="noopener"><br>AnotherRedisDesktopManager</a></li></ul><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><ul><li><h3 id="git相关"><a href="#git相关" class="headerlink" title="git相关"></a>git相关</h3></li><li><a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">git</a></li></ul><h3 id="vscode-插件"><a href="#vscode-插件" class="headerlink" title="vscode 插件"></a>vscode 插件</h3><ul><li>code runner</li><li>css peek</li><li>eslint</li><li>stylelint</li><li>vetur</li><li>rest client</li><li>prettier</li><li>git lens</li><li>live Server</li><li>markdown all in one</li><li>git lens</li><li>git history</li></ul><h3 id="npm-包"><a href="#npm-包" class="headerlink" title="npm 包"></a>npm 包</h3><ul><li><p>代理工具</p><blockquote><p>npm i -g whistle</p></blockquote></li><li><p>静态服务器</p><blockquote><p>npm i -g static-server</p></blockquote></li></ul><h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><ul><li>act 本地运行github action工具</li><li>ftp和dhcp简单工具 tftpd64</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编辑器&quot;&gt;&lt;a href=&quot;#编辑器&quot; class=&quot;headerlink&quot; title=&quot;编辑器&quot;&gt;&lt;/a&gt;编辑器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/#alt-downloads&quot; targe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端加密那些事儿</title>
    <link href="https://blog.xunserver.cn/archives/d35b105.html"/>
    <id>https://blog.xunserver.cn/archives/d35b105.html</id>
    <published>2021-11-18T11:43:45.000Z</published>
    <updated>2021-11-18T11:43:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>glob模式学习</title>
    <link href="https://blog.xunserver.cn/archives/5500de7d.html"/>
    <id>https://blog.xunserver.cn/archives/5500de7d.html</id>
    <published>2021-11-16T09:44:06.000Z</published>
    <updated>2021-11-16T09:44:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>区段 地址分隔符中分隔的区间 比如 <code>/a/b/c</code> 就分为了3个区间</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><code>*</code>  匹配单个区段中0个或者多个字符</li><li><code>**</code> 匹配跨区段 0个或者多个字符, 如果是 <code>**/</code> 只会匹配目录，或者忽略目录</li><li><code>?</code> 匹配一个字符</li><li><code>[]</code>配置括号中某个字符,当开头添加 <code>^</code>、<code>!</code>时表示不匹配</li><li><code>!</code> <code>?</code> <code>*</code> 和小括号一起使用时，和正则类似</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>匹配任意module下全部js，除了index.js</p><blockquote><p>**/module/!(index).js</p></blockquote><p>只能配置 /module 或者 xx/module，不能匹配 /xx/module</p><blockquote><p>*/module  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;区段 地址分隔符中分隔的区间 比如 &lt;code&gt;/a/b/c&lt;/code&gt; 就分为了3个区间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id
      
    
    </summary>
    
    
  </entry>
  
</feed>
